

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Nov 05 15:59:37 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	text23,local,class=CODE,merge=1,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	psect	text33,local,class=CODE,merge=1,delta=2
    59                           	psect	text34,local,class=CODE,merge=1,delta=2
    60                           	psect	text35,local,class=CODE,merge=1,delta=2
    61                           	psect	text36,local,class=CODE,merge=1,delta=2
    62                           	dabs	1,0x7E,2
    63  0000                     
    64                           ; Version 2.05
    65                           ; Generated 20/12/2018 GMT
    66                           ; 
    67                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    68                           ; All rights reserved.
    69                           ; 
    70                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    71                           ; 
    72                           ; Redistribution and use in source and binary forms, with or without modification, are
    73                           ; permitted provided that the following conditions are met:
    74                           ; 
    75                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    76                           ;        conditions and the following disclaimer.
    77                           ; 
    78                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    79                           ;        of conditions and the following disclaimer in the documentation and/or other
    80                           ;        materials provided with the distribution.
    81                           ; 
    82                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    83                           ;        software without specific prior written permission.
    84                           ; 
    85                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    86                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    87                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    88                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    89                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    90                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    91                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    92                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    93                           ; 
    94                           ; 
    95                           ; Code-generator required, PIC16LF1559 Definitions
    96                           ; 
    97                           ; SFR Addresses
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  0007                     	;# 
   106  0008                     	;# 
   107  0009                     	;# 
   108  000A                     	;# 
   109  000B                     	;# 
   110  000C                     	;# 
   111  000D                     	;# 
   112  000E                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0015                     	;# 
   116  0016                     	;# 
   117  0016                     	;# 
   118  0017                     	;# 
   119  0018                     	;# 
   120  0019                     	;# 
   121  001A                     	;# 
   122  001B                     	;# 
   123  001C                     	;# 
   124  008C                     	;# 
   125  008D                     	;# 
   126  008E                     	;# 
   127  0091                     	;# 
   128  0092                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0099                     	;# 
   133  009A                     	;# 
   134  009B                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  010C                     	;# 
   141  010D                     	;# 
   142  010E                     	;# 
   143  0116                     	;# 
   144  0117                     	;# 
   145  011D                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148  018E                     	;# 
   149  0191                     	;# 
   150  0191                     	;# 
   151  0192                     	;# 
   152  0193                     	;# 
   153  0193                     	;# 
   154  0194                     	;# 
   155  0195                     	;# 
   156  0196                     	;# 
   157  0199                     	;# 
   158  019A                     	;# 
   159  019B                     	;# 
   160  019B                     	;# 
   161  019C                     	;# 
   162  019D                     	;# 
   163  019E                     	;# 
   164  019F                     	;# 
   165  020C                     	;# 
   166  020D                     	;# 
   167  0211                     	;# 
   168  0211                     	;# 
   169  0212                     	;# 
   170  0212                     	;# 
   171  0213                     	;# 
   172  0213                     	;# 
   173  0214                     	;# 
   174  0214                     	;# 
   175  0215                     	;# 
   176  0215                     	;# 
   177  0215                     	;# 
   178  0216                     	;# 
   179  0216                     	;# 
   180  0217                     	;# 
   181  0217                     	;# 
   182  0391                     	;# 
   183  0392                     	;# 
   184  0393                     	;# 
   185  0394                     	;# 
   186  0395                     	;# 
   187  0396                     	;# 
   188  0611                     	;# 
   189  0612                     	;# 
   190  0613                     	;# 
   191  0613                     	;# 
   192  0614                     	;# 
   193  0615                     	;# 
   194  0616                     	;# 
   195  0616                     	;# 
   196  0711                     	;# 
   197  0711                     	;# 
   198  0711                     	;# 
   199  0712                     	;# 
   200  0712                     	;# 
   201  0713                     	;# 
   202  0713                     	;# 
   203  0713                     	;# 
   204  0714                     	;# 
   205  0714                     	;# 
   206  0714                     	;# 
   207  0715                     	;# 
   208  0715                     	;# 
   209  0716                     	;# 
   210  0716                     	;# 
   211  0716                     	;# 
   212  0716                     	;# 
   213  0717                     	;# 
   214  0717                     	;# 
   215  0717                     	;# 
   216  0717                     	;# 
   217  0718                     	;# 
   218  0718                     	;# 
   219  0718                     	;# 
   220  0719                     	;# 
   221  0719                     	;# 
   222  0719                     	;# 
   223  0719                     	;# 
   224  071A                     	;# 
   225  071A                     	;# 
   226  071A                     	;# 
   227  071A                     	;# 
   228  071A                     	;# 
   229  071B                     	;# 
   230  071B                     	;# 
   231  071C                     	;# 
   232  071C                     	;# 
   233  071C                     	;# 
   234  071C                     	;# 
   235  071C                     	;# 
   236  071D                     	;# 
   237  071D                     	;# 
   238  071E                     	;# 
   239  071E                     	;# 
   240  0791                     	;# 
   241  0791                     	;# 
   242  0793                     	;# 
   243  0793                     	;# 
   244  0794                     	;# 
   245  0794                     	;# 
   246  0796                     	;# 
   247  0796                     	;# 
   248  0796                     	;# 
   249  0797                     	;# 
   250  0797                     	;# 
   251  0797                     	;# 
   252  0798                     	;# 
   253  0798                     	;# 
   254  0799                     	;# 
   255  0799                     	;# 
   256  0799                     	;# 
   257  079A                     	;# 
   258  079A                     	;# 
   259  079A                     	;# 
   260  079B                     	;# 
   261  079C                     	;# 
   262  079C                     	;# 
   263  079C                     	;# 
   264  079D                     	;# 
   265  079E                     	;# 
   266  079E                     	;# 
   267  0F8C                     	;# 
   268  0F8D                     	;# 
   269  0F91                     	;# 
   270  0F96                     	;# 
   271  0F97                     	;# 
   272  0F9C                     	;# 
   273  0F9D                     	;# 
   274  0F9E                     	;# 
   275  0FE3                     	;# 
   276  0FE4                     	;# 
   277  0FE5                     	;# 
   278  0FE6                     	;# 
   279  0FE7                     	;# 
   280  0FE8                     	;# 
   281  0FE9                     	;# 
   282  0FEA                     	;# 
   283  0FEB                     	;# 
   284  0FED                     	;# 
   285  0FEE                     	;# 
   286  0FEF                     	;# 
   287  0000                     	;# 
   288  0001                     	;# 
   289  0002                     	;# 
   290  0003                     	;# 
   291  0004                     	;# 
   292  0005                     	;# 
   293  0006                     	;# 
   294  0007                     	;# 
   295  0008                     	;# 
   296  0009                     	;# 
   297  000A                     	;# 
   298  000B                     	;# 
   299  000C                     	;# 
   300  000D                     	;# 
   301  000E                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  008C                     	;# 
   314  008D                     	;# 
   315  008E                     	;# 
   316  0091                     	;# 
   317  0092                     	;# 
   318  0095                     	;# 
   319  0096                     	;# 
   320  0097                     	;# 
   321  0099                     	;# 
   322  009A                     	;# 
   323  009B                     	;# 
   324  009B                     	;# 
   325  009C                     	;# 
   326  009D                     	;# 
   327  009E                     	;# 
   328  009F                     	;# 
   329  010C                     	;# 
   330  010D                     	;# 
   331  010E                     	;# 
   332  0116                     	;# 
   333  0117                     	;# 
   334  011D                     	;# 
   335  018C                     	;# 
   336  018D                     	;# 
   337  018E                     	;# 
   338  0191                     	;# 
   339  0191                     	;# 
   340  0192                     	;# 
   341  0193                     	;# 
   342  0193                     	;# 
   343  0194                     	;# 
   344  0195                     	;# 
   345  0196                     	;# 
   346  0199                     	;# 
   347  019A                     	;# 
   348  019B                     	;# 
   349  019B                     	;# 
   350  019C                     	;# 
   351  019D                     	;# 
   352  019E                     	;# 
   353  019F                     	;# 
   354  020C                     	;# 
   355  020D                     	;# 
   356  0211                     	;# 
   357  0211                     	;# 
   358  0212                     	;# 
   359  0212                     	;# 
   360  0213                     	;# 
   361  0213                     	;# 
   362  0214                     	;# 
   363  0214                     	;# 
   364  0215                     	;# 
   365  0215                     	;# 
   366  0215                     	;# 
   367  0216                     	;# 
   368  0216                     	;# 
   369  0217                     	;# 
   370  0217                     	;# 
   371  0391                     	;# 
   372  0392                     	;# 
   373  0393                     	;# 
   374  0394                     	;# 
   375  0395                     	;# 
   376  0396                     	;# 
   377  0611                     	;# 
   378  0612                     	;# 
   379  0613                     	;# 
   380  0613                     	;# 
   381  0614                     	;# 
   382  0615                     	;# 
   383  0616                     	;# 
   384  0616                     	;# 
   385  0711                     	;# 
   386  0711                     	;# 
   387  0711                     	;# 
   388  0712                     	;# 
   389  0712                     	;# 
   390  0713                     	;# 
   391  0713                     	;# 
   392  0713                     	;# 
   393  0714                     	;# 
   394  0714                     	;# 
   395  0714                     	;# 
   396  0715                     	;# 
   397  0715                     	;# 
   398  0716                     	;# 
   399  0716                     	;# 
   400  0716                     	;# 
   401  0716                     	;# 
   402  0717                     	;# 
   403  0717                     	;# 
   404  0717                     	;# 
   405  0717                     	;# 
   406  0718                     	;# 
   407  0718                     	;# 
   408  0718                     	;# 
   409  0719                     	;# 
   410  0719                     	;# 
   411  0719                     	;# 
   412  0719                     	;# 
   413  071A                     	;# 
   414  071A                     	;# 
   415  071A                     	;# 
   416  071A                     	;# 
   417  071A                     	;# 
   418  071B                     	;# 
   419  071B                     	;# 
   420  071C                     	;# 
   421  071C                     	;# 
   422  071C                     	;# 
   423  071C                     	;# 
   424  071C                     	;# 
   425  071D                     	;# 
   426  071D                     	;# 
   427  071E                     	;# 
   428  071E                     	;# 
   429  0791                     	;# 
   430  0791                     	;# 
   431  0793                     	;# 
   432  0793                     	;# 
   433  0794                     	;# 
   434  0794                     	;# 
   435  0796                     	;# 
   436  0796                     	;# 
   437  0796                     	;# 
   438  0797                     	;# 
   439  0797                     	;# 
   440  0797                     	;# 
   441  0798                     	;# 
   442  0798                     	;# 
   443  0799                     	;# 
   444  0799                     	;# 
   445  0799                     	;# 
   446  079A                     	;# 
   447  079A                     	;# 
   448  079A                     	;# 
   449  079B                     	;# 
   450  079C                     	;# 
   451  079C                     	;# 
   452  079C                     	;# 
   453  079D                     	;# 
   454  079E                     	;# 
   455  079E                     	;# 
   456  0F8C                     	;# 
   457  0F8D                     	;# 
   458  0F91                     	;# 
   459  0F96                     	;# 
   460  0F97                     	;# 
   461  0F9C                     	;# 
   462  0F9D                     	;# 
   463  0F9E                     	;# 
   464  0FE3                     	;# 
   465  0FE4                     	;# 
   466  0FE5                     	;# 
   467  0FE6                     	;# 
   468  0FE7                     	;# 
   469  0FE8                     	;# 
   470  0FE9                     	;# 
   471  0FEA                     	;# 
   472  0FEB                     	;# 
   473  0FED                     	;# 
   474  0FEE                     	;# 
   475  0FEF                     	;# 
   476  0000                     	;# 
   477  0001                     	;# 
   478  0002                     	;# 
   479  0003                     	;# 
   480  0004                     	;# 
   481  0005                     	;# 
   482  0006                     	;# 
   483  0007                     	;# 
   484  0008                     	;# 
   485  0009                     	;# 
   486  000A                     	;# 
   487  000B                     	;# 
   488  000C                     	;# 
   489  000D                     	;# 
   490  000E                     	;# 
   491  0011                     	;# 
   492  0012                     	;# 
   493  0015                     	;# 
   494  0016                     	;# 
   495  0016                     	;# 
   496  0017                     	;# 
   497  0018                     	;# 
   498  0019                     	;# 
   499  001A                     	;# 
   500  001B                     	;# 
   501  001C                     	;# 
   502  008C                     	;# 
   503  008D                     	;# 
   504  008E                     	;# 
   505  0091                     	;# 
   506  0092                     	;# 
   507  0095                     	;# 
   508  0096                     	;# 
   509  0097                     	;# 
   510  0099                     	;# 
   511  009A                     	;# 
   512  009B                     	;# 
   513  009B                     	;# 
   514  009C                     	;# 
   515  009D                     	;# 
   516  009E                     	;# 
   517  009F                     	;# 
   518  010C                     	;# 
   519  010D                     	;# 
   520  010E                     	;# 
   521  0116                     	;# 
   522  0117                     	;# 
   523  011D                     	;# 
   524  018C                     	;# 
   525  018D                     	;# 
   526  018E                     	;# 
   527  0191                     	;# 
   528  0191                     	;# 
   529  0192                     	;# 
   530  0193                     	;# 
   531  0193                     	;# 
   532  0194                     	;# 
   533  0195                     	;# 
   534  0196                     	;# 
   535  0199                     	;# 
   536  019A                     	;# 
   537  019B                     	;# 
   538  019B                     	;# 
   539  019C                     	;# 
   540  019D                     	;# 
   541  019E                     	;# 
   542  019F                     	;# 
   543  020C                     	;# 
   544  020D                     	;# 
   545  0211                     	;# 
   546  0211                     	;# 
   547  0212                     	;# 
   548  0212                     	;# 
   549  0213                     	;# 
   550  0213                     	;# 
   551  0214                     	;# 
   552  0214                     	;# 
   553  0215                     	;# 
   554  0215                     	;# 
   555  0215                     	;# 
   556  0216                     	;# 
   557  0216                     	;# 
   558  0217                     	;# 
   559  0217                     	;# 
   560  0391                     	;# 
   561  0392                     	;# 
   562  0393                     	;# 
   563  0394                     	;# 
   564  0395                     	;# 
   565  0396                     	;# 
   566  0611                     	;# 
   567  0612                     	;# 
   568  0613                     	;# 
   569  0613                     	;# 
   570  0614                     	;# 
   571  0615                     	;# 
   572  0616                     	;# 
   573  0616                     	;# 
   574  0711                     	;# 
   575  0711                     	;# 
   576  0711                     	;# 
   577  0712                     	;# 
   578  0712                     	;# 
   579  0713                     	;# 
   580  0713                     	;# 
   581  0713                     	;# 
   582  0714                     	;# 
   583  0714                     	;# 
   584  0714                     	;# 
   585  0715                     	;# 
   586  0715                     	;# 
   587  0716                     	;# 
   588  0716                     	;# 
   589  0716                     	;# 
   590  0716                     	;# 
   591  0717                     	;# 
   592  0717                     	;# 
   593  0717                     	;# 
   594  0717                     	;# 
   595  0718                     	;# 
   596  0718                     	;# 
   597  0718                     	;# 
   598  0719                     	;# 
   599  0719                     	;# 
   600  0719                     	;# 
   601  0719                     	;# 
   602  071A                     	;# 
   603  071A                     	;# 
   604  071A                     	;# 
   605  071A                     	;# 
   606  071A                     	;# 
   607  071B                     	;# 
   608  071B                     	;# 
   609  071C                     	;# 
   610  071C                     	;# 
   611  071C                     	;# 
   612  071C                     	;# 
   613  071C                     	;# 
   614  071D                     	;# 
   615  071D                     	;# 
   616  071E                     	;# 
   617  071E                     	;# 
   618  0791                     	;# 
   619  0791                     	;# 
   620  0793                     	;# 
   621  0793                     	;# 
   622  0794                     	;# 
   623  0794                     	;# 
   624  0796                     	;# 
   625  0796                     	;# 
   626  0796                     	;# 
   627  0797                     	;# 
   628  0797                     	;# 
   629  0797                     	;# 
   630  0798                     	;# 
   631  0798                     	;# 
   632  0799                     	;# 
   633  0799                     	;# 
   634  0799                     	;# 
   635  079A                     	;# 
   636  079A                     	;# 
   637  079A                     	;# 
   638  079B                     	;# 
   639  079C                     	;# 
   640  079C                     	;# 
   641  079C                     	;# 
   642  079D                     	;# 
   643  079E                     	;# 
   644  079E                     	;# 
   645  0F8C                     	;# 
   646  0F8D                     	;# 
   647  0F91                     	;# 
   648  0F96                     	;# 
   649  0F97                     	;# 
   650  0F9C                     	;# 
   651  0F9D                     	;# 
   652  0F9E                     	;# 
   653  0FE3                     	;# 
   654  0FE4                     	;# 
   655  0FE5                     	;# 
   656  0FE6                     	;# 
   657  0FE7                     	;# 
   658  0FE8                     	;# 
   659  0FE9                     	;# 
   660  0FEA                     	;# 
   661  0FEB                     	;# 
   662  0FED                     	;# 
   663  0FEE                     	;# 
   664  0FEF                     	;# 
   665  0000                     	;# 
   666  0001                     	;# 
   667  0002                     	;# 
   668  0003                     	;# 
   669  0004                     	;# 
   670  0005                     	;# 
   671  0006                     	;# 
   672  0007                     	;# 
   673  0008                     	;# 
   674  0009                     	;# 
   675  000A                     	;# 
   676  000B                     	;# 
   677  000C                     	;# 
   678  000D                     	;# 
   679  000E                     	;# 
   680  0011                     	;# 
   681  0012                     	;# 
   682  0015                     	;# 
   683  0016                     	;# 
   684  0016                     	;# 
   685  0017                     	;# 
   686  0018                     	;# 
   687  0019                     	;# 
   688  001A                     	;# 
   689  001B                     	;# 
   690  001C                     	;# 
   691  008C                     	;# 
   692  008D                     	;# 
   693  008E                     	;# 
   694  0091                     	;# 
   695  0092                     	;# 
   696  0095                     	;# 
   697  0096                     	;# 
   698  0097                     	;# 
   699  0099                     	;# 
   700  009A                     	;# 
   701  009B                     	;# 
   702  009B                     	;# 
   703  009C                     	;# 
   704  009D                     	;# 
   705  009E                     	;# 
   706  009F                     	;# 
   707  010C                     	;# 
   708  010D                     	;# 
   709  010E                     	;# 
   710  0116                     	;# 
   711  0117                     	;# 
   712  011D                     	;# 
   713  018C                     	;# 
   714  018D                     	;# 
   715  018E                     	;# 
   716  0191                     	;# 
   717  0191                     	;# 
   718  0192                     	;# 
   719  0193                     	;# 
   720  0193                     	;# 
   721  0194                     	;# 
   722  0195                     	;# 
   723  0196                     	;# 
   724  0199                     	;# 
   725  019A                     	;# 
   726  019B                     	;# 
   727  019B                     	;# 
   728  019C                     	;# 
   729  019D                     	;# 
   730  019E                     	;# 
   731  019F                     	;# 
   732  020C                     	;# 
   733  020D                     	;# 
   734  0211                     	;# 
   735  0211                     	;# 
   736  0212                     	;# 
   737  0212                     	;# 
   738  0213                     	;# 
   739  0213                     	;# 
   740  0214                     	;# 
   741  0214                     	;# 
   742  0215                     	;# 
   743  0215                     	;# 
   744  0215                     	;# 
   745  0216                     	;# 
   746  0216                     	;# 
   747  0217                     	;# 
   748  0217                     	;# 
   749  0391                     	;# 
   750  0392                     	;# 
   751  0393                     	;# 
   752  0394                     	;# 
   753  0395                     	;# 
   754  0396                     	;# 
   755  0611                     	;# 
   756  0612                     	;# 
   757  0613                     	;# 
   758  0613                     	;# 
   759  0614                     	;# 
   760  0615                     	;# 
   761  0616                     	;# 
   762  0616                     	;# 
   763  0711                     	;# 
   764  0711                     	;# 
   765  0711                     	;# 
   766  0712                     	;# 
   767  0712                     	;# 
   768  0713                     	;# 
   769  0713                     	;# 
   770  0713                     	;# 
   771  0714                     	;# 
   772  0714                     	;# 
   773  0714                     	;# 
   774  0715                     	;# 
   775  0715                     	;# 
   776  0716                     	;# 
   777  0716                     	;# 
   778  0716                     	;# 
   779  0716                     	;# 
   780  0717                     	;# 
   781  0717                     	;# 
   782  0717                     	;# 
   783  0717                     	;# 
   784  0718                     	;# 
   785  0718                     	;# 
   786  0718                     	;# 
   787  0719                     	;# 
   788  0719                     	;# 
   789  0719                     	;# 
   790  0719                     	;# 
   791  071A                     	;# 
   792  071A                     	;# 
   793  071A                     	;# 
   794  071A                     	;# 
   795  071A                     	;# 
   796  071B                     	;# 
   797  071B                     	;# 
   798  071C                     	;# 
   799  071C                     	;# 
   800  071C                     	;# 
   801  071C                     	;# 
   802  071C                     	;# 
   803  071D                     	;# 
   804  071D                     	;# 
   805  071E                     	;# 
   806  071E                     	;# 
   807  0791                     	;# 
   808  0791                     	;# 
   809  0793                     	;# 
   810  0793                     	;# 
   811  0794                     	;# 
   812  0794                     	;# 
   813  0796                     	;# 
   814  0796                     	;# 
   815  0796                     	;# 
   816  0797                     	;# 
   817  0797                     	;# 
   818  0797                     	;# 
   819  0798                     	;# 
   820  0798                     	;# 
   821  0799                     	;# 
   822  0799                     	;# 
   823  0799                     	;# 
   824  079A                     	;# 
   825  079A                     	;# 
   826  079A                     	;# 
   827  079B                     	;# 
   828  079C                     	;# 
   829  079C                     	;# 
   830  079C                     	;# 
   831  079D                     	;# 
   832  079E                     	;# 
   833  079E                     	;# 
   834  0F8C                     	;# 
   835  0F8D                     	;# 
   836  0F91                     	;# 
   837  0F96                     	;# 
   838  0F97                     	;# 
   839  0F9C                     	;# 
   840  0F9D                     	;# 
   841  0F9E                     	;# 
   842  0FE3                     	;# 
   843  0FE4                     	;# 
   844  0FE5                     	;# 
   845  0FE6                     	;# 
   846  0FE7                     	;# 
   847  0FE8                     	;# 
   848  0FE9                     	;# 
   849  0FEA                     	;# 
   850  0FEB                     	;# 
   851  0FED                     	;# 
   852  0FEE                     	;# 
   853  0FEF                     	;# 
   854  0000                     	;# 
   855  0001                     	;# 
   856  0002                     	;# 
   857  0003                     	;# 
   858  0004                     	;# 
   859  0005                     	;# 
   860  0006                     	;# 
   861  0007                     	;# 
   862  0008                     	;# 
   863  0009                     	;# 
   864  000A                     	;# 
   865  000B                     	;# 
   866  000C                     	;# 
   867  000D                     	;# 
   868  000E                     	;# 
   869  0011                     	;# 
   870  0012                     	;# 
   871  0015                     	;# 
   872  0016                     	;# 
   873  0016                     	;# 
   874  0017                     	;# 
   875  0018                     	;# 
   876  0019                     	;# 
   877  001A                     	;# 
   878  001B                     	;# 
   879  001C                     	;# 
   880  008C                     	;# 
   881  008D                     	;# 
   882  008E                     	;# 
   883  0091                     	;# 
   884  0092                     	;# 
   885  0095                     	;# 
   886  0096                     	;# 
   887  0097                     	;# 
   888  0099                     	;# 
   889  009A                     	;# 
   890  009B                     	;# 
   891  009B                     	;# 
   892  009C                     	;# 
   893  009D                     	;# 
   894  009E                     	;# 
   895  009F                     	;# 
   896  010C                     	;# 
   897  010D                     	;# 
   898  010E                     	;# 
   899  0116                     	;# 
   900  0117                     	;# 
   901  011D                     	;# 
   902  018C                     	;# 
   903  018D                     	;# 
   904  018E                     	;# 
   905  0191                     	;# 
   906  0191                     	;# 
   907  0192                     	;# 
   908  0193                     	;# 
   909  0193                     	;# 
   910  0194                     	;# 
   911  0195                     	;# 
   912  0196                     	;# 
   913  0199                     	;# 
   914  019A                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019C                     	;# 
   918  019D                     	;# 
   919  019E                     	;# 
   920  019F                     	;# 
   921  020C                     	;# 
   922  020D                     	;# 
   923  0211                     	;# 
   924  0211                     	;# 
   925  0212                     	;# 
   926  0212                     	;# 
   927  0213                     	;# 
   928  0213                     	;# 
   929  0214                     	;# 
   930  0214                     	;# 
   931  0215                     	;# 
   932  0215                     	;# 
   933  0215                     	;# 
   934  0216                     	;# 
   935  0216                     	;# 
   936  0217                     	;# 
   937  0217                     	;# 
   938  0391                     	;# 
   939  0392                     	;# 
   940  0393                     	;# 
   941  0394                     	;# 
   942  0395                     	;# 
   943  0396                     	;# 
   944  0611                     	;# 
   945  0612                     	;# 
   946  0613                     	;# 
   947  0613                     	;# 
   948  0614                     	;# 
   949  0615                     	;# 
   950  0616                     	;# 
   951  0616                     	;# 
   952  0711                     	;# 
   953  0711                     	;# 
   954  0711                     	;# 
   955  0712                     	;# 
   956  0712                     	;# 
   957  0713                     	;# 
   958  0713                     	;# 
   959  0713                     	;# 
   960  0714                     	;# 
   961  0714                     	;# 
   962  0714                     	;# 
   963  0715                     	;# 
   964  0715                     	;# 
   965  0716                     	;# 
   966  0716                     	;# 
   967  0716                     	;# 
   968  0716                     	;# 
   969  0717                     	;# 
   970  0717                     	;# 
   971  0717                     	;# 
   972  0717                     	;# 
   973  0718                     	;# 
   974  0718                     	;# 
   975  0718                     	;# 
   976  0719                     	;# 
   977  0719                     	;# 
   978  0719                     	;# 
   979  0719                     	;# 
   980  071A                     	;# 
   981  071A                     	;# 
   982  071A                     	;# 
   983  071A                     	;# 
   984  071A                     	;# 
   985  071B                     	;# 
   986  071B                     	;# 
   987  071C                     	;# 
   988  071C                     	;# 
   989  071C                     	;# 
   990  071C                     	;# 
   991  071C                     	;# 
   992  071D                     	;# 
   993  071D                     	;# 
   994  071E                     	;# 
   995  071E                     	;# 
   996  0791                     	;# 
   997  0791                     	;# 
   998  0793                     	;# 
   999  0793                     	;# 
  1000  0794                     	;# 
  1001  0794                     	;# 
  1002  0796                     	;# 
  1003  0796                     	;# 
  1004  0796                     	;# 
  1005  0797                     	;# 
  1006  0797                     	;# 
  1007  0797                     	;# 
  1008  0798                     	;# 
  1009  0798                     	;# 
  1010  0799                     	;# 
  1011  0799                     	;# 
  1012  0799                     	;# 
  1013  079A                     	;# 
  1014  079A                     	;# 
  1015  079A                     	;# 
  1016  079B                     	;# 
  1017  079C                     	;# 
  1018  079C                     	;# 
  1019  079C                     	;# 
  1020  079D                     	;# 
  1021  079E                     	;# 
  1022  079E                     	;# 
  1023  0F8C                     	;# 
  1024  0F8D                     	;# 
  1025  0F91                     	;# 
  1026  0F96                     	;# 
  1027  0F97                     	;# 
  1028  0F9C                     	;# 
  1029  0F9D                     	;# 
  1030  0F9E                     	;# 
  1031  0FE3                     	;# 
  1032  0FE4                     	;# 
  1033  0FE5                     	;# 
  1034  0FE6                     	;# 
  1035  0FE7                     	;# 
  1036  0FE8                     	;# 
  1037  0FE9                     	;# 
  1038  0FEA                     	;# 
  1039  0FEB                     	;# 
  1040  0FED                     	;# 
  1041  0FEE                     	;# 
  1042  0FEF                     	;# 
  1043  0000                     	;# 
  1044  0001                     	;# 
  1045  0002                     	;# 
  1046  0003                     	;# 
  1047  0004                     	;# 
  1048  0005                     	;# 
  1049  0006                     	;# 
  1050  0007                     	;# 
  1051  0008                     	;# 
  1052  0009                     	;# 
  1053  000A                     	;# 
  1054  000B                     	;# 
  1055  000C                     	;# 
  1056  000D                     	;# 
  1057  000E                     	;# 
  1058  0011                     	;# 
  1059  0012                     	;# 
  1060  0015                     	;# 
  1061  0016                     	;# 
  1062  0016                     	;# 
  1063  0017                     	;# 
  1064  0018                     	;# 
  1065  0019                     	;# 
  1066  001A                     	;# 
  1067  001B                     	;# 
  1068  001C                     	;# 
  1069  008C                     	;# 
  1070  008D                     	;# 
  1071  008E                     	;# 
  1072  0091                     	;# 
  1073  0092                     	;# 
  1074  0095                     	;# 
  1075  0096                     	;# 
  1076  0097                     	;# 
  1077  0099                     	;# 
  1078  009A                     	;# 
  1079  009B                     	;# 
  1080  009B                     	;# 
  1081  009C                     	;# 
  1082  009D                     	;# 
  1083  009E                     	;# 
  1084  009F                     	;# 
  1085  010C                     	;# 
  1086  010D                     	;# 
  1087  010E                     	;# 
  1088  0116                     	;# 
  1089  0117                     	;# 
  1090  011D                     	;# 
  1091  018C                     	;# 
  1092  018D                     	;# 
  1093  018E                     	;# 
  1094  0191                     	;# 
  1095  0191                     	;# 
  1096  0192                     	;# 
  1097  0193                     	;# 
  1098  0193                     	;# 
  1099  0194                     	;# 
  1100  0195                     	;# 
  1101  0196                     	;# 
  1102  0199                     	;# 
  1103  019A                     	;# 
  1104  019B                     	;# 
  1105  019B                     	;# 
  1106  019C                     	;# 
  1107  019D                     	;# 
  1108  019E                     	;# 
  1109  019F                     	;# 
  1110  020C                     	;# 
  1111  020D                     	;# 
  1112  0211                     	;# 
  1113  0211                     	;# 
  1114  0212                     	;# 
  1115  0212                     	;# 
  1116  0213                     	;# 
  1117  0213                     	;# 
  1118  0214                     	;# 
  1119  0214                     	;# 
  1120  0215                     	;# 
  1121  0215                     	;# 
  1122  0215                     	;# 
  1123  0216                     	;# 
  1124  0216                     	;# 
  1125  0217                     	;# 
  1126  0217                     	;# 
  1127  0391                     	;# 
  1128  0392                     	;# 
  1129  0393                     	;# 
  1130  0394                     	;# 
  1131  0395                     	;# 
  1132  0396                     	;# 
  1133  0611                     	;# 
  1134  0612                     	;# 
  1135  0613                     	;# 
  1136  0613                     	;# 
  1137  0614                     	;# 
  1138  0615                     	;# 
  1139  0616                     	;# 
  1140  0616                     	;# 
  1141  0711                     	;# 
  1142  0711                     	;# 
  1143  0711                     	;# 
  1144  0712                     	;# 
  1145  0712                     	;# 
  1146  0713                     	;# 
  1147  0713                     	;# 
  1148  0713                     	;# 
  1149  0714                     	;# 
  1150  0714                     	;# 
  1151  0714                     	;# 
  1152  0715                     	;# 
  1153  0715                     	;# 
  1154  0716                     	;# 
  1155  0716                     	;# 
  1156  0716                     	;# 
  1157  0716                     	;# 
  1158  0717                     	;# 
  1159  0717                     	;# 
  1160  0717                     	;# 
  1161  0717                     	;# 
  1162  0718                     	;# 
  1163  0718                     	;# 
  1164  0718                     	;# 
  1165  0719                     	;# 
  1166  0719                     	;# 
  1167  0719                     	;# 
  1168  0719                     	;# 
  1169  071A                     	;# 
  1170  071A                     	;# 
  1171  071A                     	;# 
  1172  071A                     	;# 
  1173  071A                     	;# 
  1174  071B                     	;# 
  1175  071B                     	;# 
  1176  071C                     	;# 
  1177  071C                     	;# 
  1178  071C                     	;# 
  1179  071C                     	;# 
  1180  071C                     	;# 
  1181  071D                     	;# 
  1182  071D                     	;# 
  1183  071E                     	;# 
  1184  071E                     	;# 
  1185  0791                     	;# 
  1186  0791                     	;# 
  1187  0793                     	;# 
  1188  0793                     	;# 
  1189  0794                     	;# 
  1190  0794                     	;# 
  1191  0796                     	;# 
  1192  0796                     	;# 
  1193  0796                     	;# 
  1194  0797                     	;# 
  1195  0797                     	;# 
  1196  0797                     	;# 
  1197  0798                     	;# 
  1198  0798                     	;# 
  1199  0799                     	;# 
  1200  0799                     	;# 
  1201  0799                     	;# 
  1202  079A                     	;# 
  1203  079A                     	;# 
  1204  079A                     	;# 
  1205  079B                     	;# 
  1206  079C                     	;# 
  1207  079C                     	;# 
  1208  079C                     	;# 
  1209  079D                     	;# 
  1210  079E                     	;# 
  1211  079E                     	;# 
  1212  0F8C                     	;# 
  1213  0F8D                     	;# 
  1214  0F91                     	;# 
  1215  0F96                     	;# 
  1216  0F97                     	;# 
  1217  0F9C                     	;# 
  1218  0F9D                     	;# 
  1219  0F9E                     	;# 
  1220  0FE3                     	;# 
  1221  0FE4                     	;# 
  1222  0FE5                     	;# 
  1223  0FE6                     	;# 
  1224  0FE7                     	;# 
  1225  0FE8                     	;# 
  1226  0FE9                     	;# 
  1227  0FEA                     	;# 
  1228  0FEB                     	;# 
  1229  0FED                     	;# 
  1230  0FEE                     	;# 
  1231  0FEF                     	;# 
  1232                           
  1233 ;; Function _EUSART_is_tx_ready is unused but had its address taken
  1234  0000                     
  1235 ;; Function _EUSART_is_tx_done is unused but had its address taken
  1236  0000                     
  1237                           	psect	idataBANK0
  1238  04F7                     __pidataBANK0:	
  1239                           
  1240                           ;initializer for _LVL
  1241  04F7  344C               	retlw	76
  1242  04F8  3445               	retlw	69
  1243  04F9  3456               	retlw	86
  1244  04FA  3445               	retlw	69
  1245  04FB  344C               	retlw	76
  1246                           
  1247                           	psect	idataBANK1
  1248  0450                     __pidataBANK1:	
  1249                           
  1250                           ;initializer for _KEY3
  1251  0450  34FE               	retlw	254
  1252  0451  3402               	retlw	2
  1253  0452  3427               	retlw	39
  1254  0453  3407               	retlw	7
  1255  0454  3404               	retlw	4
  1256  0455  3401               	retlw	1
  1257  0456  3427               	retlw	39
  1258                           
  1259                           ;initializer for _KEY5
  1260  0457  34FE               	retlw	254
  1261  0458  3402               	retlw	2
  1262  0459  3427               	retlw	39
  1263  045A  3407               	retlw	7
  1264  045B  3410               	retlw	16
  1265  045C  3401               	retlw	1
  1266  045D  3433               	retlw	51
  1267                           
  1268                           ;initializer for _RESET
  1269  045E  34FE               	retlw	254
  1270  045F  3401               	retlw	1
  1271  0460  3441               	retlw	65
  1272  0461  3400               	retlw	0
  1273  0462  3400               	retlw	0
  1274  0463  3440               	retlw	64
  1275                           
  1276                           	psect	stringtext1
  1277  0464                     __pstringtext1:	
  1278  0464                     _uart:	
  1279  0464  34A7               	retlw	low _EUSART_Read
  1280  0465  3402               	retlw	high _EUSART_Read
  1281  0466  34CC               	retlw	low _EUSART_Write
  1282  0467  3402               	retlw	high _EUSART_Write
  1283  0468  3400               	retlw	0
  1284  0469  3400               	retlw	0
  1285  046A  34B9               	retlw	low _EUSART_is_rx_ready
  1286  046B  3404               	retlw	high _EUSART_is_rx_ready
  1287  046C  34D9               	retlw	low _EUSART_SetTxInterruptHandler
  1288  046D  3404               	retlw	high _EUSART_SetTxInterruptHandler
  1289  046E  3475               	retlw	low _EUSART_Receive_ISR
  1290  046F  3402               	retlw	high _EUSART_Receive_ISR
  1291  0470  34F1               	retlw	low _EUSART_SetRxInterruptHandler
  1292  0471  3404               	retlw	high _EUSART_SetRxInterruptHandler
  1293  0472  3400               	retlw	0
  1294  0473  3400               	retlw	0
  1295  0474  3485               	retlw	low _EUSART_Transmit_ISR
  1296  0475  3403               	retlw	high _EUSART_Transmit_ISR
  1297  0476  3401               	retlw	low _EUSART_Initialize
  1298  0477  3402               	retlw	high _EUSART_Initialize
  1299  0478                     __end_of_uart:	
  1300                           
  1301                           	psect	nvBANK0
  1302  005D                     __pnvBANK0:	
  1303  005D                     _EUSART_ErrorHandler:	
  1304  005D                     	ds	2
  1305  005F                     _EUSART_OverrunErrorHandler:	
  1306  005F                     	ds	2
  1307  0061                     _EUSART_FramingErrorHandler:	
  1308  0061                     	ds	2
  1309  0063                     _EUSART_RxDefaultInterruptHandler:	
  1310  0063                     	ds	2
  1311  0065                     _EUSART_TxDefaultInterruptHandler:	
  1312  0065                     	ds	2
  1313  0067                     _eusartTxBufferRemaining:	
  1314  0067                     	ds	1
  1315  0011                     _PIR1bits	set	17
  1316  000B                     _INTCONbits	set	11
  1317  0095                     _OPTION_REGbits	set	149
  1318  008E                     _TRISC	set	142
  1319  008D                     _TRISB	set	141
  1320  008C                     _TRISA	set	140
  1321  0097                     _WDTCON	set	151
  1322  0099                     _OSCCON	set	153
  1323  0091                     _PIE1bits	set	145
  1324  011D                     _APFCON	set	285
  1325  010E                     _LATC	set	270
  1326  010D                     _LATB	set	269
  1327  010C                     _LATA	set	268
  1328  0116                     _BORCON	set	278
  1329  018C                     _ANSELA	set	396
  1330  018D                     _ANSELB	set	397
  1331  018E                     _ANSELC	set	398
  1332  0199                     _RCREG	set	409
  1333  019D                     _RCSTAbits	set	413
  1334  019A                     _TXREG	set	410
  1335  019E                     _TXSTAbits	set	414
  1336  019C                     _SPBRGH	set	412
  1337  019B                     _SPBRGL	set	411
  1338  019E                     _TXSTA	set	414
  1339  019D                     _RCSTA	set	413
  1340  019F                     _BAUDCON	set	415
  1341  020C                     _WPUA	set	524
  1342  020D                     _WPUB	set	525
  1343                           
  1344                           	psect	stringtext2
  1345  0478                     __pstringtext2:	
  1346  0478                     STR_2:	
  1347  0478  3453               	retlw	83	;'S'
  1348  0479  3459               	retlw	89	;'Y'
  1349  047A  3453               	retlw	83	;'S'
  1350  047B  3420               	retlw	32	;' '
  1351  047C  3446               	retlw	70	;'F'
  1352  047D  3441               	retlw	65	;'A'
  1353  047E  3443               	retlw	67	;'C'
  1354  047F  3454               	retlw	84	;'T'
  1355  0480  344F               	retlw	79	;'O'
  1356  0481  3452               	retlw	82	;'R'
  1357  0482  3459               	retlw	89	;'Y'
  1358  0483  3420               	retlw	32	;' '
  1359  0484  3452               	retlw	82	;'R'
  1360  0485  3445               	retlw	69	;'E'
  1361  0486  3453               	retlw	83	;'S'
  1362  0487  3445               	retlw	69	;'E'
  1363  0488  3454               	retlw	84	;'T'
  1364  0489  3400               	retlw	0
  1365                           
  1366                           	psect	stringtext3
  1367  049C                     __pstringtext3:	
  1368  049C                     STR_3:	
  1369  049C  3453               	retlw	83	;'S'
  1370  049D  344D               	retlw	77	;'M'
  1371  049E  3441               	retlw	65	;'A'
  1372  049F  3452               	retlw	82	;'R'
  1373  04A0  3454               	retlw	84	;'T'
  1374  04A1  3420               	retlw	32	;' '
  1375  04A2  344C               	retlw	76	;'L'
  1376  04A3  3449               	retlw	73	;'I'
  1377  04A4  3447               	retlw	71	;'G'
  1378  04A5  3448               	retlw	72	;'H'
  1379  04A6  3454               	retlw	84	;'T'
  1380  04A7  3420               	retlw	32	;' '
  1381  04A8  3449               	retlw	73	;'I'
  1382  04A9  344E               	retlw	78	;'N'
  1383  04AA  3449               	retlw	73	;'I'
  1384  04AB  3454               	retlw	84	;'T'
  1385  04AC  3400               	retlw	0
  1386                           
  1387                           	psect	stringtext4
  1388  04C1                     __pstringtext4:	
  1389  04C1                     STR_1:	
  1390  04C1  344C               	retlw	76	;'L'
  1391  04C2  3445               	retlw	69	;'E'
  1392  04C3  3456               	retlw	86	;'V'
  1393  04C4  3445               	retlw	69	;'E'
  1394  04C5  344C               	retlw	76	;'L'
  1395  04C6  3400               	retlw	0
  1396                           
  1397                           	psect	stringtext5
  1398  0000                     __pstringtext5:	
  1399                           
  1400                           ; #config settings
  1401  0000                     
  1402                           	psect	cinit
  1403  0023                     start_initialization:	
  1404  0023                     __initialization:	
  1405                           
  1406                           ; Initialize objects allocated to BANK0
  1407  0023  30F7               	movlw	low __pidataBANK0
  1408  0024  0084               	movwf	4
  1409  0025  3084               	movlw	(high __pidataBANK0)| (0+128)
  1410  0026  0085               	movwf	5
  1411  0027  3068               	movlw	low __pdataBANK0
  1412  0028  0086               	movwf	6
  1413  0029  3000               	movlw	high __pdataBANK0
  1414  002A  0087               	movwf	7
  1415  002B  3005               	movlw	5
  1416  002C  3184  24C7  3180   	fcall	init_ram
  1417                           
  1418                           ; Initialize objects allocated to BANK1
  1419  002F  3050               	movlw	low __pidataBANK1
  1420  0030  0084               	movwf	4
  1421  0031  3084               	movlw	(high __pidataBANK1)| (0+128)
  1422  0032  0085               	movwf	5
  1423  0033  30A0               	movlw	low __pdataBANK1
  1424  0034  0086               	movwf	6
  1425  0035  3000               	movlw	high __pdataBANK1
  1426  0036  0087               	movwf	7
  1427  0037  3014               	movlw	20
  1428  0038  3184  24C7  3180   	fcall	init_ram
  1429                           
  1430                           ; Clear objects allocated to COMMON
  1431  003B  01F6               	clrf	__pbssCOMMON& (0+127)
  1432  003C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1433  003D  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1434  003E  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1435                           
  1436                           ; Clear objects allocated to BANK0
  1437  003F  3020               	movlw	low __pbssBANK0
  1438  0040  0084               	movwf	4
  1439  0041  3000               	movlw	high __pbssBANK0
  1440  0042  0085               	movwf	5
  1441  0043  3028               	movlw	40
  1442  0044  3184  24CD  3180   	fcall	clear_ram0
  1443                           
  1444                           ; Clear objects allocated to BANK2
  1445  0047  3020               	movlw	low __pbssBANK2
  1446  0048  0084               	movwf	4
  1447  0049  3001               	movlw	high __pbssBANK2
  1448  004A  0085               	movwf	5
  1449  004B  3040               	movlw	64
  1450  004C  3184  24CD  3180   	fcall	clear_ram0
  1451                           
  1452                           ; Clear objects allocated to BANK3
  1453  004F  30A0               	movlw	low __pbssBANK3
  1454  0050  0084               	movwf	4
  1455  0051  3001               	movlw	high __pbssBANK3
  1456  0052  0085               	movwf	5
  1457  0053  3040               	movlw	64
  1458  0054  3184  24CD  3180   	fcall	clear_ram0
  1459                           
  1460                           ; Clear objects allocated to BANK4
  1461  0057  3020               	movlw	low __pbssBANK4
  1462  0058  0084               	movwf	4
  1463  0059  3002               	movlw	high __pbssBANK4
  1464  005A  0085               	movwf	5
  1465  005B  3040               	movlw	64
  1466  005C  3184  24CD         	fcall	clear_ram0
  1467  005E                     end_of_initialization:	
  1468                           ;End of C runtime variable initialization code
  1469                           
  1470  005E                     __end_of__initialization:	
  1471  005E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1472  005F  0020               	movlb	0
  1473  0060  3180  28FD         	ljmp	_main	;jump to C main() function
  1474                           
  1475                           	psect	bssCOMMON
  1476  0076                     __pbssCOMMON:	
  1477  0076                     _eusartRxTail:	
  1478  0076                     	ds	1
  1479  0077                     _eusartRxHead:	
  1480  0077                     	ds	1
  1481  0078                     _eusartTxTail:	
  1482  0078                     	ds	1
  1483  0079                     _eusartTxHead:	
  1484  0079                     	ds	1
  1485                           
  1486                           	psect	bssBANK0
  1487  0020                     __pbssBANK0:	
  1488  0020                     _eusartRxStatusBuffer:	
  1489  0020                     	ds	8
  1490  0028                     _eusartRxBuffer:	
  1491  0028                     	ds	8
  1492  0030                     _eusartTxBuffer:	
  1493  0030                     	ds	8
  1494  0038                     _rxData:	
  1495  0038                     	ds	1
  1496  0039                     _ResponseIndex:	
  1497  0039                     	ds	1
  1498  003A                     _eusartRxLastError:	
  1499  003A                     	ds	1
  1500  003B                     _eusartRxCount:	
  1501  003B                     	ds	1
  1502  003C                     _Storage2:	
  1503  003C                     	ds	9
  1504  0045                     _Num_Char:	
  1505  0045                     	ds	3
  1506                           
  1507                           	psect	dataBANK0
  1508  0068                     __pdataBANK0:	
  1509  0068                     _LVL:	
  1510  0068                     	ds	5
  1511                           
  1512                           	psect	dataBANK1
  1513  00A0                     __pdataBANK1:	
  1514  00A0                     _KEY3:	
  1515  00A0                     	ds	7
  1516  00A7                     _KEY5:	
  1517  00A7                     	ds	7
  1518  00AE                     _RESET:	
  1519  00AE                     	ds	6
  1520                           
  1521                           	psect	bssBANK2
  1522  0120                     __pbssBANK2:	
  1523  0120                     _ResponseBuffer:	
  1524  0120                     	ds	64
  1525                           
  1526                           	psect	bssBANK3
  1527  01A0                     __pbssBANK3:	
  1528  01A0                     _Storage:	
  1529  01A0                     	ds	64
  1530                           
  1531                           	psect	bssBANK4
  1532  0220                     __pbssBANK4:	
  1533  0220                     _ReadStorage:	
  1534  0220                     	ds	64
  1535                           
  1536                           	psect	inittext
  1537  04C7                     init_ram:	
  1538  04C7  00FE               	movwf	126
  1539  04C8                     initloop:	
  1540  04C8  0012               	moviw fsr0++
  1541  04C9  001E               	movwi fsr1++
  1542  04CA  0BFE               	decfsz	126,f
  1543  04CB  2CC8               	goto	initloop
  1544  04CC  3400               	retlw	0
  1545                           
  1546                           	psect	clrtext
  1547  04CD                     clear_ram0:	
  1548                           ;	Called with FSR0 containing the base address, and
  1549                           ;	WREG with the size to clear
  1550                           
  1551  04CD  0064               	clrwdt	;clear the watchdog before getting into this loop
  1552  04CE                     clrloop0:	
  1553  04CE  0180               	clrf	0	;clear RAM location pointed to by FSR
  1554  04CF  3101               	addfsr 0,1
  1555  04D0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1556  04D1  2CCE               	goto	clrloop0	;have we reached the end yet?
  1557  04D2  3400               	retlw	0	;all done for this memory range, return
  1558                           
  1559                           	psect	cstackBANK1
  1560  00B4                     __pcstackBANK1:	
  1561  00B4                     	ds	2
  1562  00B6                     main@s:	
  1563                           
  1564                           ; 1 bytes @ 0x2
  1565  00B6                     	ds	1
  1566  00B7                     main@num:	
  1567                           
  1568                           ; 2 bytes @ 0x3
  1569  00B7                     	ds	2
  1570                           
  1571                           	psect	cstackCOMMON
  1572  0070                     __pcstackCOMMON:	
  1573  0070                     ?_EUSART_Receive_ISR:	
  1574  0070                     ?_EUSART_Transmit_ISR:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ??_EUSART_Transmit_ISR:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0070                     ?_EUSART_DefaultErrorHandler:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ?_EUSART_RxDataHandler:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ??_EUSART_RxDataHandler:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ?_PIN_MANAGER_Initialize:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_OSCILLATOR_Initialize:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_WDT_Initialize:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_INIT_SMART_LIGHT:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ?_ReadyReceiveBuffer:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_GetResponse:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ?_ReceivedMessage:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_EUSART_Initialize:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_EUSART_is_rx_ready:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ??_EUSART_is_rx_ready:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631  0070                     ?_EUSART_Read:	
  1632                           ; 1 bytes @ 0x0
  1633                           
  1634  0070                     ??_EUSART_Read:	
  1635                           ; 1 bytes @ 0x0
  1636                           
  1637  0070                     ?_INTERRUPT_InterruptManager:	
  1638                           ; 1 bytes @ 0x0
  1639                           
  1640  0070                     ?_SYSTEM_Initialize:	
  1641                           ; 1 bytes @ 0x0
  1642                           
  1643  0070                     ?_main:	
  1644                           ; 1 bytes @ 0x0
  1645                           
  1646                           
  1647                           ; 1 bytes @ 0x0
  1648  0070                     	ds	1
  1649  0071                     ??_EUSART_Receive_ISR:	
  1650  0071                     ??_EUSART_DefaultErrorHandler:	
  1651                           ; 1 bytes @ 0x1
  1652                           
  1653  0071                     EUSART_Read@readValue:	
  1654                           ; 1 bytes @ 0x1
  1655                           
  1656                           
  1657                           ; 1 bytes @ 0x1
  1658  0071                     	ds	1
  1659  0072                     ??_ReceivedMessage:	
  1660                           
  1661                           ; 1 bytes @ 0x2
  1662  0072                     	ds	1
  1663  0073                     ReceivedMessage@readByte:	
  1664                           
  1665                           ; 1 bytes @ 0x3
  1666  0073                     	ds	1
  1667  0074                     ?_EUSART_SetRxInterruptHandler:	
  1668  0074                     ?_EUSART_SetTxInterruptHandler:	
  1669                           ; 1 bytes @ 0x4
  1670                           
  1671  0074                     ?_EUSART_SetFramingErrorHandler:	
  1672                           ; 1 bytes @ 0x4
  1673                           
  1674  0074                     ?_EUSART_SetOverrunErrorHandler:	
  1675                           ; 1 bytes @ 0x4
  1676                           
  1677  0074                     ?_EUSART_SetErrorHandler:	
  1678                           ; 1 bytes @ 0x4
  1679                           
  1680  0074                     ??_PIN_MANAGER_Initialize:	
  1681                           ; 1 bytes @ 0x4
  1682                           
  1683  0074                     ??_OSCILLATOR_Initialize:	
  1684                           ; 1 bytes @ 0x4
  1685                           
  1686  0074                     ??_WDT_Initialize:	
  1687                           ; 1 bytes @ 0x4
  1688                           
  1689  0074                     ??_ReadyReceiveBuffer:	
  1690                           ; 1 bytes @ 0x4
  1691                           
  1692  0074                     ?_blockingWait:	
  1693                           ; 1 bytes @ 0x4
  1694                           
  1695  0074                     ??_GetResponse:	
  1696                           ; 1 bytes @ 0x4
  1697                           
  1698  0074                     ??_strcpy:	
  1699                           ; 1 bytes @ 0x4
  1700                           
  1701  0074                     ??_strncmp:	
  1702                           ; 1 bytes @ 0x4
  1703                           
  1704  0074                     ?_strchr:	
  1705                           ; 1 bytes @ 0x4
  1706                           
  1707  0074                     ?_EUSART_Write:	
  1708                           ; 1 bytes @ 0x4
  1709                           
  1710  0074                     ??_INTERRUPT_InterruptManager:	
  1711                           ; 1 bytes @ 0x4
  1712                           
  1713  0074                     ??___wmul:	
  1714                           ; 1 bytes @ 0x4
  1715                           
  1716  0074                     ?_isspace:	
  1717                           ; 1 bytes @ 0x4
  1718                           
  1719  0074                     ?_isdigit:	
  1720                           ; 2 bytes @ 0x4
  1721                           
  1722  0074                     ?_strlen:	
  1723                           ; 2 bytes @ 0x4
  1724                           
  1725  0074                     EUSART_Write@txData:	
  1726                           ; 2 bytes @ 0x4
  1727                           
  1728  0074                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1729                           ; 1 bytes @ 0x4
  1730                           
  1731  0074                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1732                           ; 2 bytes @ 0x4
  1733                           
  1734  0074                     EUSART_SetErrorHandler@interruptHandler:	
  1735                           ; 2 bytes @ 0x4
  1736                           
  1737  0074                     EUSART_SetTxInterruptHandler@interruptHandler:	
  1738                           ; 2 bytes @ 0x4
  1739                           
  1740  0074                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1741                           ; 2 bytes @ 0x4
  1742                           
  1743  0074                     blockingWait@limit:	
  1744                           ; 2 bytes @ 0x4
  1745                           
  1746  0074                     ___wmul@product:	
  1747                           ; 2 bytes @ 0x4
  1748                           
  1749  0074                     isdigit@c:	
  1750                           ; 2 bytes @ 0x4
  1751                           
  1752  0074                     isspace@c:	
  1753                           ; 2 bytes @ 0x4
  1754                           
  1755  0074                     strchr@c:	
  1756                           ; 2 bytes @ 0x4
  1757                           
  1758  0074                     strlen@s:	
  1759                           ; 2 bytes @ 0x4
  1760                           
  1761                           
  1762                           ; 2 bytes @ 0x4
  1763  0074                     	ds	1
  1764  0075                     ??_EUSART_Write:	
  1765  0075                     ReadyReceiveBuffer@position:	
  1766                           ; 1 bytes @ 0x5
  1767                           
  1768                           
  1769                           ; 1 bytes @ 0x5
  1770  0075                     	ds	1
  1771  0076                     ??_EUSART_SetRxInterruptHandler:	
  1772  0076                     ??_EUSART_SetTxInterruptHandler:	
  1773                           ; 1 bytes @ 0x6
  1774                           
  1775  0076                     ??_EUSART_SetFramingErrorHandler:	
  1776                           ; 1 bytes @ 0x6
  1777                           
  1778  0076                     ??_EUSART_SetOverrunErrorHandler:	
  1779                           ; 1 bytes @ 0x6
  1780                           
  1781  0076                     ??_EUSART_SetErrorHandler:	
  1782                           ; 1 bytes @ 0x6
  1783                           
  1784  0076                     ??_INIT_SMART_LIGHT:	
  1785                           ; 1 bytes @ 0x6
  1786                           
  1787  0076                     ??_strchr:	
  1788                           ; 1 bytes @ 0x6
  1789                           
  1790  0076                     ??_SYSTEM_Initialize:	
  1791                           ; 1 bytes @ 0x6
  1792                           
  1793                           
  1794                           	psect	cstackBANK0
  1795  0048                     __pcstackBANK0:	
  1796                           ; 1 bytes @ 0x6
  1797                           
  1798  0048                     ??_blockingWait:	
  1799  0048                     ?_SML_SendString:	
  1800                           ; 1 bytes @ 0x0
  1801                           
  1802  0048                     ??_isspace:	
  1803                           ; 1 bytes @ 0x0
  1804                           
  1805  0048                     ??_isdigit:	
  1806                           ; 1 bytes @ 0x0
  1807                           
  1808  0048                     ??_strlen:	
  1809                           ; 1 bytes @ 0x0
  1810                           
  1811  0048                     ??_EUSART_Initialize:	
  1812                           ; 1 bytes @ 0x0
  1813                           
  1814  0048                     ?_SendString:	
  1815                           ; 1 bytes @ 0x0
  1816                           
  1817  0048                     ?_strcpy:	
  1818                           ; 1 bytes @ 0x0
  1819                           
  1820  0048                     ?_strncmp:	
  1821                           ; 2 bytes @ 0x0
  1822                           
  1823  0048                     ?___wmul:	
  1824                           ; 2 bytes @ 0x0
  1825                           
  1826  0048                     strchr@s:	
  1827                           ; 2 bytes @ 0x0
  1828                           
  1829  0048                     SendString@command:	
  1830                           ; 1 bytes @ 0x0
  1831                           
  1832  0048                     SML_SendString@len:	
  1833                           ; 2 bytes @ 0x0
  1834                           
  1835  0048                     ___wmul@multiplier:	
  1836                           ; 2 bytes @ 0x0
  1837                           
  1838  0048                     strcpy@dest:	
  1839                           ; 2 bytes @ 0x0
  1840                           
  1841  0048                     strncmp@_r:	
  1842                           ; 2 bytes @ 0x0
  1843                           
  1844                           
  1845                           ; 2 bytes @ 0x0
  1846  0048                     	ds	1
  1847  0049                     blockingWait@counter:	
  1848  0049                     strlen@a:	
  1849                           ; 2 bytes @ 0x1
  1850                           
  1851                           
  1852                           ; 2 bytes @ 0x1
  1853  0049                     	ds	1
  1854  004A                     ??_SML_SendString:	
  1855  004A                     ??_SendString:	
  1856                           ; 1 bytes @ 0x2
  1857                           
  1858  004A                     _isspace$944:	
  1859                           ; 1 bytes @ 0x2
  1860                           
  1861  004A                     strcpy@src:	
  1862                           ; 1 bytes @ 0x2
  1863                           
  1864  004A                     ___wmul@multiplicand:	
  1865                           ; 1 bytes @ 0x2
  1866                           
  1867  004A                     strncmp@n:	
  1868                           ; 2 bytes @ 0x2
  1869                           
  1870                           
  1871                           ; 2 bytes @ 0x2
  1872  004A                     	ds	1
  1873  004B                     SML_SendString@command:	
  1874  004B                     strcpy@d:	
  1875                           ; 1 bytes @ 0x3
  1876                           
  1877                           
  1878                           ; 2 bytes @ 0x3
  1879  004B                     	ds	1
  1880  004C                     ?_atoi:	
  1881  004C                     strncmp@_l:	
  1882                           ; 2 bytes @ 0x4
  1883                           
  1884                           
  1885                           ; 1 bytes @ 0x4
  1886  004C                     	ds	1
  1887  004D                     strcpy@s:	
  1888  004D                     strncmp@r:	
  1889                           ; 1 bytes @ 0x5
  1890                           
  1891                           
  1892                           ; 2 bytes @ 0x5
  1893  004D                     	ds	1
  1894  004E                     ??_atoi:	
  1895                           
  1896                           ; 1 bytes @ 0x6
  1897  004E                     	ds	1
  1898  004F                     strncmp@l:	
  1899                           
  1900                           ; 1 bytes @ 0x7
  1901  004F                     	ds	1
  1902  0050                     ?_strstr:	
  1903  0050                     strstr@n:	
  1904                           ; 1 bytes @ 0x8
  1905                           
  1906                           
  1907                           ; 2 bytes @ 0x8
  1908  0050                     	ds	2
  1909  0052                     ??_strstr:	
  1910  0052                     atoi@neg:	
  1911                           ; 1 bytes @ 0xA
  1912                           
  1913                           
  1914                           ; 2 bytes @ 0xA
  1915  0052                     	ds	2
  1916  0054                     _atoi$926:	
  1917                           
  1918                           ; 2 bytes @ 0xC
  1919  0054                     	ds	1
  1920  0055                     strstr@nl:	
  1921                           
  1922                           ; 2 bytes @ 0xD
  1923  0055                     	ds	1
  1924  0056                     _atoi$928:	
  1925                           
  1926                           ; 2 bytes @ 0xE
  1927  0056                     	ds	1
  1928  0057                     strstr@h:	
  1929                           
  1930                           ; 1 bytes @ 0xF
  1931  0057                     	ds	1
  1932  0058                     _atoi$927:	
  1933                           
  1934                           ; 1 bytes @ 0x10
  1935  0058                     	ds	1
  1936  0059                     atoi@n:	
  1937                           
  1938                           ; 2 bytes @ 0x11
  1939  0059                     	ds	2
  1940  005B                     atoi@s:	
  1941                           
  1942                           ; 1 bytes @ 0x13
  1943  005B                     	ds	1
  1944  005C                     ??_main:	
  1945                           
  1946                           ; 1 bytes @ 0x14
  1947  005C                     	ds	1
  1948                           
  1949                           	psect	maintext
  1950  00FD                     __pmaintext:	
  1951 ;;
  1952 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1953 ;;
  1954 ;; *************** function _main *****************
  1955 ;; Defined at:
  1956 ;;		line 19 in file "main.c"
  1957 ;; Parameters:    Size  Location     Type
  1958 ;;		None
  1959 ;; Auto vars:     Size  Location     Type
  1960 ;;  num             2    3[BANK1 ] int 
  1961 ;;  s               1    2[BANK1 ] PTR unsigned char 
  1962 ;;		 -> NULL(0), Storage(64), 
  1963 ;;  test            2    0        int 
  1964 ;; Return value:  Size  Location     Type
  1965 ;;                  1    wreg      void 
  1966 ;; Registers used:
  1967 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : B1F/0
  1970 ;;		On exit  : 0/0
  1971 ;;		Unchanged: 0/0
  1972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1973 ;;      Params:         0       0       0       0       0       0       0       0
  1974 ;;      Locals:         0       0       5       0       0       0       0       0
  1975 ;;      Temps:          0       1       0       0       0       0       0       0
  1976 ;;      Totals:         0       1       5       0       0       0       0       0
  1977 ;;Total ram usage:        6 bytes
  1978 ;; Hardware stack levels required when called:    8
  1979 ;; This function calls:
  1980 ;;		_GetResponse
  1981 ;;		_INIT_SMART_LIGHT
  1982 ;;		_ReadyReceiveBuffer
  1983 ;;		_SML_SendString
  1984 ;;		_SYSTEM_Initialize
  1985 ;;		_atoi
  1986 ;;		_blockingWait
  1987 ;;		_strcpy
  1988 ;;		_strstr
  1989 ;; This function is called by:
  1990 ;;		Startup code after reset
  1991 ;; This function uses a non-reentrant model
  1992 ;;
  1993                           
  1994                           
  1995                           ;psect for function _main
  1996  00FD                     _main:	
  1997                           
  1998                           ;main.c: 21:     SYSTEM_Initialize();
  1999                           
  2000                           ;incstack = 0
  2001                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2002  00FD  3184  24AD  3180   	fcall	_SYSTEM_Initialize
  2003                           
  2004                           ;main.c: 22:     (INTCONbits.GIE = 1);
  2005  0100  178B               	bsf	11,7	;volatile
  2006                           
  2007                           ;main.c: 23:     (INTCONbits.PEIE = 1);
  2008  0101  170B               	bsf	11,6	;volatile
  2009                           
  2010                           ;main.c: 24:     INIT_SMART_LIGHT ();
  2011  0102  3183  234B  3180   	fcall	_INIT_SMART_LIGHT
  2012  0105                     L1:	
  2013                           
  2014                           ;main.c: 25:     ReadyReceiveBuffer();
  2015  0105  3184  248A  3180   	fcall	_ReadyReceiveBuffer
  2016  0108                     l2110:	
  2017                           
  2018                           ;main.c: 28:     {;main.c: 29:         if(ResponseIndex != 0)
  2019  0108  0020               	movlb	0	; select bank0
  2020  0109  0839               	movf	_ResponseIndex,w
  2021  010A  1903               	btfsc	3,2
  2022  010B  2908               	goto	l2110
  2023                           
  2024                           ;main.c: 30:         {;main.c: 31:             blockingWait(2);
  2025  010C  3002               	movlw	2
  2026  010D  00F4               	movwf	blockingWait@limit
  2027  010E  3000               	movlw	0
  2028  010F  00F5               	movwf	blockingWait@limit+1
  2029  0110  3183  23BE  3180   	fcall	_blockingWait
  2030                           
  2031                           ;main.c: 32:             rxData = GetResponse();
  2032  0113  3185  2507  3180   	fcall	_GetResponse
  2033  0116  0020               	movlb	0	; select bank0
  2034  0117  00DC               	movwf	??_main
  2035  0118  085C               	movf	??_main,w
  2036  0119  00B8               	movwf	_rxData
  2037                           
  2038                           ;main.c: 35:             strcpy(Storage, rxData);
  2039  011A  30A0               	movlw	low _Storage
  2040  011B  00C8               	movwf	strcpy@dest
  2041  011C  3001               	movlw	high _Storage
  2042  011D  00C9               	movwf	strcpy@dest+1
  2043  011E  0838               	movf	_rxData,w
  2044  011F  00DC               	movwf	??_main
  2045  0120  085C               	movf	??_main,w
  2046  0121  00CA               	movwf	strcpy@src
  2047  0122  3183  230F  3180   	fcall	_strcpy
  2048                           
  2049                           ;main.c: 37:             char *s;;main.c: 38:             s = strstr(Storage,"LEVEL");
  2050  0125  30C1               	movlw	low (STR_1| (0+32768))
  2051  0126  0020               	movlb	0	; select bank0
  2052  0127  00D0               	movwf	strstr@n
  2053  0128  3084               	movlw	high (STR_1| (0+32768))
  2054  0129  00D1               	movwf	strstr@n+1
  2055  012A  30A0               	movlw	(low (_Storage| (0+256)))& (0+255)
  2056  012B  3181  21BB  3180   	fcall	_strstr
  2057  012E  0020               	movlb	0	; select bank0
  2058  012F  00DC               	movwf	??_main
  2059  0130  085C               	movf	??_main,w
  2060  0131  0021               	movlb	1	; select bank1
  2061  0132  00B6               	movwf	main@s^(0+128)
  2062                           
  2063                           ;main.c: 39:             strcpy(Storage2, s);
  2064  0133  303C               	movlw	low _Storage2
  2065  0134  0020               	movlb	0	; select bank0
  2066  0135  00C8               	movwf	strcpy@dest
  2067  0136  3000               	movlw	high _Storage2
  2068  0137  00C9               	movwf	strcpy@dest+1
  2069  0138  0021               	movlb	1	; select bank1
  2070  0139  0836               	movf	main@s^(0+128),w
  2071  013A  0020               	movlb	0	; select bank0
  2072  013B  00DC               	movwf	??_main
  2073  013C  085C               	movf	??_main,w
  2074  013D  00CA               	movwf	strcpy@src
  2075  013E  3183  230F  3180   	fcall	_strcpy
  2076                           
  2077                           ;main.c: 41:             Num_Char[0] = Storage2[7];
  2078  0141  0020               	movlb	0	; select bank0
  2079  0142  0843               	movf	_Storage2+7,w
  2080  0143  00DC               	movwf	??_main
  2081  0144  085C               	movf	??_main,w
  2082  0145  00C5               	movwf	_Num_Char
  2083                           
  2084                           ;main.c: 42:             Num_Char[1] = Storage2[8];
  2085  0146  0844               	movf	_Storage2+8,w
  2086  0147  00DC               	movwf	??_main
  2087  0148  085C               	movf	??_main,w
  2088  0149  00C6               	movwf	_Num_Char+1
  2089                           
  2090                           ;main.c: 43:             Num_Char[2] = Storage2[9];
  2091  014A  0845               	movf	_Storage2+9,w
  2092  014B  00DC               	movwf	??_main
  2093  014C  085C               	movf	??_main,w
  2094  014D  00C7               	movwf	_Num_Char+2
  2095                           
  2096                           ;main.c: 45:             num = atoi(Num_Char);
  2097  014E  3045               	movlw	(low (_Num_Char| 0))& (0+255)
  2098  014F  3180  2062  3180   	fcall	_atoi
  2099  0152  0020               	movlb	0	; select bank0
  2100  0153  084D               	movf	?_atoi+1,w
  2101  0154  0021               	movlb	1	; select bank1
  2102  0155  00B8               	movwf	(main@num+1)^(0+128)
  2103  0156  0020               	movlb	0	; select bank0
  2104  0157  084C               	movf	?_atoi,w
  2105  0158  0021               	movlb	1	; select bank1
  2106  0159  00B7               	movwf	main@num^(0+128)
  2107                           
  2108                           ;main.c: 46:             if(num == 100)
  2109  015A  3064               	movlw	100
  2110  015B  0637               	xorwf	main@num^(0+128),w
  2111  015C  0438               	iorwf	(main@num+1)^(0+128),w
  2112  015D  1D03               	btfss	3,2
  2113  015E  2905               	goto	L1
  2114                           
  2115                           ;main.c: 47:             {;main.c: 48:                 SML_SendString(Storage2,9);
  2116  015F  3009               	movlw	9
  2117  0160  0020               	movlb	0	; select bank0
  2118  0161  00C8               	movwf	SML_SendString@len
  2119  0162  3000               	movlw	0
  2120  0163  00C9               	movwf	SML_SendString@len+1
  2121  0164  303C               	movlw	(low (_Storage2| 0))& (0+255)
  2122  0165  3182  22EE  3180   	fcall	_SML_SendString
  2123  0168  2905               	goto	L1
  2124  0169                     __end_of_main:	
  2125                           ;main.c: 51:             ReadyReceiveBuffer();
  2126                           
  2127                           
  2128                           	psect	text1
  2129  01BB                     __ptext1:	
  2130 ;; *************** function _strstr *****************
  2131 ;; Defined at:
  2132 ;;		line 143 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strstr.c"
  2133 ;; Parameters:    Size  Location     Type
  2134 ;;  h               1    wreg     PTR const unsigned char 
  2135 ;;		 -> NULL(0), Storage(64), 
  2136 ;;  n               2    8[BANK0 ] PTR const unsigned char 
  2137 ;;		 -> STR_1(6), 
  2138 ;; Auto vars:     Size  Location     Type
  2139 ;;  h               1   15[BANK0 ] PTR const unsigned char 
  2140 ;;		 -> NULL(0), Storage(64), 
  2141 ;;  nl              2   13[BANK0 ] unsigned int 
  2142 ;; Return value:  Size  Location     Type
  2143 ;;                  1    wreg      PTR unsigned char 
  2144 ;; Registers used:
  2145 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2146 ;; Tracked objects:
  2147 ;;		On entry : 0/0
  2148 ;;		On exit  : 0/0
  2149 ;;		Unchanged: 0/0
  2150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2151 ;;      Params:         0       2       0       0       0       0       0       0
  2152 ;;      Locals:         0       3       0       0       0       0       0       0
  2153 ;;      Temps:          0       3       0       0       0       0       0       0
  2154 ;;      Totals:         0       8       0       0       0       0       0       0
  2155 ;;Total ram usage:        8 bytes
  2156 ;; Hardware stack levels used:    1
  2157 ;; Hardware stack levels required when called:    6
  2158 ;; This function calls:
  2159 ;;		_strchr
  2160 ;;		_strlen
  2161 ;;		_strncmp
  2162 ;; This function is called by:
  2163 ;;		_main
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           
  2168                           ;psect for function _strstr
  2169  01BB                     _strstr:	
  2170                           
  2171                           ;incstack = 0
  2172                           ; Regs used in _strstr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2173                           ;strstr@h stored from wreg
  2174  01BB  0020               	movlb	0	; select bank0
  2175  01BC  00D7               	movwf	strstr@h
  2176  01BD  0850               	movf	strstr@n,w
  2177  01BE  0451               	iorwf	strstr@n+1,w
  2178  01BF  1903               	btfsc	3,2
  2179  01C0  29FF               	goto	l2040
  2180  01C1  0851               	movf	strstr@n+1,w
  2181  01C2  00F5               	movwf	strlen@s+1
  2182  01C3  0850               	movf	strstr@n,w
  2183  01C4  00F4               	movwf	strlen@s
  2184  01C5  3183  23F2  3181   	fcall	_strlen
  2185  01C8  0875               	movf	?_strlen+1,w
  2186  01C9  0020               	movlb	0	; select bank0
  2187  01CA  00D6               	movwf	strstr@nl+1
  2188  01CB  0874               	movf	?_strlen,w
  2189  01CC  00D5               	movwf	strstr@nl
  2190  01CD  29F5               	goto	l2036
  2191  01CE                     l2028:	
  2192  01CE  0851               	movf	strstr@n+1,w
  2193  01CF  00C9               	movwf	strncmp@_r+1
  2194  01D0  0850               	movf	strstr@n,w
  2195  01D1  00C8               	movwf	strncmp@_r
  2196  01D2  0856               	movf	strstr@nl+1,w
  2197  01D3  00CB               	movwf	strncmp@n+1
  2198  01D4  0855               	movf	strstr@nl,w
  2199  01D5  00CA               	movwf	strncmp@n
  2200  01D6  0857               	movf	strstr@h,w
  2201  01D7  3181  2169  3181   	fcall	_strncmp
  2202  01DA  0020               	movlb	0	; select bank0
  2203  01DB  0848               	movf	?_strncmp,w
  2204  01DC  0449               	iorwf	?_strncmp+1,w
  2205  01DD  1D03               	btfss	3,2
  2206  01DE  29E1               	goto	l2034
  2207  01DF  0857               	movf	strstr@h,w
  2208  01E0  0008               	return
  2209  01E1                     l2034:	
  2210  01E1  0850               	movf	strstr@n,w
  2211  01E2  0084               	movwf	4
  2212  01E3  0851               	movf	strstr@n+1,w
  2213  01E4  0085               	movwf	5
  2214  01E5  0800               	movf	0,w	;code access
  2215  01E6  00D2               	movwf	??_strstr
  2216  01E7  01D3               	clrf	??_strstr+1
  2217  01E8  0852               	movf	??_strstr,w
  2218  01E9  00F4               	movwf	strchr@c
  2219  01EA  0853               	movf	??_strstr+1,w
  2220  01EB  00F5               	movwf	strchr@c+1
  2221  01EC  0857               	movf	strstr@h,w
  2222  01ED  3E01               	addlw	1
  2223  01EE  3184  243A  3181   	fcall	_strchr
  2224  01F1  0020               	movlb	0	; select bank0
  2225  01F2  00D4               	movwf	??_strstr+2
  2226  01F3  0854               	movf	??_strstr+2,w
  2227  01F4  00D7               	movwf	strstr@h
  2228  01F5                     l2036:	
  2229  01F5  0857               	movf	strstr@h,w
  2230  01F6  1903               	btfsc	3,2
  2231  01F7  29FF               	goto	l2040
  2232  01F8  0857               	movf	strstr@h,w
  2233  01F9  0086               	movwf	6
  2234  01FA  3001               	movlw	1	; select bank2/3
  2235  01FB  0087               	movwf	7
  2236  01FC  0801               	movf	1,w
  2237  01FD  1D03               	btfss	3,2
  2238  01FE  29CE               	goto	l2028
  2239  01FF                     l2040:	
  2240  01FF  3000               	movlw	0
  2241  0200  0008               	return
  2242  0201                     __end_of_strstr:	
  2243                           
  2244                           	psect	text2
  2245  0169                     __ptext2:	
  2246 ;; *************** function _strncmp *****************
  2247 ;; Defined at:
  2248 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strncmp.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;  _l              1    wreg     PTR const unsigned char 
  2251 ;;		 -> NULL(0), Storage(64), 
  2252 ;;  _r              2    0[BANK0 ] PTR const unsigned char 
  2253 ;;		 -> STR_1(6), 
  2254 ;;  n               2    2[BANK0 ] unsigned int 
  2255 ;; Auto vars:     Size  Location     Type
  2256 ;;  _l              1    4[BANK0 ] PTR const unsigned char 
  2257 ;;		 -> NULL(0), Storage(64), 
  2258 ;;  r               2    5[BANK0 ] PTR const unsigned char 
  2259 ;;		 -> STR_1(6), 
  2260 ;;  l               1    7[BANK0 ] PTR const unsigned char 
  2261 ;;		 -> NULL(0), Storage(64), 
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  2    0[BANK0 ] int 
  2264 ;; Registers used:
  2265 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2271 ;;      Params:         0       4       0       0       0       0       0       0
  2272 ;;      Locals:         0       4       0       0       0       0       0       0
  2273 ;;      Temps:          1       0       0       0       0       0       0       0
  2274 ;;      Totals:         1       8       0       0       0       0       0       0
  2275 ;;Total ram usage:        9 bytes
  2276 ;; Hardware stack levels used:    1
  2277 ;; Hardware stack levels required when called:    5
  2278 ;; This function calls:
  2279 ;;		Nothing
  2280 ;; This function is called by:
  2281 ;;		_strstr
  2282 ;; This function uses a non-reentrant model
  2283 ;;
  2284                           
  2285                           
  2286                           ;psect for function _strncmp
  2287  0169                     _strncmp:	
  2288                           
  2289                           ;incstack = 0
  2290                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  2291                           ;strncmp@_l stored from wreg
  2292  0169  0020               	movlb	0	; select bank0
  2293  016A  00CC               	movwf	strncmp@_l
  2294  016B  084C               	movf	strncmp@_l,w
  2295  016C  00F4               	movwf	??_strncmp
  2296  016D  0874               	movf	??_strncmp,w
  2297  016E  00CF               	movwf	strncmp@l
  2298  016F  0849               	movf	strncmp@_r+1,w
  2299  0170  00CE               	movwf	strncmp@r+1
  2300  0171  0848               	movf	strncmp@_r,w
  2301  0172  00CD               	movwf	strncmp@r
  2302  0173  3001               	movlw	1
  2303  0174  02CA               	subwf	strncmp@n,f
  2304  0175  3000               	movlw	0
  2305  0176  3BCB               	subwfb	strncmp@n+1,f
  2306  0177  0A4A               	incf	strncmp@n,w
  2307  0178  1D03               	skipz
  2308  0179  29A5               	goto	l1968
  2309  017A  0A4B               	incf	strncmp@n+1,w
  2310  017B  1D03               	btfss	3,2
  2311  017C  29A5               	goto	l1968
  2312  017D  01C8               	clrf	?_strncmp
  2313  017E  01C9               	clrf	?_strncmp+1
  2314  017F  0008               	return
  2315  0180                     l1970:	
  2316  0180  084D               	movf	strncmp@r,w
  2317  0181  0084               	movwf	4
  2318  0182  084E               	movf	strncmp@r+1,w
  2319  0183  0085               	movwf	5
  2320  0184  0012               	moviw fsr0++
  2321  0185  1903               	btfsc	3,2
  2322  0186  29AC               	goto	l1976
  2323  0187  084A               	movf	strncmp@n,w
  2324  0188  044B               	iorwf	strncmp@n+1,w
  2325  0189  1903               	btfsc	3,2
  2326  018A  29AC               	goto	l1976
  2327  018B  084D               	movf	strncmp@r,w
  2328  018C  0084               	movwf	4
  2329  018D  084E               	movf	strncmp@r+1,w
  2330  018E  0085               	movwf	5
  2331  018F  0800               	movf	0,w	;code access
  2332  0190  00F4               	movwf	??_strncmp
  2333  0191  084F               	movf	strncmp@l,w
  2334  0192  0086               	movwf	6
  2335  0193  3001               	movlw	1	; select bank2/3
  2336  0194  0087               	movwf	7
  2337  0195  0801               	movf	1,w
  2338  0196  0674               	xorwf	??_strncmp,w
  2339  0197  1D03               	btfss	3,2
  2340  0198  29AC               	goto	l1976
  2341  0199  3001               	movlw	1
  2342  019A  00F4               	movwf	??_strncmp
  2343  019B  0874               	movf	??_strncmp,w
  2344  019C  07CF               	addwf	strncmp@l,f
  2345  019D  3001               	movlw	1
  2346  019E  07CD               	addwf	strncmp@r,f
  2347  019F  3000               	movlw	0
  2348  01A0  3DCE               	addwfc	strncmp@r+1,f
  2349  01A1  3001               	movlw	1
  2350  01A2  02CA               	subwf	strncmp@n,f
  2351  01A3  3000               	movlw	0
  2352  01A4  3BCB               	subwfb	strncmp@n+1,f
  2353  01A5                     l1968:	
  2354  01A5  084F               	movf	strncmp@l,w
  2355  01A6  0086               	movwf	6
  2356  01A7  3001               	movlw	1	; select bank2/3
  2357  01A8  0087               	movwf	7
  2358  01A9  0801               	movf	1,w
  2359  01AA  1D03               	btfss	3,2
  2360  01AB  2980               	goto	l1970
  2361  01AC                     l1976:	
  2362  01AC  084F               	movf	strncmp@l,w
  2363  01AD  0086               	movwf	6
  2364  01AE  3001               	movlw	1	; select bank2/3
  2365  01AF  0087               	movwf	7
  2366  01B0  084D               	movf	strncmp@r,w
  2367  01B1  0084               	movwf	4
  2368  01B2  084E               	movf	strncmp@r+1,w
  2369  01B3  0085               	movwf	5
  2370  01B4  0800               	movf	0,w	;code access
  2371  01B5  0201               	subwf	1,w
  2372  01B6  00C8               	movwf	?_strncmp
  2373  01B7  01C9               	clrf	?_strncmp+1
  2374  01B8  1C03               	skipc
  2375  01B9  03C9               	decf	?_strncmp+1,f
  2376  01BA  0008               	return
  2377  01BB                     __end_of_strncmp:	
  2378                           
  2379                           	psect	text3
  2380  03F2                     __ptext3:	
  2381 ;; *************** function _strlen *****************
  2382 ;; Defined at:
  2383 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  2384 ;; Parameters:    Size  Location     Type
  2385 ;;  s               2    4[COMMON] PTR const unsigned char 
  2386 ;;		 -> STR_1(6), 
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;  a               2    1[BANK0 ] PTR const unsigned char 
  2389 ;;		 -> STR_1(6), 
  2390 ;; Return value:  Size  Location     Type
  2391 ;;                  2    4[COMMON] unsigned int 
  2392 ;; Registers used:
  2393 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2394 ;; Tracked objects:
  2395 ;;		On entry : 0/0
  2396 ;;		On exit  : 0/0
  2397 ;;		Unchanged: 0/0
  2398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2399 ;;      Params:         2       0       0       0       0       0       0       0
  2400 ;;      Locals:         0       2       0       0       0       0       0       0
  2401 ;;      Temps:          0       1       0       0       0       0       0       0
  2402 ;;      Totals:         2       3       0       0       0       0       0       0
  2403 ;;Total ram usage:        5 bytes
  2404 ;; Hardware stack levels used:    1
  2405 ;; Hardware stack levels required when called:    5
  2406 ;; This function calls:
  2407 ;;		Nothing
  2408 ;; This function is called by:
  2409 ;;		_strstr
  2410 ;; This function uses a non-reentrant model
  2411 ;;
  2412                           
  2413                           
  2414                           ;psect for function _strlen
  2415  03F2                     _strlen:	
  2416                           
  2417                           ;incstack = 0
  2418                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  2419  03F2  0875               	movf	strlen@s+1,w
  2420  03F3  0020               	movlb	0	; select bank0
  2421  03F4  00CA               	movwf	strlen@a+1
  2422  03F5  0874               	movf	strlen@s,w
  2423  03F6  00C9               	movwf	strlen@a
  2424  03F7                     l1948:	
  2425  03F7  0874               	movf	strlen@s,w
  2426  03F8  0084               	movwf	4
  2427  03F9  0875               	movf	strlen@s+1,w
  2428  03FA  0085               	movwf	5
  2429  03FB  0012               	moviw fsr0++
  2430  03FC  1903               	btfsc	3,2
  2431  03FD  2C03               	goto	l1950
  2432  03FE  3001               	movlw	1
  2433  03FF  07F4               	addwf	strlen@s,f
  2434  0400  3000               	movlw	0
  2435  0401  3DF5               	addwfc	strlen@s+1,f
  2436  0402  2BF7               	goto	l1948
  2437  0403                     l1950:	
  2438  0403  0020               	movlb	0	; select bank0
  2439  0404  0849               	movf	strlen@a,w
  2440  0405  0274               	subwf	strlen@s,w
  2441  0406  00F4               	movwf	?_strlen
  2442  0407  084A               	movf	strlen@a+1,w
  2443  0408  3B75               	subwfb	strlen@s+1,w
  2444  0409  00F5               	movwf	?_strlen+1
  2445  040A  0008               	return
  2446  040B                     __end_of_strlen:	
  2447                           
  2448                           	psect	text4
  2449  043A                     __ptext4:	
  2450 ;; *************** function _strchr *****************
  2451 ;; Defined at:
  2452 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strchr.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;  s               1    wreg     PTR const unsigned char 
  2455 ;;		 -> NULL(0), Storage(64), 
  2456 ;;  c               2    4[COMMON] int 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;  s               1    0[BANK0 ] PTR const unsigned char 
  2459 ;;		 -> NULL(0), Storage(64), 
  2460 ;; Return value:  Size  Location     Type
  2461 ;;                  1    wreg      PTR unsigned char 
  2462 ;; Registers used:
  2463 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2464 ;; Tracked objects:
  2465 ;;		On entry : 0/0
  2466 ;;		On exit  : 0/0
  2467 ;;		Unchanged: 0/0
  2468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2469 ;;      Params:         2       0       0       0       0       0       0       0
  2470 ;;      Locals:         0       1       0       0       0       0       0       0
  2471 ;;      Temps:          0       0       0       0       0       0       0       0
  2472 ;;      Totals:         2       1       0       0       0       0       0       0
  2473 ;;Total ram usage:        3 bytes
  2474 ;; Hardware stack levels used:    1
  2475 ;; Hardware stack levels required when called:    5
  2476 ;; This function calls:
  2477 ;;		Nothing
  2478 ;; This function is called by:
  2479 ;;		_strstr
  2480 ;; This function uses a non-reentrant model
  2481 ;;
  2482                           
  2483                           
  2484                           ;psect for function _strchr
  2485  043A                     _strchr:	
  2486                           
  2487                           ;incstack = 0
  2488                           ; Regs used in _strchr: [wreg+fsr1l+fsr1h+status,2+status,0]
  2489                           ;strchr@s stored from wreg
  2490  043A  0020               	movlb	0	; select bank0
  2491  043B  00C8               	movwf	strchr@s
  2492  043C                     l936:	
  2493  043C  0848               	movf	strchr@s,w
  2494  043D  0086               	movwf	6
  2495  043E  3001               	movlw	1	; select bank2/3
  2496  043F  0087               	movwf	7
  2497  0440  0801               	movf	1,w
  2498  0441  0674               	xorwf	strchr@c,w
  2499  0442  1D03               	skipz
  2500  0443  2C46               	goto	l1986
  2501  0444  0848               	movf	strchr@s,w
  2502  0445  0008               	return
  2503  0446                     l1986:	
  2504  0446  0848               	movf	strchr@s,w
  2505  0447  0086               	movwf	6
  2506  0448  3001               	movlw	1	; select bank2/3
  2507  0449  0087               	movwf	7
  2508  044A  0AC8               	incf	strchr@s,f
  2509  044B  0801               	movf	1,w
  2510  044C  1D03               	btfss	3,2
  2511  044D  2C3C               	goto	l936
  2512  044E  3000               	movlw	0
  2513  044F  0008               	return
  2514  0450                     __end_of_strchr:	
  2515                           
  2516                           	psect	text5
  2517  030F                     __ptext5:	
  2518 ;; *************** function _strcpy *****************
  2519 ;; Defined at:
  2520 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strcpy.c"
  2521 ;; Parameters:    Size  Location     Type
  2522 ;;  dest            2    0[BANK0 ] PTR unsigned char 
  2523 ;;		 -> Storage2(9), Storage(64), 
  2524 ;;  src             1    2[BANK0 ] PTR const unsigned char 
  2525 ;;		 -> NULL(0), ResponseBuffer(64), Storage(64), 
  2526 ;; Auto vars:     Size  Location     Type
  2527 ;;  d               2    3[BANK0 ] PTR unsigned char 
  2528 ;;		 -> Storage2(9), Storage(64), 
  2529 ;;  s               1    5[BANK0 ] PTR const unsigned char 
  2530 ;;		 -> NULL(0), ResponseBuffer(64), Storage(64), 
  2531 ;; Return value:  Size  Location     Type
  2532 ;;                  2    0[BANK0 ] PTR unsigned char 
  2533 ;; Registers used:
  2534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2535 ;; Tracked objects:
  2536 ;;		On entry : 0/0
  2537 ;;		On exit  : 0/0
  2538 ;;		Unchanged: 0/0
  2539 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2540 ;;      Params:         0       3       0       0       0       0       0       0
  2541 ;;      Locals:         0       3       0       0       0       0       0       0
  2542 ;;      Temps:          2       0       0       0       0       0       0       0
  2543 ;;      Totals:         2       6       0       0       0       0       0       0
  2544 ;;Total ram usage:        8 bytes
  2545 ;; Hardware stack levels used:    1
  2546 ;; Hardware stack levels required when called:    5
  2547 ;; This function calls:
  2548 ;;		Nothing
  2549 ;; This function is called by:
  2550 ;;		_main
  2551 ;; This function uses a non-reentrant model
  2552 ;;
  2553                           
  2554                           
  2555                           ;psect for function _strcpy
  2556  030F                     _strcpy:	
  2557                           
  2558                           ;incstack = 0
  2559                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  2560  030F  0020               	movlb	0	; select bank0
  2561  0310  084A               	movf	strcpy@src,w
  2562  0311  00F4               	movwf	??_strcpy
  2563  0312  0874               	movf	??_strcpy,w
  2564  0313  00CD               	movwf	strcpy@s
  2565  0314  0849               	movf	strcpy@dest+1,w
  2566  0315  00CC               	movwf	strcpy@d+1
  2567  0316  0848               	movf	strcpy@dest,w
  2568  0317  00CB               	movwf	strcpy@d
  2569  0318                     l2022:	
  2570  0318  084C               	movf	strcpy@d+1,w
  2571  0319  00F5               	movwf	??_strcpy+1
  2572  031A  084B               	movf	strcpy@d,w
  2573  031B  00F4               	movwf	??_strcpy
  2574  031C  0ACB               	incf	strcpy@d,f
  2575  031D  1903               	skipnz
  2576  031E  0ACC               	incf	strcpy@d+1,f
  2577  031F  0874               	movf	??_strcpy,w
  2578  0320  0086               	movwf	6
  2579  0321  0875               	movf	??_strcpy+1,w
  2580  0322  0087               	movwf	7
  2581  0323  084D               	movf	strcpy@s,w
  2582  0324  0084               	movwf	4
  2583  0325  3001               	movlw	1	; select bank2/3
  2584  0326  0085               	movwf	5
  2585  0327  0ACD               	incf	strcpy@s,f
  2586  0328  0800               	movf	0,w
  2587  0329  3FC0               	movwi [0]fsr1
  2588  032A  0889               	movf	9,f
  2589  032B  1903               	btfsc	3,2
  2590  032C  0008               	return
  2591  032D  2B18               	goto	l2022
  2592  032E                     __end_of_strcpy:	
  2593                           
  2594                           	psect	text6
  2595  03BE                     __ptext6:	
  2596 ;; *************** function _blockingWait *****************
  2597 ;; Defined at:
  2598 ;;		line 51 in file "uart.c"
  2599 ;; Parameters:    Size  Location     Type
  2600 ;;  limit           2    4[COMMON] unsigned short 
  2601 ;; Auto vars:     Size  Location     Type
  2602 ;;  counter         2    1[BANK0 ] unsigned short 
  2603 ;; Return value:  Size  Location     Type
  2604 ;;                  1    wreg      void 
  2605 ;; Registers used:
  2606 ;;		wreg, status,2
  2607 ;; Tracked objects:
  2608 ;;		On entry : 0/0
  2609 ;;		On exit  : 0/0
  2610 ;;		Unchanged: 0/0
  2611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2612 ;;      Params:         2       0       0       0       0       0       0       0
  2613 ;;      Locals:         0       2       0       0       0       0       0       0
  2614 ;;      Temps:          0       1       0       0       0       0       0       0
  2615 ;;      Totals:         2       3       0       0       0       0       0       0
  2616 ;;Total ram usage:        5 bytes
  2617 ;; Hardware stack levels used:    1
  2618 ;; Hardware stack levels required when called:    5
  2619 ;; This function calls:
  2620 ;;		Nothing
  2621 ;; This function is called by:
  2622 ;;		_main
  2623 ;; This function uses a non-reentrant model
  2624 ;;
  2625                           
  2626                           
  2627                           ;psect for function _blockingWait
  2628  03BE                     _blockingWait:	
  2629                           
  2630                           ;uart.c: 51: void blockingWait (uint16_t limit);uart.c: 52: {;uart.c: 53:     for (uint1
      +                          6_t counter = 0; counter < limit; counter++)
  2631                           
  2632                           ;incstack = 0
  2633                           ; Regs used in _blockingWait: [wreg+status,2]
  2634  03BE  0020               	movlb	0	; select bank0
  2635  03BF  01C9               	clrf	blockingWait@counter
  2636  03C0  01CA               	clrf	blockingWait@counter+1
  2637  03C1                     l339:	
  2638  03C1  0875               	movf	blockingWait@limit+1,w
  2639  03C2  024A               	subwf	blockingWait@counter+1,w
  2640  03C3  1D03               	skipz
  2641  03C4  2BC7               	goto	u1305
  2642  03C5  0874               	movf	blockingWait@limit,w
  2643  03C6  0249               	subwf	blockingWait@counter,w
  2644  03C7                     u1305:	
  2645  03C7  1803               	btfsc	3,0
  2646  03C8  0008               	return
  2647                           
  2648                           ;uart.c: 54:   _delay((unsigned long)((10)*(32000000/4000.0)));
  2649  03C9  3068               	movlw	104
  2650  03CA  0020               	movlb	0	; select bank0
  2651  03CB  00C8               	movwf	??_blockingWait
  2652  03CC  30E4               	movlw	228
  2653  03CD                     u1467:	
  2654  03CD  0B89               	decfsz	9,f
  2655  03CE  2BCD               	goto	u1467
  2656  03CF  0BC8               	decfsz	??_blockingWait,f
  2657  03D0  2BCD               	goto	u1467
  2658  03D1  0000               	nop
  2659  03D2  3001               	movlw	1
  2660  03D3  0020               	movlb	0	; select bank0
  2661  03D4  07C9               	addwf	blockingWait@counter,f
  2662  03D5  3000               	movlw	0
  2663  03D6  3DCA               	addwfc	blockingWait@counter+1,f
  2664  03D7  2BC1               	goto	l339
  2665  03D8                     __end_of_blockingWait:	
  2666                           
  2667                           	psect	text7
  2668  0062                     __ptext7:	
  2669 ;; *************** function _atoi *****************
  2670 ;; Defined at:
  2671 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\atoi.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  s               1    wreg     PTR const unsigned char 
  2674 ;;		 -> Num_Char(3), 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  s               1   19[BANK0 ] PTR const unsigned char 
  2677 ;;		 -> Num_Char(3), 
  2678 ;;  n               2   17[BANK0 ] int 
  2679 ;;  neg             2   10[BANK0 ] int 
  2680 ;; Return value:  Size  Location     Type
  2681 ;;                  2    4[BANK0 ] int 
  2682 ;; Registers used:
  2683 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2689 ;;      Params:         0       2       0       0       0       0       0       0
  2690 ;;      Locals:         0      10       0       0       0       0       0       0
  2691 ;;      Temps:          0       4       0       0       0       0       0       0
  2692 ;;      Totals:         0      16       0       0       0       0       0       0
  2693 ;;Total ram usage:       16 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:    6
  2696 ;; This function calls:
  2697 ;;		___wmul
  2698 ;;		_isdigit
  2699 ;;		_isspace
  2700 ;; This function is called by:
  2701 ;;		_main
  2702 ;; This function uses a non-reentrant model
  2703 ;;
  2704                           
  2705                           
  2706                           ;psect for function _atoi
  2707  0062                     _atoi:	
  2708                           
  2709                           ;incstack = 0
  2710                           ; Regs used in _atoi: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2711                           ;atoi@s stored from wreg
  2712  0062  0020               	movlb	0	; select bank0
  2713  0063  00DB               	movwf	atoi@s
  2714  0064  01D9               	clrf	atoi@n
  2715  0065  01DA               	clrf	atoi@n+1
  2716  0066  01D2               	clrf	atoi@neg
  2717  0067  01D3               	clrf	atoi@neg+1
  2718  0068                     l2048:	
  2719  0068  01D8               	clrf	_atoi$927
  2720  0069  0AD8               	incf	_atoi$927,f
  2721  006A  085B               	movf	atoi@s,w
  2722  006B  0086               	movwf	6
  2723  006C  0187               	clrf	7
  2724  006D  3020               	movlw	32
  2725  006E  0601               	xorwf	1,w
  2726  006F  1903               	btfsc	3,2
  2727  0070  2882               	goto	l2056
  2728  0071  085B               	movf	atoi@s,w
  2729  0072  0086               	movwf	6
  2730  0073  0187               	clrf	7
  2731  0074  0801               	movf	1,w
  2732  0075  3EF7               	addlw	247
  2733  0076  00CE               	movwf	??_atoi
  2734  0077  30FF               	movlw	255
  2735  0078  1803               	skipnc
  2736  0079  3000               	movlw	0
  2737  007A  00CF               	movwf	??_atoi+1
  2738  007B  3000               	movlw	0
  2739  007C  024F               	subwf	??_atoi+1,w
  2740  007D  3005               	movlw	5
  2741  007E  1903               	skipnz
  2742  007F  024E               	subwf	??_atoi,w
  2743  0080  1803               	btfsc	3,0
  2744  0081  01D8               	clrf	_atoi$927
  2745  0082                     l2056:	
  2746  0082  0858               	movf	_atoi$927,w
  2747  0083  00CE               	movwf	??_atoi
  2748  0084  01CF               	clrf	??_atoi+1
  2749  0085  084E               	movf	??_atoi,w
  2750  0086  00D4               	movwf	_atoi$926
  2751  0087  084F               	movf	??_atoi+1,w
  2752  0088  00D5               	movwf	_atoi$926+1
  2753  0089  0854               	movf	_atoi$926,w
  2754  008A  0455               	iorwf	_atoi$926+1,w
  2755  008B  1903               	btfsc	3,2
  2756  008C  2897               	goto	l2066
  2757  008D  3001               	movlw	1
  2758  008E  00CE               	movwf	??_atoi
  2759  008F  084E               	movf	??_atoi,w
  2760  0090  07DB               	addwf	atoi@s,f
  2761  0091  2868               	goto	l2048
  2762  0092                     l2062:	
  2763  0092  3001               	movlw	1
  2764  0093  00D2               	movwf	atoi@neg
  2765  0094  3000               	movlw	0
  2766  0095  00D3               	movwf	atoi@neg+1
  2767  0096  28C6               	goto	l2064
  2768  0097                     l2066:	
  2769  0097  085B               	movf	atoi@s,w
  2770  0098  0086               	movwf	6
  2771  0099  0187               	clrf	7
  2772  009A  0801               	movf	1,w
  2773  009B  00CE               	movwf	??_atoi
  2774  009C  01CF               	clrf	??_atoi+1
  2775                           
  2776                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2777                           ; Switch size 1, requested type "simple"
  2778                           ; Number of cases is 1, Range of values is 0 to 0
  2779                           ; switch strategies available:
  2780                           ; Name         Instructions Cycles
  2781                           ; simple_byte            4     3 (average)
  2782                           ; direct_byte            8     6 (fixed)
  2783                           ; jumptable            260     6 (fixed)
  2784                           ;	Chosen strategy is simple_byte
  2785  009D  084F               	movf	??_atoi+1,w
  2786  009E  3A00               	xorlw	0	; case 0
  2787  009F  1903               	skipnz
  2788  00A0  28A2               	goto	l2158
  2789  00A1  28CA               	goto	l2072
  2790  00A2                     l2158:	
  2791                           
  2792                           ; Switch size 1, requested type "simple"
  2793                           ; Number of cases is 2, Range of values is 43 to 45
  2794                           ; switch strategies available:
  2795                           ; Name         Instructions Cycles
  2796                           ; simple_byte            7     4 (average)
  2797                           ; direct_byte           15     9 (fixed)
  2798                           ; jumptable            263     9 (fixed)
  2799                           ;	Chosen strategy is simple_byte
  2800  00A2  084E               	movf	??_atoi,w
  2801  00A3  3A2B               	xorlw	43	; case 43
  2802  00A4  1903               	skipnz
  2803  00A5  28C6               	goto	l2064
  2804  00A6  3A06               	xorlw	6	; case 45
  2805  00A7  1903               	skipnz
  2806  00A8  2892               	goto	l2062
  2807  00A9  28CA               	goto	l2072
  2808  00AA                     l2068:	
  2809  00AA  085B               	movf	atoi@s,w
  2810  00AB  0086               	movwf	6
  2811  00AC  0187               	clrf	7
  2812  00AD  085A               	movf	atoi@n+1,w
  2813  00AE  00C9               	movwf	___wmul@multiplier+1
  2814  00AF  0859               	movf	atoi@n,w
  2815  00B0  00C8               	movwf	___wmul@multiplier
  2816  00B1  300A               	movlw	10
  2817  00B2  00CA               	movwf	___wmul@multiplicand
  2818  00B3  3000               	movlw	0
  2819  00B4  00CB               	movwf	___wmul@multiplicand+1
  2820  00B5  3183  23A2  3180   	fcall	___wmul
  2821  00B8  0020               	movlb	0	; select bank0
  2822  00B9  0849               	movf	?___wmul+1,w
  2823  00BA  00CF               	movwf	??_atoi+1
  2824  00BB  0801               	movf	1,w
  2825  00BC  0248               	subwf	?___wmul,w
  2826  00BD  00CE               	movwf	??_atoi
  2827  00BE  1C03               	skipc
  2828  00BF  03CF               	decf	??_atoi+1,f
  2829  00C0  084E               	movf	??_atoi,w
  2830  00C1  3E30               	addlw	48
  2831  00C2  00D9               	movwf	atoi@n
  2832  00C3  3000               	movlw	0
  2833  00C4  3D4F               	addwfc	??_atoi+1,w
  2834  00C5  00DA               	movwf	atoi@n+1
  2835  00C6                     l2064:	
  2836  00C6  3001               	movlw	1
  2837  00C7  00CE               	movwf	??_atoi
  2838  00C8  084E               	movf	??_atoi,w
  2839  00C9  07DB               	addwf	atoi@s,f
  2840  00CA                     l2072:	
  2841  00CA  085B               	movf	atoi@s,w
  2842  00CB  0086               	movwf	6
  2843  00CC  0187               	clrf	7
  2844  00CD  0801               	movf	1,w
  2845  00CE  3ED0               	addlw	208
  2846  00CF  00CE               	movwf	??_atoi
  2847  00D0  30FF               	movlw	255
  2848  00D1  1803               	skipnc
  2849  00D2  3000               	movlw	0
  2850  00D3  00CF               	movwf	??_atoi+1
  2851  00D4  3000               	movlw	0
  2852  00D5  024F               	subwf	??_atoi+1,w
  2853  00D6  300A               	movlw	10
  2854  00D7  1903               	skipnz
  2855  00D8  024E               	subwf	??_atoi,w
  2856  00D9  1803               	btfsc	3,0
  2857  00DA  28DD               	goto	u1390
  2858  00DB  3001               	movlw	1
  2859  00DC  28DE               	goto	u1400
  2860  00DD                     u1390:	
  2861  00DD  3000               	movlw	0
  2862  00DE                     u1400:	
  2863  00DE  00D0               	movwf	??_atoi+2
  2864  00DF  01D1               	clrf	??_atoi+3
  2865  00E0  0850               	movf	??_atoi+2,w
  2866  00E1  00D6               	movwf	_atoi$928
  2867  00E2  0851               	movf	??_atoi+3,w
  2868  00E3  00D7               	movwf	_atoi$928+1
  2869  00E4  0856               	movf	_atoi$928,w
  2870  00E5  0457               	iorwf	_atoi$928+1,w
  2871  00E6  1D03               	btfss	3,2
  2872  00E7  28AA               	goto	l2068
  2873  00E8  0852               	movf	atoi@neg,w
  2874  00E9  0453               	iorwf	atoi@neg+1,w
  2875  00EA  1D03               	btfss	3,2
  2876  00EB  28F8               	goto	l2082
  2877  00EC  0959               	comf	atoi@n,w
  2878  00ED  00CE               	movwf	??_atoi
  2879  00EE  095A               	comf	atoi@n+1,w
  2880  00EF  00CF               	movwf	??_atoi+1
  2881  00F0  0ACE               	incf	??_atoi,f
  2882  00F1  1903               	skipnz
  2883  00F2  0ACF               	incf	??_atoi+1,f
  2884  00F3  084E               	movf	??_atoi,w
  2885  00F4  00CC               	movwf	?_atoi
  2886  00F5  084F               	movf	??_atoi+1,w
  2887  00F6  00CD               	movwf	?_atoi+1
  2888  00F7  0008               	return
  2889  00F8                     l2082:	
  2890  00F8  085A               	movf	atoi@n+1,w
  2891  00F9  00CD               	movwf	?_atoi+1
  2892  00FA  0859               	movf	atoi@n,w
  2893  00FB  00CC               	movwf	?_atoi
  2894  00FC  0008               	return
  2895  00FD                     __end_of_atoi:	
  2896                           
  2897                           	psect	text8
  2898  032E                     __ptext8:	
  2899 ;; *************** function _isspace *****************
  2900 ;; Defined at:
  2901 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isspace.c"
  2902 ;; Parameters:    Size  Location     Type
  2903 ;;  c               2    4[COMMON] int 
  2904 ;; Auto vars:     Size  Location     Type
  2905 ;;		None
  2906 ;; Return value:  Size  Location     Type
  2907 ;;                  2    4[COMMON] int 
  2908 ;; Registers used:
  2909 ;;		wreg, status,2, status,0
  2910 ;; Tracked objects:
  2911 ;;		On entry : 0/0
  2912 ;;		On exit  : 0/0
  2913 ;;		Unchanged: 0/0
  2914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2915 ;;      Params:         2       0       0       0       0       0       0       0
  2916 ;;      Locals:         0       1       0       0       0       0       0       0
  2917 ;;      Temps:          0       2       0       0       0       0       0       0
  2918 ;;      Totals:         2       3       0       0       0       0       0       0
  2919 ;;Total ram usage:        5 bytes
  2920 ;; Hardware stack levels used:    1
  2921 ;; Hardware stack levels required when called:    5
  2922 ;; This function calls:
  2923 ;;		Nothing
  2924 ;; This function is called by:
  2925 ;;		_atoi
  2926 ;; This function uses a non-reentrant model
  2927 ;;
  2928                           
  2929                           
  2930                           ;psect for function _isspace
  2931  032E                     _isspace:	
  2932                           
  2933                           ;incstack = 0
  2934                           ; Regs used in _isspace: [wreg+status,2+status,0]
  2935  032E  0020               	movlb	0	; select bank0
  2936  032F  01CA               	clrf	_isspace$944
  2937  0330  0ACA               	incf	_isspace$944,f
  2938  0331  3020               	movlw	32
  2939  0332  0674               	xorwf	isspace@c,w
  2940  0333  0475               	iorwf	isspace@c+1,w
  2941  0334  1903               	btfsc	3,2
  2942  0335  2B43               	goto	l1936
  2943  0336  0874               	movf	isspace@c,w
  2944  0337  3EF7               	addlw	247
  2945  0338  00C8               	movwf	??_isspace
  2946  0339  30FF               	movlw	255
  2947  033A  3D75               	addwfc	isspace@c+1,w
  2948  033B  00C9               	movwf	??_isspace+1
  2949  033C  3000               	movlw	0
  2950  033D  0249               	subwf	??_isspace+1,w
  2951  033E  3005               	movlw	5
  2952  033F  1903               	skipnz
  2953  0340  0248               	subwf	??_isspace,w
  2954  0341  1803               	btfsc	3,0
  2955  0342  01CA               	clrf	_isspace$944
  2956  0343                     l1936:	
  2957  0343  084A               	movf	_isspace$944,w
  2958  0344  00C8               	movwf	??_isspace
  2959  0345  01C9               	clrf	??_isspace+1
  2960  0346  0848               	movf	??_isspace,w
  2961  0347  00F4               	movwf	?_isspace
  2962  0348  0849               	movf	??_isspace+1,w
  2963  0349  00F5               	movwf	?_isspace+1
  2964  034A  0008               	return
  2965  034B                     __end_of_isspace:	
  2966                           
  2967                           	psect	text9
  2968  040B                     __ptext9:	
  2969 ;; *************** function _isdigit *****************
  2970 ;; Defined at:
  2971 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\isdigit.c"
  2972 ;; Parameters:    Size  Location     Type
  2973 ;;  c               2    4[COMMON] int 
  2974 ;; Auto vars:     Size  Location     Type
  2975 ;;		None
  2976 ;; Return value:  Size  Location     Type
  2977 ;;                  2    4[COMMON] int 
  2978 ;; Registers used:
  2979 ;;		wreg, status,2, status,0
  2980 ;; Tracked objects:
  2981 ;;		On entry : 0/0
  2982 ;;		On exit  : 0/0
  2983 ;;		Unchanged: 0/0
  2984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2985 ;;      Params:         2       0       0       0       0       0       0       0
  2986 ;;      Locals:         0       0       0       0       0       0       0       0
  2987 ;;      Temps:          0       4       0       0       0       0       0       0
  2988 ;;      Totals:         2       4       0       0       0       0       0       0
  2989 ;;Total ram usage:        6 bytes
  2990 ;; Hardware stack levels used:    1
  2991 ;; Hardware stack levels required when called:    5
  2992 ;; This function calls:
  2993 ;;		Nothing
  2994 ;; This function is called by:
  2995 ;;		_atoi
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           
  3000                           ;psect for function _isdigit
  3001  040B                     _isdigit:	
  3002                           
  3003                           ;incstack = 0
  3004                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3005  040B  0874               	movf	isdigit@c,w
  3006  040C  3ED0               	addlw	208
  3007  040D  0020               	movlb	0	; select bank0
  3008  040E  00C8               	movwf	??_isdigit
  3009  040F  30FF               	movlw	255
  3010  0410  3D75               	addwfc	isdigit@c+1,w
  3011  0411  00C9               	movwf	??_isdigit+1
  3012  0412  3000               	movlw	0
  3013  0413  0249               	subwf	??_isdigit+1,w
  3014  0414  300A               	movlw	10
  3015  0415  1903               	skipnz
  3016  0416  0248               	subwf	??_isdigit,w
  3017  0417  1803               	btfsc	3,0
  3018  0418  2C1B               	goto	u1190
  3019  0419  3001               	movlw	1
  3020  041A  2C1C               	goto	u1200
  3021  041B                     u1190:	
  3022  041B  3000               	movlw	0
  3023  041C                     u1200:	
  3024  041C  00CA               	movwf	??_isdigit+2
  3025  041D  01CB               	clrf	??_isdigit+3
  3026  041E  084A               	movf	??_isdigit+2,w
  3027  041F  00F4               	movwf	?_isdigit
  3028  0420  084B               	movf	??_isdigit+3,w
  3029  0421  00F5               	movwf	?_isdigit+1
  3030  0422  0008               	return
  3031  0423                     __end_of_isdigit:	
  3032                           
  3033                           	psect	text10
  3034  03A2                     __ptext10:	
  3035 ;; *************** function ___wmul *****************
  3036 ;; Defined at:
  3037 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\Umul16.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3040 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3041 ;; Auto vars:     Size  Location     Type
  3042 ;;  product         2    4[COMMON] unsigned int 
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  2    0[BANK0 ] unsigned int 
  3045 ;; Registers used:
  3046 ;;		wreg, status,2, status,0
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3052 ;;      Params:         0       4       0       0       0       0       0       0
  3053 ;;      Locals:         2       0       0       0       0       0       0       0
  3054 ;;      Temps:          0       0       0       0       0       0       0       0
  3055 ;;      Totals:         2       4       0       0       0       0       0       0
  3056 ;;Total ram usage:        6 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    5
  3059 ;; This function calls:
  3060 ;;		Nothing
  3061 ;; This function is called by:
  3062 ;;		_atoi
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           
  3067                           ;psect for function ___wmul
  3068  03A2                     ___wmul:	
  3069                           
  3070                           ;incstack = 0
  3071                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3072  03A2  01F4               	clrf	___wmul@product
  3073  03A3  01F5               	clrf	___wmul@product+1
  3074  03A4                     l1916:	
  3075  03A4  0020               	movlb	0	; select bank0
  3076  03A5  1C48               	btfss	___wmul@multiplier,0
  3077  03A6  2BAB               	goto	l410
  3078  03A7  084A               	movf	___wmul@multiplicand,w
  3079  03A8  07F4               	addwf	___wmul@product,f
  3080  03A9  084B               	movf	___wmul@multiplicand+1,w
  3081  03AA  3DF5               	addwfc	___wmul@product+1,f
  3082  03AB                     l410:	
  3083  03AB  3001               	movlw	1
  3084  03AC                     u1145:	
  3085  03AC  35CA               	lslf	___wmul@multiplicand,f
  3086  03AD  0DCB               	rlf	___wmul@multiplicand+1,f
  3087  03AE  0B89               	decfsz	9,f
  3088  03AF  2BAC               	goto	u1145
  3089  03B0  3001               	movlw	1
  3090  03B1                     u1155:	
  3091  03B1  36C9               	lsrf	___wmul@multiplier+1,f
  3092  03B2  0CC8               	rrf	___wmul@multiplier,f
  3093  03B3  0B89               	decfsz	9,f
  3094  03B4  2BB1               	goto	u1155
  3095  03B5  0848               	movf	___wmul@multiplier,w
  3096  03B6  0449               	iorwf	___wmul@multiplier+1,w
  3097  03B7  1D03               	btfss	3,2
  3098  03B8  2BA4               	goto	l1916
  3099  03B9  0875               	movf	___wmul@product+1,w
  3100  03BA  00C9               	movwf	?___wmul+1
  3101  03BB  0874               	movf	___wmul@product,w
  3102  03BC  00C8               	movwf	?___wmul
  3103  03BD  0008               	return
  3104  03BE                     __end_of___wmul:	
  3105                           
  3106                           	psect	text11
  3107  04AD                     __ptext11:	
  3108 ;; *************** function _SYSTEM_Initialize *****************
  3109 ;; Defined at:
  3110 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3111 ;; Parameters:    Size  Location     Type
  3112 ;;		None
  3113 ;; Auto vars:     Size  Location     Type
  3114 ;;		None
  3115 ;; Return value:  Size  Location     Type
  3116 ;;                  1    wreg      void 
  3117 ;; Registers used:
  3118 ;;		wreg, status,2, status,0, pclath, cstack
  3119 ;; Tracked objects:
  3120 ;;		On entry : 0/0
  3121 ;;		On exit  : 0/0
  3122 ;;		Unchanged: 0/0
  3123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3124 ;;      Params:         0       0       0       0       0       0       0       0
  3125 ;;      Locals:         0       0       0       0       0       0       0       0
  3126 ;;      Temps:          0       0       0       0       0       0       0       0
  3127 ;;      Totals:         0       0       0       0       0       0       0       0
  3128 ;;Total ram usage:        0 bytes
  3129 ;; Hardware stack levels used:    1
  3130 ;; Hardware stack levels required when called:    7
  3131 ;; This function calls:
  3132 ;;		_EUSART_Initialize
  3133 ;;		_OSCILLATOR_Initialize
  3134 ;;		_PIN_MANAGER_Initialize
  3135 ;;		_WDT_Initialize
  3136 ;; This function is called by:
  3137 ;;		_main
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           
  3142                           ;psect for function _SYSTEM_Initialize
  3143  04AD                     _SYSTEM_Initialize:	
  3144                           
  3145                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  3146                           
  3147                           ;incstack = 0
  3148                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3149  04AD  3183  23D8  3184   	fcall	_PIN_MANAGER_Initialize
  3150                           
  3151                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  3152  04B0  3184  24D3  3184   	fcall	_OSCILLATOR_Initialize
  3153                           
  3154                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  3155  04B3  3184  24FC  3184   	fcall	_WDT_Initialize
  3156                           
  3157                           ;mcc_generated_files/mcc.c: 56:     EUSART_Initialize();
  3158  04B6  3182  2201         	fcall	_EUSART_Initialize
  3159  04B8  0008               	return
  3160  04B9                     __end_of_SYSTEM_Initialize:	
  3161                           
  3162                           	psect	text12
  3163  04FC                     __ptext12:	
  3164 ;; *************** function _WDT_Initialize *****************
  3165 ;; Defined at:
  3166 ;;		line 67 in file "mcc_generated_files/mcc.c"
  3167 ;; Parameters:    Size  Location     Type
  3168 ;;		None
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;		None
  3171 ;; Return value:  Size  Location     Type
  3172 ;;                  1    wreg      void 
  3173 ;; Registers used:
  3174 ;;		wreg
  3175 ;; Tracked objects:
  3176 ;;		On entry : 0/0
  3177 ;;		On exit  : 0/0
  3178 ;;		Unchanged: 0/0
  3179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3180 ;;      Params:         0       0       0       0       0       0       0       0
  3181 ;;      Locals:         0       0       0       0       0       0       0       0
  3182 ;;      Temps:          0       0       0       0       0       0       0       0
  3183 ;;      Totals:         0       0       0       0       0       0       0       0
  3184 ;;Total ram usage:        0 bytes
  3185 ;; Hardware stack levels used:    1
  3186 ;; Hardware stack levels required when called:    5
  3187 ;; This function calls:
  3188 ;;		Nothing
  3189 ;; This function is called by:
  3190 ;;		_SYSTEM_Initialize
  3191 ;; This function uses a non-reentrant model
  3192 ;;
  3193                           
  3194                           
  3195                           ;psect for function _WDT_Initialize
  3196  04FC                     _WDT_Initialize:	
  3197                           
  3198                           ;mcc_generated_files/mcc.c: 70:     WDTCON = 0x16;
  3199                           
  3200                           ;incstack = 0
  3201                           ; Regs used in _WDT_Initialize: [wreg]
  3202  04FC  3016               	movlw	22
  3203  04FD  0021               	movlb	1	; select bank1
  3204  04FE  0097               	movwf	23	;volatile
  3205  04FF  0008               	return
  3206  0500                     __end_of_WDT_Initialize:	
  3207                           
  3208                           	psect	text13
  3209  03D8                     __ptext13:	
  3210 ;; *************** function _PIN_MANAGER_Initialize *****************
  3211 ;; Defined at:
  3212 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;		None
  3215 ;; Auto vars:     Size  Location     Type
  3216 ;;		None
  3217 ;; Return value:  Size  Location     Type
  3218 ;;                  1    wreg      void 
  3219 ;; Registers used:
  3220 ;;		wreg, status,2
  3221 ;; Tracked objects:
  3222 ;;		On entry : 0/0
  3223 ;;		On exit  : 0/0
  3224 ;;		Unchanged: 0/0
  3225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3226 ;;      Params:         0       0       0       0       0       0       0       0
  3227 ;;      Locals:         0       0       0       0       0       0       0       0
  3228 ;;      Temps:          0       0       0       0       0       0       0       0
  3229 ;;      Totals:         0       0       0       0       0       0       0       0
  3230 ;;Total ram usage:        0 bytes
  3231 ;; Hardware stack levels used:    1
  3232 ;; Hardware stack levels required when called:    5
  3233 ;; This function calls:
  3234 ;;		Nothing
  3235 ;; This function is called by:
  3236 ;;		_SYSTEM_Initialize
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           
  3241                           ;psect for function _PIN_MANAGER_Initialize
  3242  03D8                     _PIN_MANAGER_Initialize:	
  3243                           
  3244                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  3245                           
  3246                           ;incstack = 0
  3247                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  3248  03D8  0022               	movlb	2	; select bank2
  3249  03D9  018C               	clrf	12	;volatile
  3250                           
  3251                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  3252  03DA  018D               	clrf	13	;volatile
  3253                           
  3254                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  3255  03DB  018E               	clrf	14	;volatile
  3256                           
  3257                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3F;
  3258  03DC  303F               	movlw	63
  3259  03DD  0021               	movlb	1	; select bank1
  3260  03DE  008C               	movwf	12	;volatile
  3261                           
  3262                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x70;
  3263  03DF  3070               	movlw	112
  3264  03E0  008D               	movwf	13	;volatile
  3265                           
  3266                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xFF;
  3267  03E1  30FF               	movlw	255
  3268  03E2  008E               	movwf	14	;volatile
  3269                           
  3270                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xFF;
  3271  03E3  30FF               	movlw	255
  3272  03E4  0023               	movlb	3	; select bank3
  3273  03E5  008E               	movwf	14	;volatile
  3274                           
  3275                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x50;
  3276  03E6  3050               	movlw	80
  3277  03E7  008D               	movwf	13	;volatile
  3278                           
  3279                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  3280  03E8  3037               	movlw	55
  3281  03E9  008C               	movwf	12	;volatile
  3282                           
  3283                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  3284  03EA  0024               	movlb	4	; select bank4
  3285  03EB  018D               	clrf	13	;volatile
  3286                           
  3287                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  3288  03EC  018C               	clrf	12	;volatile
  3289                           
  3290                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  3291  03ED  0021               	movlb	1	; select bank1
  3292  03EE  1795               	bsf	21,7	;volatile
  3293                           
  3294                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  3295  03EF  0022               	movlb	2	; select bank2
  3296  03F0  019D               	clrf	29	;volatile
  3297  03F1  0008               	return
  3298  03F2                     __end_of_PIN_MANAGER_Initialize:	
  3299                           
  3300                           	psect	text14
  3301  04D3                     __ptext14:	
  3302 ;; *************** function _OSCILLATOR_Initialize *****************
  3303 ;; Defined at:
  3304 ;;		line 59 in file "mcc_generated_files/mcc.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;		None
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  1    wreg      void 
  3311 ;; Registers used:
  3312 ;;		wreg, status,2
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3318 ;;      Params:         0       0       0       0       0       0       0       0
  3319 ;;      Locals:         0       0       0       0       0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0       0       0       0
  3321 ;;      Totals:         0       0       0       0       0       0       0       0
  3322 ;;Total ram usage:        0 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    5
  3325 ;; This function calls:
  3326 ;;		Nothing
  3327 ;; This function is called by:
  3328 ;;		_SYSTEM_Initialize
  3329 ;; This function uses a non-reentrant model
  3330 ;;
  3331                           
  3332                           
  3333                           ;psect for function _OSCILLATOR_Initialize
  3334  04D3                     _OSCILLATOR_Initialize:	
  3335                           
  3336                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0xF0;
  3337                           
  3338                           ;incstack = 0
  3339                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3340  04D3  30F0               	movlw	240
  3341  04D4  0021               	movlb	1	; select bank1
  3342  04D5  0099               	movwf	25	;volatile
  3343                           
  3344                           ;mcc_generated_files/mcc.c: 64:     BORCON = 0x00;
  3345  04D6  0022               	movlb	2	; select bank2
  3346  04D7  0196               	clrf	22	;volatile
  3347  04D8  0008               	return
  3348  04D9                     __end_of_OSCILLATOR_Initialize:	
  3349                           
  3350                           	psect	text15
  3351  0201                     __ptext15:	
  3352 ;; *************** function _EUSART_Initialize *****************
  3353 ;; Defined at:
  3354 ;;		line 88 in file "mcc_generated_files/eusart.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      void 
  3361 ;; Registers used:
  3362 ;;		wreg, status,2, status,0, pclath, cstack
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3368 ;;      Params:         0       0       0       0       0       0       0       0
  3369 ;;      Locals:         0       0       0       0       0       0       0       0
  3370 ;;      Temps:          0       1       0       0       0       0       0       0
  3371 ;;      Totals:         0       1       0       0       0       0       0       0
  3372 ;;Total ram usage:        1 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; Hardware stack levels required when called:    6
  3375 ;; This function calls:
  3376 ;;		_EUSART_SetErrorHandler
  3377 ;;		_EUSART_SetFramingErrorHandler
  3378 ;;		_EUSART_SetOverrunErrorHandler
  3379 ;;		_EUSART_SetRxInterruptHandler
  3380 ;;		_EUSART_SetTxInterruptHandler
  3381 ;; This function is called by:
  3382 ;;		_SYSTEM_Initialize
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           
  3387                           ;psect for function _EUSART_Initialize
  3388  0201                     _EUSART_Initialize:	
  3389                           
  3390                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  3391                           
  3392                           ;incstack = 0
  3393                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3394  0201  0021               	movlb	1	; select bank1
  3395  0202  1291               	bcf	17,5	;volatile
  3396                           
  3397                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  3398  0203  3075               	movlw	low _EUSART_Receive_ISR
  3399  0204  00F4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  3400  0205  3002               	movlw	high _EUSART_Receive_ISR
  3401  0206  00F5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  3402  0207  3184  24F1  3182   	fcall	_EUSART_SetRxInterruptHandler
  3403                           
  3404                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  3405  020A  0021               	movlb	1	; select bank1
  3406  020B  1211               	bcf	17,4	;volatile
  3407                           
  3408                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  3409  020C  3085               	movlw	low _EUSART_Transmit_ISR
  3410  020D  00F4               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  3411  020E  3003               	movlw	high _EUSART_Transmit_ISR
  3412  020F  00F5               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  3413  0210  3184  24D9  3182   	fcall	_EUSART_SetTxInterruptHandler
  3414                           
  3415                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  3416  0213  3008               	movlw	8
  3417  0214  0023               	movlb	3	; select bank3
  3418  0215  009F               	movwf	31	;volatile
  3419                           
  3420                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  3421  0216  3090               	movlw	144
  3422  0217  009D               	movwf	29	;volatile
  3423                           
  3424                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  3425  0218  3024               	movlw	36
  3426  0219  009E               	movwf	30	;volatile
  3427                           
  3428                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0x44;
  3429  021A  3044               	movlw	68
  3430  021B  009B               	movwf	27	;volatile
  3431                           
  3432                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;
  3433  021C  019C               	clrf	28	;volatile
  3434                           
  3435                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  3436  021D  3009               	movlw	low _EUSART_DefaultFramingErrorHandler
  3437  021E  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  3438  021F  3005               	movlw	high _EUSART_DefaultFramingErrorHandler
  3439  0220  00F5               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  3440  0221  3184  24E5  3182   	fcall	_EUSART_SetFramingErrorHandler
  3441                           
  3442                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  3443  0224  3000               	movlw	low _EUSART_DefaultOverrunErrorHandler
  3444  0225  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  3445  0226  3005               	movlw	high _EUSART_DefaultOverrunErrorHandler
  3446  0227  00F5               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  3447  0228  3184  24DF  3182   	fcall	_EUSART_SetOverrunErrorHandler
  3448                           
  3449                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  3450  022B  3004               	movlw	low _EUSART_DefaultErrorHandler
  3451  022C  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler
  3452  022D  3005               	movlw	high _EUSART_DefaultErrorHandler
  3453  022E  00F5               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  3454  022F  3184  24EB         	fcall	_EUSART_SetErrorHandler
  3455                           
  3456                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  3457  0231  0020               	movlb	0	; select bank0
  3458  0232  01BA               	clrf	_eusartRxLastError	;volatile
  3459                           
  3460                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  3461  0233  01F9               	clrf	_eusartTxHead	;volatile
  3462                           
  3463                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  3464  0234  01F8               	clrf	_eusartTxTail	;volatile
  3465                           
  3466                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  3467  0235  3008               	movlw	8
  3468  0236  00C8               	movwf	??_EUSART_Initialize
  3469  0237  0848               	movf	??_EUSART_Initialize,w
  3470  0238  00E7               	movwf	_eusartTxBufferRemaining	;volatile
  3471                           
  3472                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  3473  0239  01F7               	clrf	_eusartRxHead	;volatile
  3474                           
  3475                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  3476  023A  01F6               	clrf	_eusartRxTail	;volatile
  3477                           
  3478                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  3479  023B  01BB               	clrf	_eusartRxCount	;volatile
  3480                           
  3481                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  3482  023C  0021               	movlb	1	; select bank1
  3483  023D  1691               	bsf	17,5	;volatile
  3484  023E  0008               	return
  3485  023F                     __end_of_EUSART_Initialize:	
  3486                           
  3487                           	psect	text16
  3488  04D9                     __ptext16:	
  3489 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  3490 ;; Defined at:
  3491 ;;		line 276 in file "mcc_generated_files/eusart.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  3494 ;;		 -> EUSART_Transmit_ISR(1), 
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;		None
  3497 ;; Return value:  Size  Location     Type
  3498 ;;                  1    wreg      void 
  3499 ;; Registers used:
  3500 ;;		wreg
  3501 ;; Tracked objects:
  3502 ;;		On entry : 0/0
  3503 ;;		On exit  : 0/0
  3504 ;;		Unchanged: 0/0
  3505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3506 ;;      Params:         2       0       0       0       0       0       0       0
  3507 ;;      Locals:         0       0       0       0       0       0       0       0
  3508 ;;      Temps:          0       0       0       0       0       0       0       0
  3509 ;;      Totals:         2       0       0       0       0       0       0       0
  3510 ;;Total ram usage:        2 bytes
  3511 ;; Hardware stack levels used:    1
  3512 ;; Hardware stack levels required when called:    5
  3513 ;; This function calls:
  3514 ;;		Nothing
  3515 ;; This function is called by:
  3516 ;;		_EUSART_Initialize
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           
  3521                           ;psect for function _EUSART_SetTxInterruptHandler
  3522  04D9                     _EUSART_SetTxInterruptHandler:	
  3523                           
  3524                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  3525                           
  3526                           ;incstack = 0
  3527                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  3528  04D9  0875               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  3529  04DA  0020               	movlb	0	; select bank0
  3530  04DB  00E6               	movwf	_EUSART_TxDefaultInterruptHandler+1
  3531  04DC  0874               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  3532  04DD  00E5               	movwf	_EUSART_TxDefaultInterruptHandler
  3533  04DE  0008               	return
  3534  04DF                     __end_of_EUSART_SetTxInterruptHandler:	
  3535                           
  3536                           	psect	text17
  3537  04DF                     __ptext17:	
  3538 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  3539 ;; Defined at:
  3540 ;;		line 268 in file "mcc_generated_files/eusart.c"
  3541 ;; Parameters:    Size  Location     Type
  3542 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  3543 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  3544 ;; Auto vars:     Size  Location     Type
  3545 ;;		None
  3546 ;; Return value:  Size  Location     Type
  3547 ;;                  1    wreg      void 
  3548 ;; Registers used:
  3549 ;;		wreg
  3550 ;; Tracked objects:
  3551 ;;		On entry : 0/0
  3552 ;;		On exit  : 0/0
  3553 ;;		Unchanged: 0/0
  3554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3555 ;;      Params:         2       0       0       0       0       0       0       0
  3556 ;;      Locals:         0       0       0       0       0       0       0       0
  3557 ;;      Temps:          0       0       0       0       0       0       0       0
  3558 ;;      Totals:         2       0       0       0       0       0       0       0
  3559 ;;Total ram usage:        2 bytes
  3560 ;; Hardware stack levels used:    1
  3561 ;; Hardware stack levels required when called:    5
  3562 ;; This function calls:
  3563 ;;		Nothing
  3564 ;; This function is called by:
  3565 ;;		_EUSART_Initialize
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           
  3570                           ;psect for function _EUSART_SetOverrunErrorHandler
  3571  04DF                     _EUSART_SetOverrunErrorHandler:	
  3572                           
  3573                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  3574                           
  3575                           ;incstack = 0
  3576                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  3577  04DF  0875               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  3578  04E0  0020               	movlb	0	; select bank0
  3579  04E1  00E0               	movwf	_EUSART_OverrunErrorHandler+1
  3580  04E2  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  3581  04E3  00DF               	movwf	_EUSART_OverrunErrorHandler
  3582  04E4  0008               	return
  3583  04E5                     __end_of_EUSART_SetOverrunErrorHandler:	
  3584                           
  3585                           	psect	text18
  3586  04E5                     __ptext18:	
  3587 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  3588 ;; Defined at:
  3589 ;;		line 264 in file "mcc_generated_files/eusart.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  3592 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  3593 ;; Auto vars:     Size  Location     Type
  3594 ;;		None
  3595 ;; Return value:  Size  Location     Type
  3596 ;;                  1    wreg      void 
  3597 ;; Registers used:
  3598 ;;		wreg
  3599 ;; Tracked objects:
  3600 ;;		On entry : 0/0
  3601 ;;		On exit  : 0/0
  3602 ;;		Unchanged: 0/0
  3603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3604 ;;      Params:         2       0       0       0       0       0       0       0
  3605 ;;      Locals:         0       0       0       0       0       0       0       0
  3606 ;;      Temps:          0       0       0       0       0       0       0       0
  3607 ;;      Totals:         2       0       0       0       0       0       0       0
  3608 ;;Total ram usage:        2 bytes
  3609 ;; Hardware stack levels used:    1
  3610 ;; Hardware stack levels required when called:    5
  3611 ;; This function calls:
  3612 ;;		Nothing
  3613 ;; This function is called by:
  3614 ;;		_EUSART_Initialize
  3615 ;; This function uses a non-reentrant model
  3616 ;;
  3617                           
  3618                           
  3619                           ;psect for function _EUSART_SetFramingErrorHandler
  3620  04E5                     _EUSART_SetFramingErrorHandler:	
  3621                           
  3622                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  3623                           
  3624                           ;incstack = 0
  3625                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  3626  04E5  0875               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  3627  04E6  0020               	movlb	0	; select bank0
  3628  04E7  00E2               	movwf	_EUSART_FramingErrorHandler+1
  3629  04E8  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  3630  04E9  00E1               	movwf	_EUSART_FramingErrorHandler
  3631  04EA  0008               	return
  3632  04EB                     __end_of_EUSART_SetFramingErrorHandler:	
  3633                           
  3634                           	psect	text19
  3635  04EB                     __ptext19:	
  3636 ;; *************** function _EUSART_SetErrorHandler *****************
  3637 ;; Defined at:
  3638 ;;		line 272 in file "mcc_generated_files/eusart.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  3641 ;;		 -> EUSART_DefaultErrorHandler(1), 
  3642 ;; Auto vars:     Size  Location     Type
  3643 ;;		None
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  1    wreg      void 
  3646 ;; Registers used:
  3647 ;;		wreg
  3648 ;; Tracked objects:
  3649 ;;		On entry : 0/0
  3650 ;;		On exit  : 0/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3653 ;;      Params:         2       0       0       0       0       0       0       0
  3654 ;;      Locals:         0       0       0       0       0       0       0       0
  3655 ;;      Temps:          0       0       0       0       0       0       0       0
  3656 ;;      Totals:         2       0       0       0       0       0       0       0
  3657 ;;Total ram usage:        2 bytes
  3658 ;; Hardware stack levels used:    1
  3659 ;; Hardware stack levels required when called:    5
  3660 ;; This function calls:
  3661 ;;		Nothing
  3662 ;; This function is called by:
  3663 ;;		_EUSART_Initialize
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           
  3668                           ;psect for function _EUSART_SetErrorHandler
  3669  04EB                     _EUSART_SetErrorHandler:	
  3670                           
  3671                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  3672                           
  3673                           ;incstack = 0
  3674                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  3675  04EB  0875               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  3676  04EC  0020               	movlb	0	; select bank0
  3677  04ED  00DE               	movwf	_EUSART_ErrorHandler+1
  3678  04EE  0874               	movf	EUSART_SetErrorHandler@interruptHandler,w
  3679  04EF  00DD               	movwf	_EUSART_ErrorHandler
  3680  04F0  0008               	return
  3681  04F1                     __end_of_EUSART_SetErrorHandler:	
  3682                           
  3683                           	psect	text20
  3684  02EE                     __ptext20:	
  3685 ;; *************** function _SML_SendString *****************
  3686 ;; Defined at:
  3687 ;;		line 14 in file "uart.c"
  3688 ;; Parameters:    Size  Location     Type
  3689 ;;  command         1    wreg     PTR const unsigned char 
  3690 ;;		 -> Storage2(9), 
  3691 ;;  len             2    0[BANK0 ] int 
  3692 ;; Auto vars:     Size  Location     Type
  3693 ;;  command         1    3[BANK0 ] PTR const unsigned char 
  3694 ;;		 -> Storage2(9), 
  3695 ;; Return value:  Size  Location     Type
  3696 ;;                  1    wreg      void 
  3697 ;; Registers used:
  3698 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3699 ;; Tracked objects:
  3700 ;;		On entry : 0/0
  3701 ;;		On exit  : 0/0
  3702 ;;		Unchanged: 0/0
  3703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3704 ;;      Params:         0       2       0       0       0       0       0       0
  3705 ;;      Locals:         0       1       0       0       0       0       0       0
  3706 ;;      Temps:          0       1       0       0       0       0       0       0
  3707 ;;      Totals:         0       4       0       0       0       0       0       0
  3708 ;;Total ram usage:        4 bytes
  3709 ;; Hardware stack levels used:    1
  3710 ;; Hardware stack levels required when called:    6
  3711 ;; This function calls:
  3712 ;;		_EUSART_Write
  3713 ;; This function is called by:
  3714 ;;		_main
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           
  3719                           ;psect for function _SML_SendString
  3720  02EE                     _SML_SendString:	
  3721                           
  3722                           ;incstack = 0
  3723                           ; Regs used in _SML_SendString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3724                           ;SML_SendString@command stored from wreg
  3725  02EE  0020               	movlb	0	; select bank0
  3726  02EF  00CB               	movwf	SML_SendString@command
  3727  02F0                     l2096:	
  3728                           ;uart.c: 14: void SML_SendString(const char* command,int len);uart.c: 15: {;uart.c: 16: 
      +                              while (len-- !=0)
  3729                           
  3730                           
  3731                           ;uart.c: 16:     while (len-- !=0)
  3732  02F0  30FF               	movlw	255
  3733  02F1  07C8               	addwf	SML_SendString@len,f
  3734  02F2  30FF               	movlw	255
  3735  02F3  3DC9               	addwfc	SML_SendString@len+1,f
  3736  02F4  0A48               	incf	SML_SendString@len,w
  3737  02F5  1903               	btfsc	3,2
  3738  02F6  0A49               	incf	SML_SendString@len+1,w
  3739  02F7  1903               	btfsc	3,2
  3740  02F8  0008               	return
  3741                           
  3742                           ;uart.c: 17:         uart[SML].Write(*command++);
  3743  02F9  084B               	movf	SML_SendString@command,w
  3744  02FA  0086               	movwf	6
  3745  02FB  0187               	clrf	7
  3746  02FC  0801               	movf	1,w
  3747  02FD  00CA               	movwf	??_SML_SendString
  3748  02FE  084A               	movf	??_SML_SendString,w
  3749  02FF  00F4               	movwf	EUSART_Write@txData
  3750  0300  3066               	movlw	low ((_uart+2)| (0+32768))
  3751  0301  0084               	movwf	4
  3752  0302  3084               	movlw	high ((_uart+2)| (0+32768))
  3753  0303  0085               	movwf	5
  3754  0304  3F01               	moviw [1]fsr0
  3755  0305  008A               	movwf	10
  3756  0306  3F00               	moviw [0]fsr0
  3757  0307  000A               	callw
  3758  0308  3182               	pagesel	$
  3759  0309  3001               	movlw	1
  3760  030A  0020               	movlb	0	; select bank0
  3761  030B  00CA               	movwf	??_SML_SendString
  3762  030C  084A               	movf	??_SML_SendString,w
  3763  030D  07CB               	addwf	SML_SendString@command,f
  3764  030E  2AF0               	goto	l2096
  3765  030F                     __end_of_SML_SendString:	
  3766                           
  3767                           	psect	text21
  3768  048A                     __ptext21:	
  3769 ;; *************** function _ReadyReceiveBuffer *****************
  3770 ;; Defined at:
  3771 ;;		line 41 in file "uart.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;		None
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;  position        1    5[COMMON] unsigned char 
  3776 ;; Return value:  Size  Location     Type
  3777 ;;                  1    wreg      void 
  3778 ;; Registers used:
  3779 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3785 ;;      Params:         0       0       0       0       0       0       0       0
  3786 ;;      Locals:         1       0       0       0       0       0       0       0
  3787 ;;      Temps:          1       0       0       0       0       0       0       0
  3788 ;;      Totals:         2       0       0       0       0       0       0       0
  3789 ;;Total ram usage:        2 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    5
  3792 ;; This function calls:
  3793 ;;		Nothing
  3794 ;; This function is called by:
  3795 ;;		_main
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           
  3800                           ;psect for function _ReadyReceiveBuffer
  3801  048A                     _ReadyReceiveBuffer:	
  3802                           
  3803                           ;uart.c: 43:     ResponseIndex = 0;
  3804                           
  3805                           ;incstack = 0
  3806                           ; Regs used in _ReadyReceiveBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  3807  048A  0020               	movlb	0	; select bank0
  3808  048B  01B9               	clrf	_ResponseIndex
  3809                           
  3810                           ;uart.c: 44:     for (uint8_t position = 0; position < 64; position++)
  3811  048C  01F5               	clrf	ReadyReceiveBuffer@position
  3812  048D                     l2006:	
  3813                           
  3814                           ;uart.c: 45:         ResponseBuffer[position] = 0;
  3815  048D  0875               	movf	ReadyReceiveBuffer@position,w
  3816  048E  3E20               	addlw	(low (_ResponseBuffer| (0+256)))& (0+255)
  3817  048F  0086               	movwf	6
  3818  0490  3001               	movlw	1	; select bank2/3
  3819  0491  0087               	movwf	7
  3820  0492  0181               	clrf	1
  3821  0493  3001               	movlw	1
  3822  0494  00F4               	movwf	??_ReadyReceiveBuffer
  3823  0495  0874               	movf	??_ReadyReceiveBuffer,w
  3824  0496  07F5               	addwf	ReadyReceiveBuffer@position,f
  3825  0497  3040               	movlw	64
  3826  0498  0275               	subwf	ReadyReceiveBuffer@position,w
  3827  0499  1803               	btfsc	3,0
  3828  049A  0008               	return
  3829  049B  2C8D               	goto	l2006
  3830  049C                     __end_of_ReadyReceiveBuffer:	
  3831                           
  3832                           	psect	text22
  3833  034B                     __ptext22:	
  3834 ;; *************** function _INIT_SMART_LIGHT *****************
  3835 ;; Defined at:
  3836 ;;		line 22 in file "uart.c"
  3837 ;; Parameters:    Size  Location     Type
  3838 ;;		None
  3839 ;; Auto vars:     Size  Location     Type
  3840 ;;		None
  3841 ;; Return value:  Size  Location     Type
  3842 ;;                  1    wreg      void 
  3843 ;; Registers used:
  3844 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3845 ;; Tracked objects:
  3846 ;;		On entry : 0/0
  3847 ;;		On exit  : 0/0
  3848 ;;		Unchanged: 0/0
  3849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3850 ;;      Params:         0       0       0       0       0       0       0       0
  3851 ;;      Locals:         0       0       0       0       0       0       0       0
  3852 ;;      Temps:          0       0       0       0       0       0       0       0
  3853 ;;      Totals:         0       0       0       0       0       0       0       0
  3854 ;;Total ram usage:        0 bytes
  3855 ;; Hardware stack levels used:    1
  3856 ;; Hardware stack levels required when called:    7
  3857 ;; This function calls:
  3858 ;;		_EUSART_SetRxInterruptHandler
  3859 ;;		_SendString
  3860 ;; This function is called by:
  3861 ;;		_main
  3862 ;; This function uses a non-reentrant model
  3863 ;;
  3864                           
  3865                           
  3866                           ;psect for function _INIT_SMART_LIGHT
  3867  034B                     _INIT_SMART_LIGHT:	
  3868                           
  3869                           ;uart.c: 24:     uart[SML].SetRxISR(ReceivedMessage);
  3870                           
  3871                           ;incstack = 0
  3872                           ; Regs used in _INIT_SMART_LIGHT: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3873  034B  303F               	movlw	low _ReceivedMessage
  3874  034C  00F4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  3875  034D  3002               	movlw	high _ReceivedMessage
  3876  034E  00F5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  3877  034F  3070               	movlw	low ((_uart+12)| (0+32768))
  3878  0350  0084               	movwf	4
  3879  0351  3084               	movlw	high ((_uart+12)| (0+32768))
  3880  0352  0085               	movwf	5
  3881  0353  3F01               	moviw [1]fsr0
  3882  0354  008A               	movwf	10
  3883  0355  3F00               	moviw [0]fsr0
  3884  0356  000A               	callw
  3885  0357  3183               	pagesel	$
  3886                           
  3887                           ;uart.c: 25:     SendString("SYS FACTORY RESET");
  3888  0358  3078               	movlw	low (STR_2| (0+32768))
  3889  0359  0020               	movlb	0	; select bank0
  3890  035A  00C8               	movwf	SendString@command
  3891  035B  3084               	movlw	high (STR_2| (0+32768))
  3892  035C  00C9               	movwf	SendString@command+1
  3893  035D  3183  2368  3183   	fcall	_SendString
  3894                           
  3895                           ;uart.c: 26:     SendString("SMART LIGHT INIT");
  3896  0360  309C               	movlw	low (STR_3| (0+32768))
  3897  0361  0020               	movlb	0	; select bank0
  3898  0362  00C8               	movwf	SendString@command
  3899  0363  3084               	movlw	high (STR_3| (0+32768))
  3900  0364  00C9               	movwf	SendString@command+1
  3901  0365  3183  2368         	fcall	_SendString
  3902  0367  0008               	return
  3903  0368                     __end_of_INIT_SMART_LIGHT:	
  3904                           
  3905                           	psect	text23
  3906  0368                     __ptext23:	
  3907 ;; *************** function _SendString *****************
  3908 ;; Defined at:
  3909 ;;		line 7 in file "uart.c"
  3910 ;; Parameters:    Size  Location     Type
  3911 ;;  command         2    0[BANK0 ] PTR const unsigned char 
  3912 ;;		 -> STR_3(17), STR_2(18), 
  3913 ;; Auto vars:     Size  Location     Type
  3914 ;;		None
  3915 ;; Return value:  Size  Location     Type
  3916 ;;                  1    wreg      void 
  3917 ;; Registers used:
  3918 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3919 ;; Tracked objects:
  3920 ;;		On entry : 0/0
  3921 ;;		On exit  : 0/0
  3922 ;;		Unchanged: 0/0
  3923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3924 ;;      Params:         0       2       0       0       0       0       0       0
  3925 ;;      Locals:         0       0       0       0       0       0       0       0
  3926 ;;      Temps:          0       1       0       0       0       0       0       0
  3927 ;;      Totals:         0       3       0       0       0       0       0       0
  3928 ;;Total ram usage:        3 bytes
  3929 ;; Hardware stack levels used:    1
  3930 ;; Hardware stack levels required when called:    6
  3931 ;; This function calls:
  3932 ;;		_EUSART_Write
  3933 ;; This function is called by:
  3934 ;;		_INIT_SMART_LIGHT
  3935 ;; This function uses a non-reentrant model
  3936 ;;
  3937                           
  3938                           
  3939                           ;psect for function _SendString
  3940  0368                     _SendString:	
  3941  0368                     l1912:	
  3942                           ;uart.c: 7: void SendString(const char* command);uart.c: 8: {;uart.c: 9:     while (Resp
      +                          onseIndex-- != 0)
  3943                           
  3944                           ;incstack = 0
  3945                           ; Regs used in _SendString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3946                           
  3947                           
  3948                           ;uart.c: 9:     while (ResponseIndex-- != 0)
  3949  0368  3001               	movlw	1
  3950  0369  0020               	movlb	0	; select bank0
  3951  036A  02B9               	subwf	_ResponseIndex,f
  3952  036B  0A39               	incf	_ResponseIndex,w
  3953  036C  1903               	btfsc	3,2
  3954  036D  0008               	return
  3955                           
  3956                           ;uart.c: 10:         uart[SML].Write(*command++);
  3957  036E  0848               	movf	SendString@command,w
  3958  036F  0084               	movwf	4
  3959  0370  0849               	movf	SendString@command+1,w
  3960  0371  0085               	movwf	5
  3961  0372  0800               	movf	0,w	;code access
  3962  0373  00CA               	movwf	??_SendString
  3963  0374  084A               	movf	??_SendString,w
  3964  0375  00F4               	movwf	EUSART_Write@txData
  3965  0376  3066               	movlw	low ((_uart+2)| (0+32768))
  3966  0377  0084               	movwf	4
  3967  0378  3084               	movlw	high ((_uart+2)| (0+32768))
  3968  0379  0085               	movwf	5
  3969  037A  3F01               	moviw [1]fsr0
  3970  037B  008A               	movwf	10
  3971  037C  3F00               	moviw [0]fsr0
  3972  037D  000A               	callw
  3973  037E  3183               	pagesel	$
  3974  037F  3001               	movlw	1
  3975  0380  0020               	movlb	0	; select bank0
  3976  0381  07C8               	addwf	SendString@command,f
  3977  0382  3000               	movlw	0
  3978  0383  3DC9               	addwfc	SendString@command+1,f
  3979  0384  2B68               	goto	l1912
  3980  0385                     __end_of_SendString:	
  3981                           
  3982                           	psect	text24
  3983  02CC                     __ptext24:	
  3984 ;; *************** function _EUSART_Write *****************
  3985 ;; Defined at:
  3986 ;;		line 173 in file "mcc_generated_files/eusart.c"
  3987 ;; Parameters:    Size  Location     Type
  3988 ;;  txData          1    4[COMMON] unsigned char 
  3989 ;; Auto vars:     Size  Location     Type
  3990 ;;		None
  3991 ;; Return value:  Size  Location     Type
  3992 ;;                  1    wreg      void 
  3993 ;; Registers used:
  3994 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3995 ;; Tracked objects:
  3996 ;;		On entry : 0/0
  3997 ;;		On exit  : 0/0
  3998 ;;		Unchanged: 0/0
  3999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4000 ;;      Params:         1       0       0       0       0       0       0       0
  4001 ;;      Locals:         0       0       0       0       0       0       0       0
  4002 ;;      Temps:          1       0       0       0       0       0       0       0
  4003 ;;      Totals:         2       0       0       0       0       0       0       0
  4004 ;;Total ram usage:        2 bytes
  4005 ;; Hardware stack levels used:    1
  4006 ;; Hardware stack levels required when called:    5
  4007 ;; This function calls:
  4008 ;;		Nothing
  4009 ;; This function is called by:
  4010 ;;		_SendString
  4011 ;;		_SML_SendString
  4012 ;; This function uses a non-reentrant model
  4013 ;;
  4014                           
  4015                           
  4016                           ;psect for function _EUSART_Write
  4017  02CC                     _EUSART_Write:	
  4018  02CC                     l1836:	
  4019                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  4020                           
  4021                           ;incstack = 0
  4022                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  4023                           
  4024                           
  4025                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  4026  02CC  0020               	movlb	0	; select bank0
  4027  02CD  0867               	movf	_eusartTxBufferRemaining,w	;volatile
  4028  02CE  1903               	btfsc	3,2
  4029  02CF  2ACC               	goto	l1836
  4030                           
  4031                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  4032  02D0  0021               	movlb	1	; select bank1
  4033  02D1  1A11               	btfsc	17,4	;volatile
  4034  02D2  2AD7               	goto	l100
  4035                           
  4036                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  4037  02D3  0874               	movf	EUSART_Write@txData,w
  4038  02D4  0023               	movlb	3	; select bank3
  4039  02D5  009A               	movwf	26	;volatile
  4040                           
  4041                           ;mcc_generated_files/eusart.c: 182:     }
  4042  02D6  2AEB               	goto	l1850
  4043  02D7                     l100:	
  4044                           ;mcc_generated_files/eusart.c: 183:     else
  4045                           
  4046                           
  4047                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  4048  02D7  1211               	bcf	17,4	;volatile
  4049                           
  4050                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  4051  02D8  0874               	movf	EUSART_Write@txData,w
  4052  02D9  00F5               	movwf	??_EUSART_Write
  4053  02DA  0879               	movf	_eusartTxHead,w
  4054  02DB  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4055  02DC  0086               	movwf	6
  4056  02DD  0187               	clrf	7
  4057  02DE  0875               	movf	??_EUSART_Write,w
  4058  02DF  0081               	movwf	1
  4059  02E0  3001               	movlw	1
  4060  02E1  00F5               	movwf	??_EUSART_Write
  4061  02E2  0875               	movf	??_EUSART_Write,w
  4062  02E3  07F9               	addwf	_eusartTxHead,f	;volatile
  4063                           
  4064                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  4065  02E4  3008               	movlw	8
  4066  02E5  0279               	subwf	_eusartTxHead,w	;volatile
  4067  02E6  1803               	btfsc	3,0
  4068                           
  4069                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  4070  02E7  01F9               	clrf	_eusartTxHead	;volatile
  4071                           
  4072                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  4073  02E8  3001               	movlw	1
  4074  02E9  0020               	movlb	0	; select bank0
  4075  02EA  02E7               	subwf	_eusartTxBufferRemaining,f	;volatile
  4076  02EB                     l1850:	
  4077                           
  4078                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  4079  02EB  0021               	movlb	1	; select bank1
  4080  02EC  1611               	bsf	17,4	;volatile
  4081  02ED  0008               	return
  4082  02EE                     __end_of_EUSART_Write:	
  4083                           
  4084                           	psect	text25
  4085  04F1                     __ptext25:	
  4086 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  4087 ;; Defined at:
  4088 ;;		line 280 in file "mcc_generated_files/eusart.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  4091 ;;		 -> ReceivedMessage(1), EUSART_Receive_ISR(1), 
  4092 ;; Auto vars:     Size  Location     Type
  4093 ;;		None
  4094 ;; Return value:  Size  Location     Type
  4095 ;;                  1    wreg      void 
  4096 ;; Registers used:
  4097 ;;		wreg
  4098 ;; Tracked objects:
  4099 ;;		On entry : 0/0
  4100 ;;		On exit  : 0/0
  4101 ;;		Unchanged: 0/0
  4102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4103 ;;      Params:         2       0       0       0       0       0       0       0
  4104 ;;      Locals:         0       0       0       0       0       0       0       0
  4105 ;;      Temps:          0       0       0       0       0       0       0       0
  4106 ;;      Totals:         2       0       0       0       0       0       0       0
  4107 ;;Total ram usage:        2 bytes
  4108 ;; Hardware stack levels used:    1
  4109 ;; Hardware stack levels required when called:    5
  4110 ;; This function calls:
  4111 ;;		Nothing
  4112 ;; This function is called by:
  4113 ;;		_EUSART_Initialize
  4114 ;;		_INIT_SMART_LIGHT
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           
  4119                           ;psect for function _EUSART_SetRxInterruptHandler
  4120  04F1                     _EUSART_SetRxInterruptHandler:	
  4121                           
  4122                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  4123                           
  4124                           ;incstack = 0
  4125                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  4126  04F1  0875               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  4127  04F2  0020               	movlb	0	; select bank0
  4128  04F3  00E4               	movwf	_EUSART_RxDefaultInterruptHandler+1
  4129  04F4  0874               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  4130  04F5  00E3               	movwf	_EUSART_RxDefaultInterruptHandler
  4131  04F6  0008               	return
  4132  04F7                     __end_of_EUSART_SetRxInterruptHandler:	
  4133                           
  4134                           	psect	text26
  4135  0507                     __ptext26:	
  4136 ;; *************** function _GetResponse *****************
  4137 ;; Defined at:
  4138 ;;		line 47 in file "uart.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;		None
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;		None
  4143 ;; Return value:  Size  Location     Type
  4144 ;;                  1    wreg      PTR unsigned char 
  4145 ;; Registers used:
  4146 ;;		wreg
  4147 ;; Tracked objects:
  4148 ;;		On entry : 0/0
  4149 ;;		On exit  : 0/0
  4150 ;;		Unchanged: 0/0
  4151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4152 ;;      Params:         0       0       0       0       0       0       0       0
  4153 ;;      Locals:         0       0       0       0       0       0       0       0
  4154 ;;      Temps:          0       0       0       0       0       0       0       0
  4155 ;;      Totals:         0       0       0       0       0       0       0       0
  4156 ;;Total ram usage:        0 bytes
  4157 ;; Hardware stack levels used:    1
  4158 ;; Hardware stack levels required when called:    5
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		_main
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           
  4167                           ;psect for function _GetResponse
  4168  0507                     _GetResponse:	
  4169                           
  4170                           ;uart.c: 49:     return ResponseBuffer;
  4171                           
  4172                           ;incstack = 0
  4173                           ; Regs used in _GetResponse: [wreg]
  4174  0507  3020               	movlw	(low (_ResponseBuffer| (0+256)))& (0+255)
  4175  0508  0008               	return
  4176  0509                     __end_of_GetResponse:	
  4177                           
  4178                           	psect	intentry
  4179  0004                     __pintentry:	
  4180 ;; *************** function _INTERRUPT_InterruptManager *****************
  4181 ;; Defined at:
  4182 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;		None
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;		None
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  1    wreg      void 
  4189 ;; Registers used:
  4190 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4196 ;;      Params:         0       0       0       0       0       0       0       0
  4197 ;;      Locals:         0       0       0       0       0       0       0       0
  4198 ;;      Temps:          0       0       0       0       0       0       0       0
  4199 ;;      Totals:         0       0       0       0       0       0       0       0
  4200 ;;Total ram usage:        0 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    4
  4203 ;; This function calls:
  4204 ;;		Absolute function
  4205 ;;		_EUSART_Receive_ISR
  4206 ;;		_EUSART_Transmit_ISR
  4207 ;;		_ReceivedMessage
  4208 ;; This function is called by:
  4209 ;;		Interrupt level 1
  4210 ;; This function uses a non-reentrant model
  4211 ;;
  4212                           
  4213  0004                     _INTERRUPT_InterruptManager:	
  4214                           
  4215                           ;incstack = 0
  4216  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  4217                           
  4218                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4219  0005  3180               	pagesel	$
  4220                           
  4221                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  4222  0006  1F0B               	btfss	11,6	;volatile
  4223  0007  281F               	goto	i1l165
  4224                           
  4225                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  4226  0008  0021               	movlb	1	; select bank1
  4227  0009  1E11               	btfss	17,4	;volatile
  4228  000A  2814               	goto	i1l160
  4229  000B  0020               	movlb	0	; select bank0
  4230  000C  1E11               	btfss	17,4	;volatile
  4231  000D  2814               	goto	i1l160
  4232                           
  4233                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
  4234  000E  0866               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  4235  000F  008A               	movwf	10
  4236  0010  0865               	movf	_EUSART_TxDefaultInterruptHandler,w
  4237  0011  000A               	callw
  4238  0012  3180               	pagesel	$
  4239                           
  4240                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  4241  0013  281F               	goto	i1l165
  4242  0014                     i1l160:	
  4243                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  4244                           
  4245  0014  0021               	movlb	1	; select bank1
  4246  0015  1E91               	btfss	17,5	;volatile
  4247  0016  281F               	goto	i1l165
  4248  0017  0020               	movlb	0	; select bank0
  4249  0018  1E91               	btfss	17,5	;volatile
  4250  0019  281F               	goto	i1l165
  4251                           
  4252                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
  4253  001A  0864               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  4254  001B  008A               	movwf	10
  4255  001C  0863               	movf	_EUSART_RxDefaultInterruptHandler,w
  4256  001D  000A               	callw
  4257  001E  3180               	pagesel	$
  4258  001F                     i1l165:	
  4259                           ;mcc_generated_files/interrupt_manager.c: 69:     }
  4260                           
  4261                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  4262                           
  4263  001F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  4264  0020  0009               	retfie
  4265  0021                     __end_of_INTERRUPT_InterruptManager:	
  4266                           
  4267                           	psect	text28
  4268  0275                     __ptext28:	
  4269 ;; *************** function _EUSART_Receive_ISR *****************
  4270 ;; Defined at:
  4271 ;;		line 216 in file "mcc_generated_files/eusart.c"
  4272 ;; Parameters:    Size  Location     Type
  4273 ;;		None
  4274 ;; Auto vars:     Size  Location     Type
  4275 ;;		None
  4276 ;; Return value:  Size  Location     Type
  4277 ;;                  1    wreg      void 
  4278 ;; Registers used:
  4279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4280 ;; Tracked objects:
  4281 ;;		On entry : 0/0
  4282 ;;		On exit  : 0/0
  4283 ;;		Unchanged: 0/0
  4284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4285 ;;      Params:         0       0       0       0       0       0       0       0
  4286 ;;      Locals:         0       0       0       0       0       0       0       0
  4287 ;;      Temps:          0       0       0       0       0       0       0       0
  4288 ;;      Totals:         0       0       0       0       0       0       0       0
  4289 ;;Total ram usage:        0 bytes
  4290 ;; Hardware stack levels used:    1
  4291 ;; Hardware stack levels required when called:    2
  4292 ;; This function calls:
  4293 ;;		Absolute function
  4294 ;;		_EUSART_DefaultErrorHandler
  4295 ;;		_EUSART_DefaultFramingErrorHandler
  4296 ;;		_EUSART_DefaultOverrunErrorHandler
  4297 ;;		_EUSART_RxDataHandler
  4298 ;; This function is called by:
  4299 ;;		_EUSART_Initialize
  4300 ;;		_ReceivedMessage
  4301 ;;		_INTERRUPT_InterruptManager
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           
  4306                           ;psect for function _EUSART_Receive_ISR
  4307  0275                     _EUSART_Receive_ISR:	
  4308                           
  4309                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  4310                           
  4311                           ;incstack = 0
  4312                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4313  0275  0877               	movf	_eusartRxHead,w	;volatile
  4314  0276  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  4315  0277  0086               	movwf	6
  4316  0278  0187               	clrf	7
  4317  0279  0181               	clrf	1
  4318                           
  4319                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
  4320  027A  0023               	movlb	3	; select bank3
  4321  027B  1D1D               	btfss	29,2	;volatile
  4322  027C  2A88               	goto	i1l1502
  4323                           
  4324                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  4325  027D  0877               	movf	_eusartRxHead,w	;volatile
  4326  027E  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  4327  027F  0086               	movwf	6
  4328  0280  0187               	clrf	7
  4329  0281  1481               	bsf	1,1
  4330                           
  4331                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
  4332  0282  0020               	movlb	0	; select bank0
  4333  0283  0862               	movf	_EUSART_FramingErrorHandler+1,w
  4334  0284  008A               	movwf	10
  4335  0285  0861               	movf	_EUSART_FramingErrorHandler,w
  4336  0286  000A               	callw
  4337  0287  3182               	pagesel	$
  4338  0288                     i1l1502:	
  4339                           
  4340                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
  4341  0288  0023               	movlb	3	; select bank3
  4342  0289  1C9D               	btfss	29,1	;volatile
  4343  028A  2A96               	goto	i1l1508
  4344                           
  4345                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  4346  028B  0877               	movf	_eusartRxHead,w	;volatile
  4347  028C  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  4348  028D  0086               	movwf	6
  4349  028E  0187               	clrf	7
  4350  028F  1501               	bsf	1,2
  4351                           
  4352                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
  4353  0290  0020               	movlb	0	; select bank0
  4354  0291  0860               	movf	_EUSART_OverrunErrorHandler+1,w
  4355  0292  008A               	movwf	10
  4356  0293  085F               	movf	_EUSART_OverrunErrorHandler,w
  4357  0294  000A               	callw
  4358  0295  3182               	pagesel	$
  4359  0296                     i1l1508:	
  4360                           
  4361                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
  4362  0296  0877               	movf	_eusartRxHead,w	;volatile
  4363  0297  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  4364  0298  0086               	movwf	6
  4365  0299  0187               	clrf	7
  4366  029A  0801               	movf	1,w
  4367  029B  1903               	btfsc	3,2
  4368  029C  2AA4               	goto	i1l1512
  4369                           
  4370                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
  4371  029D  0020               	movlb	0	; select bank0
  4372  029E  085E               	movf	_EUSART_ErrorHandler+1,w
  4373  029F  008A               	movwf	10
  4374  02A0  085D               	movf	_EUSART_ErrorHandler,w
  4375  02A1  000A               	callw
  4376  02A2  3182               	pagesel	$
  4377                           
  4378                           ;mcc_generated_files/eusart.c: 233:     } else {
  4379  02A3  0008               	return
  4380  02A4                     i1l1512:	
  4381                           
  4382                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
  4383  02A4  3184  2423         	fcall	_EUSART_RxDataHandler
  4384  02A6  0008               	return
  4385  02A7                     __end_of_EUSART_Receive_ISR:	
  4386                           
  4387                           	psect	text29
  4388  023F                     __ptext29:	
  4389 ;; *************** function _ReceivedMessage *****************
  4390 ;; Defined at:
  4391 ;;		line 28 in file "uart.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;		None
  4394 ;; Auto vars:     Size  Location     Type
  4395 ;;  readByte        1    3[COMMON] unsigned char 
  4396 ;; Return value:  Size  Location     Type
  4397 ;;                  1    wreg      void 
  4398 ;; Registers used:
  4399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4400 ;; Tracked objects:
  4401 ;;		On entry : 0/0
  4402 ;;		On exit  : 0/0
  4403 ;;		Unchanged: 0/0
  4404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4405 ;;      Params:         0       0       0       0       0       0       0       0
  4406 ;;      Locals:         1       0       0       0       0       0       0       0
  4407 ;;      Temps:          1       0       0       0       0       0       0       0
  4408 ;;      Totals:         2       0       0       0       0       0       0       0
  4409 ;;Total ram usage:        2 bytes
  4410 ;; Hardware stack levels used:    1
  4411 ;; Hardware stack levels required when called:    3
  4412 ;; This function calls:
  4413 ;;		_EUSART_Read
  4414 ;;		_EUSART_Receive_ISR
  4415 ;;		_EUSART_is_rx_ready
  4416 ;; This function is called by:
  4417 ;;		_INIT_SMART_LIGHT
  4418 ;;		_INTERRUPT_InterruptManager
  4419 ;; This function uses a non-reentrant model
  4420 ;;
  4421                           
  4422                           
  4423                           ;psect for function _ReceivedMessage
  4424  023F                     _ReceivedMessage:	
  4425                           
  4426                           ;uart.c: 30:     uart[SML].RxDefaultISR();
  4427                           
  4428                           ;incstack = 0
  4429                           ; Regs used in _ReceivedMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4430  023F  306E               	movlw	low ((_uart+10)| (0+32768))
  4431  0240  0084               	movwf	4
  4432  0241  3084               	movlw	high ((_uart+10)| (0+32768))
  4433  0242  0085               	movwf	5
  4434  0243  3F01               	moviw [1]fsr0
  4435  0244  008A               	movwf	10
  4436  0245  3F00               	moviw [0]fsr0
  4437  0246  000A               	callw
  4438  0247  3182               	pagesel	$
  4439  0248                     i1l1742:	
  4440                           ;uart.c: 31:     while (!uart[SML].DataReady()) {
  4441                           
  4442                           
  4443                           ;uart.c: 31:     while (!uart[SML].DataReady()) {
  4444  0248  306A               	movlw	low ((_uart+6)| (0+32768))
  4445  0249  0084               	movwf	4
  4446  024A  3084               	movlw	high ((_uart+6)| (0+32768))
  4447  024B  0085               	movwf	5
  4448  024C  3F01               	moviw [1]fsr0
  4449  024D  008A               	movwf	10
  4450  024E  3F00               	moviw [0]fsr0
  4451  024F  000A               	callw
  4452  0250  3182               	pagesel	$
  4453  0251  3A00               	xorlw	0
  4454  0252  1D03               	btfss	3,2
  4455  0253  2A56               	goto	i1l1744
  4456                           
  4457                           ;uart.c: 32:         __nop();
  4458  0254  0000               	nop
  4459  0255  2A48               	goto	i1l1742
  4460  0256                     i1l1744:	
  4461                           
  4462                           ;uart.c: 34:     uint8_t readByte = uart[SML].Read();
  4463  0256  3064               	movlw	low (_uart| (0+32768))
  4464  0257  0084               	movwf	4
  4465  0258  3084               	movlw	high (_uart| (0+32768))
  4466  0259  0085               	movwf	5
  4467  025A  3F01               	moviw [1]fsr0
  4468  025B  008A               	movwf	10
  4469  025C  3F00               	moviw [0]fsr0
  4470  025D  000A               	callw
  4471  025E  3182               	pagesel	$
  4472  025F  00F2               	movwf	??_ReceivedMessage
  4473  0260  0872               	movf	??_ReceivedMessage,w
  4474  0261  00F3               	movwf	ReceivedMessage@readByte
  4475                           
  4476                           ;uart.c: 35:     if ((ResponseIndex < 64) )
  4477  0262  3040               	movlw	64
  4478  0263  0020               	movlb	0	; select bank0
  4479  0264  0239               	subwf	_ResponseIndex,w
  4480  0265  1803               	skipnc
  4481  0266  0008               	return
  4482                           
  4483                           ;uart.c: 36:         ResponseBuffer[ResponseIndex++] = readByte;
  4484  0267  0873               	movf	ReceivedMessage@readByte,w
  4485  0268  00F2               	movwf	??_ReceivedMessage
  4486  0269  0839               	movf	_ResponseIndex,w
  4487  026A  3E20               	addlw	(low (_ResponseBuffer| (0+256)))& (0+255)
  4488  026B  0086               	movwf	6
  4489  026C  3001               	movlw	1	; select bank2/3
  4490  026D  0087               	movwf	7
  4491  026E  0872               	movf	??_ReceivedMessage,w
  4492  026F  0081               	movwf	1
  4493  0270  3001               	movlw	1
  4494  0271  00F2               	movwf	??_ReceivedMessage
  4495  0272  0872               	movf	??_ReceivedMessage,w
  4496  0273  07B9               	addwf	_ResponseIndex,f
  4497  0274  0008               	return
  4498  0275                     __end_of_ReceivedMessage:	
  4499                           
  4500                           	psect	text30
  4501  04B9                     __ptext30:	
  4502 ;; *************** function _EUSART_is_rx_ready *****************
  4503 ;; Defined at:
  4504 ;;		line 137 in file "mcc_generated_files/eusart.c"
  4505 ;; Parameters:    Size  Location     Type
  4506 ;;		None
  4507 ;; Auto vars:     Size  Location     Type
  4508 ;;		None
  4509 ;; Return value:  Size  Location     Type
  4510 ;;                  1    wreg      _Bool 
  4511 ;; Registers used:
  4512 ;;		wreg, status,2, status,0
  4513 ;; Tracked objects:
  4514 ;;		On entry : 0/0
  4515 ;;		On exit  : 0/0
  4516 ;;		Unchanged: 0/0
  4517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4518 ;;      Params:         0       0       0       0       0       0       0       0
  4519 ;;      Locals:         0       0       0       0       0       0       0       0
  4520 ;;      Temps:          0       0       0       0       0       0       0       0
  4521 ;;      Totals:         0       0       0       0       0       0       0       0
  4522 ;;Total ram usage:        0 bytes
  4523 ;; Hardware stack levels used:    1
  4524 ;; This function calls:
  4525 ;;		Nothing
  4526 ;; This function is called by:
  4527 ;;		_ReceivedMessage
  4528 ;; This function uses a non-reentrant model
  4529 ;;
  4530                           
  4531                           
  4532                           ;psect for function _EUSART_is_rx_ready
  4533  04B9                     _EUSART_is_rx_ready:	
  4534                           
  4535                           ;mcc_generated_files/eusart.c: 139:     return (eusartRxCount ? 1 : 0);
  4536                           
  4537                           ;incstack = 0
  4538                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
  4539  04B9  0020               	movlb	0	; select bank0
  4540  04BA  083B               	movf	_eusartRxCount,w	;volatile
  4541  04BB  1903               	btfsc	3,2
  4542  04BC  2CBF               	goto	u59_20
  4543  04BD  3001               	movlw	1
  4544  04BE  0008               	return
  4545  04BF                     u59_20:	
  4546  04BF  3000               	movlw	0
  4547  04C0  0008               	return
  4548  04C1                     __end_of_EUSART_is_rx_ready:	
  4549                           
  4550                           	psect	text31
  4551  0500                     __ptext31:	
  4552 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  4553 ;; Defined at:
  4554 ;;		line 252 in file "mcc_generated_files/eusart.c"
  4555 ;; Parameters:    Size  Location     Type
  4556 ;;		None
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;		None
  4559 ;; Return value:  Size  Location     Type
  4560 ;;                  1    wreg      void 
  4561 ;; Registers used:
  4562 ;;		None
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4568 ;;      Params:         0       0       0       0       0       0       0       0
  4569 ;;      Locals:         0       0       0       0       0       0       0       0
  4570 ;;      Temps:          0       0       0       0       0       0       0       0
  4571 ;;      Totals:         0       0       0       0       0       0       0       0
  4572 ;;Total ram usage:        0 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; This function calls:
  4575 ;;		Nothing
  4576 ;; This function is called by:
  4577 ;;		_EUSART_Initialize
  4578 ;;		_EUSART_Receive_ISR
  4579 ;; This function uses a non-reentrant model
  4580 ;;
  4581                           
  4582                           
  4583                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  4584  0500                     _EUSART_DefaultOverrunErrorHandler:	
  4585                           
  4586                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
  4587                           
  4588                           ;incstack = 0
  4589                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  4590  0500  0023               	movlb	3	; select bank3
  4591  0501  121D               	bcf	29,4	;volatile
  4592                           
  4593                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
  4594  0502  161D               	bsf	29,4	;volatile
  4595  0503  0008               	return
  4596  0504                     __end_of_EUSART_DefaultOverrunErrorHandler:	
  4597                           
  4598                           	psect	text32
  4599  0509                     __ptext32:	
  4600 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  4601 ;; Defined at:
  4602 ;;		line 250 in file "mcc_generated_files/eusart.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;		None
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      void 
  4609 ;; Registers used:
  4610 ;;		None
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4616 ;;      Params:         0       0       0       0       0       0       0       0
  4617 ;;      Locals:         0       0       0       0       0       0       0       0
  4618 ;;      Temps:          0       0       0       0       0       0       0       0
  4619 ;;      Totals:         0       0       0       0       0       0       0       0
  4620 ;;Total ram usage:        0 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; This function calls:
  4623 ;;		Nothing
  4624 ;; This function is called by:
  4625 ;;		_EUSART_Initialize
  4626 ;;		_EUSART_Receive_ISR
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630                           
  4631                           ;psect for function _EUSART_DefaultFramingErrorHandler
  4632  0509                     _EUSART_DefaultFramingErrorHandler:	
  4633                           
  4634                           ;incstack = 0
  4635                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  4636  0509  0008               	return
  4637  050A                     __end_of_EUSART_DefaultFramingErrorHandler:	
  4638                           
  4639                           	psect	text33
  4640  0504                     __ptext33:	
  4641 ;; *************** function _EUSART_DefaultErrorHandler *****************
  4642 ;; Defined at:
  4643 ;;		line 260 in file "mcc_generated_files/eusart.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4657 ;;      Params:         0       0       0       0       0       0       0       0
  4658 ;;      Locals:         0       0       0       0       0       0       0       0
  4659 ;;      Temps:          0       0       0       0       0       0       0       0
  4660 ;;      Totals:         0       0       0       0       0       0       0       0
  4661 ;;Total ram usage:        0 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    1
  4664 ;; This function calls:
  4665 ;;		_EUSART_RxDataHandler
  4666 ;; This function is called by:
  4667 ;;		_EUSART_Initialize
  4668 ;;		_EUSART_Receive_ISR
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           
  4673                           ;psect for function _EUSART_DefaultErrorHandler
  4674  0504                     _EUSART_DefaultErrorHandler:	
  4675                           
  4676                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
  4677                           
  4678                           ;incstack = 0
  4679                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4680  0504  3184  2423         	fcall	_EUSART_RxDataHandler
  4681  0506  0008               	return
  4682  0507                     __end_of_EUSART_DefaultErrorHandler:	
  4683                           
  4684                           	psect	text34
  4685  0423                     __ptext34:	
  4686 ;; *************** function _EUSART_RxDataHandler *****************
  4687 ;; Defined at:
  4688 ;;		line 240 in file "mcc_generated_files/eusart.c"
  4689 ;; Parameters:    Size  Location     Type
  4690 ;;		None
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;		None
  4693 ;; Return value:  Size  Location     Type
  4694 ;;                  1    wreg      void 
  4695 ;; Registers used:
  4696 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4697 ;; Tracked objects:
  4698 ;;		On entry : 0/0
  4699 ;;		On exit  : 0/0
  4700 ;;		Unchanged: 0/0
  4701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4702 ;;      Params:         0       0       0       0       0       0       0       0
  4703 ;;      Locals:         0       0       0       0       0       0       0       0
  4704 ;;      Temps:          1       0       0       0       0       0       0       0
  4705 ;;      Totals:         1       0       0       0       0       0       0       0
  4706 ;;Total ram usage:        1 bytes
  4707 ;; Hardware stack levels used:    1
  4708 ;; This function calls:
  4709 ;;		Nothing
  4710 ;; This function is called by:
  4711 ;;		_EUSART_Receive_ISR
  4712 ;;		_EUSART_DefaultErrorHandler
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           
  4717                           ;psect for function _EUSART_RxDataHandler
  4718  0423                     _EUSART_RxDataHandler:	
  4719                           
  4720                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
  4721                           
  4722                           ;incstack = 0
  4723                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  4724  0423  0023               	movlb	3	; select bank3
  4725  0424  0819               	movf	25,w	;volatile
  4726  0425  00F0               	movwf	??_EUSART_RxDataHandler
  4727  0426  0877               	movf	_eusartRxHead,w
  4728  0427  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4729  0428  0086               	movwf	6
  4730  0429  0187               	clrf	7
  4731  042A  0870               	movf	??_EUSART_RxDataHandler,w
  4732  042B  0081               	movwf	1
  4733  042C  3001               	movlw	1
  4734  042D  00F0               	movwf	??_EUSART_RxDataHandler
  4735  042E  0870               	movf	??_EUSART_RxDataHandler,w
  4736  042F  07F7               	addwf	_eusartRxHead,f	;volatile
  4737                           
  4738                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4739  0430  3008               	movlw	8
  4740  0431  0277               	subwf	_eusartRxHead,w	;volatile
  4741  0432  1803               	btfsc	3,0
  4742                           
  4743                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
  4744  0433  01F7               	clrf	_eusartRxHead	;volatile
  4745                           
  4746                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
  4747  0434  3001               	movlw	1
  4748  0435  00F0               	movwf	??_EUSART_RxDataHandler
  4749  0436  0870               	movf	??_EUSART_RxDataHandler,w
  4750  0437  0020               	movlb	0	; select bank0
  4751  0438  07BB               	addwf	_eusartRxCount,f	;volatile
  4752  0439  0008               	return
  4753  043A                     __end_of_EUSART_RxDataHandler:	
  4754                           
  4755                           	psect	text35
  4756  02A7                     __ptext35:	
  4757 ;; *************** function _EUSART_Read *****************
  4758 ;; Defined at:
  4759 ;;		line 151 in file "mcc_generated_files/eusart.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;		None
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;  readValue       1    1[COMMON] unsigned char 
  4764 ;; Return value:  Size  Location     Type
  4765 ;;                  1    wreg      unsigned char 
  4766 ;; Registers used:
  4767 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4768 ;; Tracked objects:
  4769 ;;		On entry : 0/0
  4770 ;;		On exit  : 0/0
  4771 ;;		Unchanged: 0/0
  4772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4773 ;;      Params:         0       0       0       0       0       0       0       0
  4774 ;;      Locals:         1       0       0       0       0       0       0       0
  4775 ;;      Temps:          1       0       0       0       0       0       0       0
  4776 ;;      Totals:         2       0       0       0       0       0       0       0
  4777 ;;Total ram usage:        2 bytes
  4778 ;; Hardware stack levels used:    1
  4779 ;; This function calls:
  4780 ;;		Nothing
  4781 ;; This function is called by:
  4782 ;;		_ReceivedMessage
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           
  4787                           ;psect for function _EUSART_Read
  4788  02A7                     _EUSART_Read:	
  4789  02A7                     i1l1474:	
  4790                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  4791                           
  4792                           ;incstack = 0
  4793                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  4794                           
  4795                           
  4796                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  4797  02A7  0020               	movlb	0	; select bank0
  4798  02A8  083B               	movf	_eusartRxCount,w	;volatile
  4799  02A9  1903               	btfsc	3,2
  4800  02AA  2AA7               	goto	i1l1474
  4801                           
  4802                           ;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  4803  02AB  0876               	movf	_eusartRxTail,w	;volatile
  4804  02AC  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  4805  02AD  0086               	movwf	6
  4806  02AE  0187               	clrf	7
  4807  02AF  0801               	movf	1,w
  4808  02B0  00F0               	movwf	??_EUSART_Read
  4809  02B1  0870               	movf	??_EUSART_Read,w
  4810  02B2  00BA               	movwf	_eusartRxLastError	;volatile
  4811                           
  4812                           ;mcc_generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];
  4813  02B3  0876               	movf	_eusartRxTail,w
  4814  02B4  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4815  02B5  0086               	movwf	6
  4816  02B6  0187               	clrf	7
  4817  02B7  0801               	movf	1,w
  4818  02B8  00F0               	movwf	??_EUSART_Read
  4819  02B9  0870               	movf	??_EUSART_Read,w
  4820  02BA  00F1               	movwf	EUSART_Read@readValue
  4821  02BB  3001               	movlw	1
  4822  02BC  00F0               	movwf	??_EUSART_Read
  4823  02BD  0870               	movf	??_EUSART_Read,w
  4824  02BE  07F6               	addwf	_eusartRxTail,f	;volatile
  4825                           
  4826                           ;mcc_generated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  4827  02BF  3008               	movlw	8
  4828  02C0  0276               	subwf	_eusartRxTail,w	;volatile
  4829  02C1  1803               	btfsc	3,0
  4830                           
  4831                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:         eus
      +                          artRxTail = 0;
  4832  02C2  01F6               	clrf	_eusartRxTail	;volatile
  4833                           
  4834                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 0;
  4835  02C3  0021               	movlb	1	; select bank1
  4836  02C4  1291               	bcf	17,5	;volatile
  4837                           
  4838                           ;mcc_generated_files/eusart.c: 167:     eusartRxCount--;
  4839  02C5  3001               	movlw	1
  4840  02C6  0020               	movlb	0	; select bank0
  4841  02C7  02BB               	subwf	_eusartRxCount,f	;volatile
  4842                           
  4843                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.RCIE = 1;
  4844  02C8  0021               	movlb	1	; select bank1
  4845  02C9  1691               	bsf	17,5	;volatile
  4846                           
  4847                           ;mcc_generated_files/eusart.c: 170:     return readValue;
  4848  02CA  0871               	movf	EUSART_Read@readValue,w
  4849  02CB  0008               	return
  4850  02CC                     __end_of_EUSART_Read:	
  4851                           
  4852                           	psect	text36
  4853  0385                     __ptext36:	
  4854 ;; *************** function _EUSART_Transmit_ISR *****************
  4855 ;; Defined at:
  4856 ;;		line 197 in file "mcc_generated_files/eusart.c"
  4857 ;; Parameters:    Size  Location     Type
  4858 ;;		None
  4859 ;; Auto vars:     Size  Location     Type
  4860 ;;		None
  4861 ;; Return value:  Size  Location     Type
  4862 ;;                  1    wreg      void 
  4863 ;; Registers used:
  4864 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4865 ;; Tracked objects:
  4866 ;;		On entry : 0/0
  4867 ;;		On exit  : 0/0
  4868 ;;		Unchanged: 0/0
  4869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4870 ;;      Params:         0       0       0       0       0       0       0       0
  4871 ;;      Locals:         0       0       0       0       0       0       0       0
  4872 ;;      Temps:          1       0       0       0       0       0       0       0
  4873 ;;      Totals:         1       0       0       0       0       0       0       0
  4874 ;;Total ram usage:        1 bytes
  4875 ;; Hardware stack levels used:    1
  4876 ;; This function calls:
  4877 ;;		Nothing
  4878 ;; This function is called by:
  4879 ;;		_EUSART_Initialize
  4880 ;;		_INTERRUPT_InterruptManager
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           
  4885                           ;psect for function _EUSART_Transmit_ISR
  4886  0385                     _EUSART_Transmit_ISR:	
  4887                           
  4888                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  4889                           
  4890                           ;incstack = 0
  4891                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4892  0385  3008               	movlw	8
  4893  0386  0020               	movlb	0	; select bank0
  4894  0387  0267               	subwf	_eusartTxBufferRemaining,w	;volatile
  4895  0388  1803               	skipnc
  4896  0389  2B9F               	goto	i1l106
  4897                           
  4898                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  4899  038A  0878               	movf	_eusartTxTail,w
  4900  038B  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4901  038C  0086               	movwf	6
  4902  038D  0187               	clrf	7
  4903  038E  0801               	movf	1,w
  4904  038F  0023               	movlb	3	; select bank3
  4905  0390  009A               	movwf	26	;volatile
  4906  0391  3001               	movlw	1
  4907  0392  00F0               	movwf	??_EUSART_Transmit_ISR
  4908  0393  0870               	movf	??_EUSART_Transmit_ISR,w
  4909  0394  07F8               	addwf	_eusartTxTail,f	;volatile
  4910                           
  4911                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4912  0395  3008               	movlw	8
  4913  0396  0278               	subwf	_eusartTxTail,w	;volatile
  4914  0397  1803               	btfsc	3,0
  4915                           
  4916                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
  4917  0398  01F8               	clrf	_eusartTxTail	;volatile
  4918                           
  4919                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
  4920  0399  3001               	movlw	1
  4921  039A  00F0               	movwf	??_EUSART_Transmit_ISR
  4922  039B  0870               	movf	??_EUSART_Transmit_ISR,w
  4923  039C  0020               	movlb	0	; select bank0
  4924  039D  07E7               	addwf	_eusartTxBufferRemaining,f	;volatile
  4925                           
  4926                           ;mcc_generated_files/eusart.c: 209:     }
  4927  039E  0008               	return
  4928  039F                     i1l106:	
  4929                           ;mcc_generated_files/eusart.c: 210:     else
  4930                           
  4931                           
  4932                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
  4933  039F  0021               	movlb	1	; select bank1
  4934  03A0  1211               	bcf	17,4	;volatile
  4935  03A1  0008               	return
  4936  03A2                     __end_of_EUSART_Transmit_ISR:	
  4937  007E                     btemp	set	126	;btemp
  4938  007E                     int$flags	set	126
  4939  007E                     wtemp0	set	126


Data Sizes:
    Strings     41
    Constant    20
    Data        25
    BSS         236
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     21      77
    BANK1            80      5      25
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    S520$4$0	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S520$6$0	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), EUSART_Receive_ISR(), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK3[64]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK3[64]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strchr@s	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK3[64]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK3[64]), 

    strstr@h	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK3[64]), 

    strstr@n	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 64
		 -> Storage2(BANK0[9]), Storage(BANK3[64]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> Storage2(BANK0[9]), Storage(BANK3[64]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), ResponseBuffer(BANK2[64]), Storage(BANK3[64]), 

    strcpy@s	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), ResponseBuffer(BANK2[64]), Storage(BANK3[64]), 

    atoi@s	PTR const unsigned char  size(1) Largest target is 3
		 -> Num_Char(BANK0[3]), 

    SML_SendString@command	PTR const unsigned char  size(1) Largest target is 9
		 -> Storage2(BANK0[9]), 

    SendString@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[17]), STR_2(CODE[18]), 

    S520$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    uart.Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    S520$TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    uart.TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S520$TransmitDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    uart.TransmitDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    S520$SetRxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    uart.SetRxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    S520$RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    uart.RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    S520$SetTxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    uart.SetTxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    S520$DataReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    uart.DataReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    S520$TransmitReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    uart.TransmitReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    S520$Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    uart.Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    S520$Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    uart.Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK3[64]), 

    main@s	PTR unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK3[64]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 64
		 -> Storage2(BANK0[9]), Storage(BANK3[64]), 

    sp__GetResponse	PTR unsigned char  size(1) Largest target is 64
		 -> ResponseBuffer(BANK2[64]), 

    rxData	PTR unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), ResponseBuffer(BANK2[64]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), ReceivedMessage(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _main->_ReadyReceiveBuffer
    _main->_blockingWait
    _main->_strcpy
    _strstr->_strchr
    _strstr->_strlen
    _atoi->___wmul
    _atoi->_isdigit
    _atoi->_isspace
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _SML_SendString->_EUSART_Write
    _INIT_SMART_LIGHT->_EUSART_SetRxInterruptHandler
    _SendString->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_ReceivedMessage
    _ReceivedMessage->_EUSART_Read
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_atoi
    _strstr->_strncmp
    _atoi->___wmul
    _atoi->_isdigit
    _SYSTEM_Initialize->_EUSART_Initialize
    _INIT_SMART_LIGHT->_SendString

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    5101
                                             20 BANK0      1     1      0
                                              0 BANK1      5     5      0
                        _GetResponse
                   _INIT_SMART_LIGHT
                 _ReadyReceiveBuffer
                     _SML_SendString
                  _SYSTEM_Initialize
                               _atoi
                       _blockingWait
                             _strcpy
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _strstr                                               8     6      2    1453
                                              8 BANK0      8     6      2
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              9     5      4     541
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _strlen                                               5     3      2     220
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _strchr                                               3     1      2     250
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               8     5      3     397
                                              4 COMMON     2     2      0
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _blockingWait                                         5     3      2     158
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _atoi                                                16    14      2    1275
                                              4 BANK0     16    14      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (2) _isspace                                              5     3      2     259
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              6     4      2     191
                                              4 COMMON     2     0      2
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     316
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     670
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     670
                                              0 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SML_SendString                                       4     2      2     383
                                              0 BANK0      4     2      2
                       _EUSART_Write *
 ---------------------------------------------------------------------------------
 (1) _ReadyReceiveBuffer                                   2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INIT_SMART_LIGHT                                     0     0      0     592
       _EUSART_SetRxInterruptHandler *
                         _SendString
 ---------------------------------------------------------------------------------
 (2) _SendString                                           3     1      2     406
                                              0 BANK0      3     1      2
                       _EUSART_Write *
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     1      1     192
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     186
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _GetResponse                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0      47
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _ReceivedMessage *
 ---------------------------------------------------------------------------------
 (5) _ReceivedMessage                                      2     2      0      47
                                              2 COMMON     2     2      0
                        _EUSART_Read *
                 _EUSART_Receive_ISR *
                 _EUSART_is_rx_ready *
 ---------------------------------------------------------------------------------
 (6) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Read                                          2     2      0      24
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetResponse
   _INIT_SMART_LIGHT
     _EUSART_SetRxInterruptHandler *
     _SendString *
       _EUSART_Write *
   _ReadyReceiveBuffer
   _SML_SendString
     _EUSART_Write *
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   _atoi
     ___wmul
     _isdigit
     _isspace
   _blockingWait
   _strcpy
   _strstr
     _strchr
     _strlen
     _strncmp

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _ReceivedMessage *
     _EUSART_Read *
     _EUSART_Receive_ISR *
       Absolute function(Fake) *
       _EUSART_DefaultErrorHandler *
         _EUSART_RxDataHandler
       _EUSART_DefaultFramingErrorHandler *
       _EUSART_DefaultOverrunErrorHandler *
       _EUSART_RxDataHandler *
     _EUSART_is_rx_ready *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     130       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     15      4D       6       96.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      5      19       8       31.3%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      40      14       80.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     130      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Nov 05 15:59:37 2019

                ?_EUSART_SetRxInterruptHandler 0074                                    __CFG_CP$OFF 0000  
                          ___wmul@multiplicand 004A                                    __CFG_LVP$ON 0000  
                                          l100 02D7                                            l410 03AB  
                                          l339 03C1                                            l936 043C  
                                          _LVL 0068                         ??_EUSART_RxDataHandler 0070  
               ?_EUSART_SetFramingErrorHandler 0074                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                   ?_EUSART_Read 0070  
                                         l2006 048D                                           l2022 0318  
                                         l2110 0108                                           l2040 01FF  
                                         l2034 01E1                                           l2028 01CE  
                                         l2036 01F5                                           l2062 0092  
                                         l2072 00CA                                           l2064 00C6  
                                         l2056 0082                                           l2048 0068  
                                         l2082 00F8                                           l2066 0097  
                                         l2068 00AA                                           l2158 00A2  
                                         l2096 02F0                                           l1912 0368  
                                         l1850 02EB                                           l1836 02CC  
                                         l1916 03A4                                           l1950 0403  
                                         l1936 0343                                           l1970 0180  
                                         l1948 03F7                                           l1976 01AC  
                                         l1968 01A5                                           l1986 0446  
                                         STR_1 04C1                                           STR_2 0478  
                                         STR_3 049C                                           u1200 041C  
                                         u1400 00DE                                           u1145 03AC  
                                         u1305 03C7                                           u1155 03B1  
                                         _LATA 010C                                           u1190 041B  
                                         _LATB 010D                                           _LATC 010E  
                                         _KEY3 00A0                                           _KEY5 00A7  
                                         u1390 00DD                                           u1467 03CD  
                          __end_of_GetResponse 0509                                           _WPUA 020C  
                                         _WPUB 020D                                   __CFG_WRT$OFF 0000  
                                         _atoi 0062                                           _main 00FD  
                                         _uart 0464                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           btemp 007E  
                                __CFG_BOREN$ON 0000                                           start 0021  
                             _INIT_SMART_LIGHT 034B                                ?_SML_SendString 0048  
                                __CFG_MCLRE$ON 0000                                _ReceivedMessage 023F  
                                ?_EUSART_Write 0074                 __size_of_OSCILLATOR_Initialize 0006  
                __end_of_OSCILLATOR_Initialize 04D9                                          ?_atoi 004C  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                                        i1l106 039F                                          i1l160 0014  
                                        i1l165 001F                                          _RCREG 0199  
                                        _RCSTA 019D                                          _RESET 00AE  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          u59_20 04BF  
                                        _TXREG 019A                                          _TXSTA 019E  
                               _WDT_Initialize 04FC                                __end_of_isdigit 0423  
                                        atoi@n 0059                                          atoi@s 005B  
                                        main@s 00B6                                __end_of_isspace 034B  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                                __end_of_strncmp 01BB  
                              __initialization 0023                                   __end_of_atoi 00FD  
                                 __end_of_main 0169                                   __end_of_uart 0478  
                               ??_EUSART_Write 0075                                 __CFG_LPBOR$OFF 0000  
                  ?_INTERRUPT_InterruptManager 0070                           __end_of_blockingWait 03D8  
               ??_EUSART_SetRxInterruptHandler 0076                                         ??_atoi 004E  
                                       ??_main 005C                                    _GetResponse 0507  
                       __end_of_WDT_Initialize 0500      __end_of_EUSART_DefaultFramingErrorHandler 050A  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 0509  
                   _EUSART_OverrunErrorHandler 005F                                         _APFCON 011D  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _ANSELC 018E                     __end_of_EUSART_is_rx_ready 04C1  
                                       _BORCON 0116                                         i1l1502 0288  
                                       i1l1512 02A4                                         i1l1508 0296  
                           _ReadyReceiveBuffer 048A                                         i1l1474 02A7  
                                       i1l1742 0248                                         i1l1744 0256  
                                   _SendString 0368                                         _OSCCON 0099  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097                                 __CFG_PWRTE$OFF 0000  
                      __end_of_ReceivedMessage 0275                            ?_ReadyReceiveBuffer 0070  
                                       ___wmul 03A2                                 __CFG_STVREN$ON 0000  
                          _EUSART_Transmit_ISR 0385                                         _rxData 0038  
                                       _strchr 043A                                         _strcpy 030F  
                                       _strlen 03F2                                         _strstr 01BB  
                                    ??_isdigit 0048                           ??_ReadyReceiveBuffer 0074  
                                    ??_isspace 0048                                ?_WDT_Initialize 0070  
                                    ??_strncmp 0074                           ?_EUSART_Transmit_ISR 0070  
                         __size_of_EUSART_Read 0025                              _SYSTEM_Initialize 04AD  
                      __end_of__initialization 005E                             ?_SYSTEM_Initialize 0070  
         __end_of_EUSART_SetTxInterruptHandler 04DF          __size_of_EUSART_SetTxInterruptHandler 0006  
                 _EUSART_SetTxInterruptHandler 04D9                        ReceivedMessage@readByte 0073  
                               __pcstackCOMMON 0070                                   __pidataBANK0 04F7  
                                 __pidataBANK1 0450                            ??_SYSTEM_Initialize 0076  
                                  _ReadStorage 0220                                 _OPTION_REGbits 0095  
                         _eusartRxStatusBuffer 0020                       __end_of_INIT_SMART_LIGHT 0368  
              ??_EUSART_SetOverrunErrorHandler 0076                              SML_SendString@len 0048  
                    __end_of_SYSTEM_Initialize 04B9                          ??_EUSART_Transmit_ISR 0070  
                               _ResponseBuffer 0120                                     __pbssBANK0 0020  
                                   __pbssBANK2 0120                                     __pbssBANK3 01A0  
                                   __pbssBANK4 0220                                    ?_SendString 0048  
                         __end_of_EUSART_Write 02EE                               ??_SML_SendString 004A  
                  __size_of_EUSART_Receive_ISR 0032                               ?_ReceivedMessage 0070  
                                   __pmaintext 00FD                          __size_of_blockingWait 001A  
                ?_EUSART_SetTxInterruptHandler 0074               _EUSART_TxDefaultInterruptHandler 0065  
                                      ?___wmul 0048                                     __pintentry 0004  
                                      _BAUDCON 019F                   ??_EUSART_DefaultErrorHandler 0071  
                                      ?_strchr 0074                                        ?_strcpy 0048  
                                      ?_strlen 0074                                        ?_strstr 0050  
                                _eusartRxCount 003B                  __size_of_EUSART_RxDataHandler 0017  
                     ??_EUSART_SetErrorHandler 0076                              SendString@command 0048  
                                 _blockingWait 03BE            __size_of_EUSART_DefaultErrorHandler 0003  
                                      _Storage 01A0                                __size_of___wmul 001C  
                          __size_of_SendString 001D                                        __ptext1 01BB  
                                      __ptext2 0169                                        __ptext3 03F2  
                                      __ptext4 043A                                        __ptext5 030F  
                                      __ptext6 03BE                                        __ptext7 0062  
                                      __ptext8 032E                                        __ptext9 040B  
                              __size_of_strchr 0016                                __size_of_strcpy 001F  
                              __size_of_strlen 0019                                __size_of_strstr 0046  
                        _OSCILLATOR_Initialize 04D3                                        _isdigit 040B  
                                 ?_GetResponse 0070                       ??_PIN_MANAGER_Initialize 0074  
                                      _isspace 032E                                        atoi@neg 0052  
                   __size_of_SYSTEM_Initialize 000C                                        clrloop0 04CE  
                                      main@num 00B7                                        _strncmp 0169  
                         end_of_initialization 005E          __end_of_EUSART_SetOverrunErrorHandler 04E5  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 04DF  
                                      init_ram 04C7                                        initloop 04C8  
                            _EUSART_Initialize 0201                             ?_EUSART_Initialize 0070  
                                    _RCSTAbits 019D                             _EUSART_is_rx_ready 04B9  
                           _EUSART_is_tx_ready 0000                                        strchr@c 0074  
                                      strchr@s 0048                                        strcpy@d 004B  
                                      strlen@a 0049                                        strcpy@s 004D  
                                      strlen@s 0074                            ??_EUSART_Initialize 0048  
                             ??_WDT_Initialize 0074                 ??_EUSART_SetTxInterruptHandler 0076  
                                      strstr@h 0057                                        strstr@n 0050  
                          ?_EUSART_is_rx_ready 0070                               __CFG_FOSC$INTOSC 0000  
                        __size_of_EUSART_Write 0022                __size_of_EUSART_SetErrorHandler 0006  
                    __end_of_EUSART_Initialize 023F                           ??_EUSART_is_rx_ready 0070  
                                    _TXSTAbits 019E             __end_of_EUSART_DefaultErrorHandler 0507  
                   _EUSART_DefaultErrorHandler 0504                                 __end_of___wmul 03BE  
                                 _EUSART_Write 02CC                         ?_OSCILLATOR_Initialize 0070  
                               __end_of_strchr 0450                                 __end_of_strcpy 032E  
                               __end_of_strlen 040B                                 __end_of_strstr 0201  
                          start_initialization 0023                    __size_of_ReadyReceiveBuffer 0012  
                            ?_INIT_SMART_LIGHT 0070                __size_of_PIN_MANAGER_Initialize 001A  
                                ??_EUSART_Read 0070   EUSART_SetRxInterruptHandler@interruptHandler 0074  
 EUSART_SetTxInterruptHandler@interruptHandler 0074                             ??_INIT_SMART_LIGHT 0076  
                                 ??_SendString 004A                 ?_EUSART_SetOverrunErrorHandler 0074  
                   _EUSART_FramingErrorHandler 0061                                       ??___wmul 0074  
                       _EUSART_SetErrorHandler 04EB                                    __pdataBANK0 0068  
                                  __pdataBANK1 00A0                                       ??_strchr 0076  
                                     ??_strcpy 0074                                       ??_strlen 0048  
                           __end_of_SendString 0385                                       ??_strstr 0052  
                  __end_of_EUSART_Transmit_ISR 03A2                                    __pbssCOMMON 0076  
                                    ___latbits 0002                                  __pcstackBANK0 0048  
                                __pcstackBANK1 00B4                           __size_of_GetResponse 0002  
                   ReadyReceiveBuffer@position 0075                     __end_of_EUSART_Receive_ISR 02A7  
                   __size_of_EUSART_Initialize 003E               _EUSART_RxDefaultInterruptHandler 0063  
                          __end_of_EUSART_Read 02CC                                  _ResponseIndex 0039  
                                    __pnvBANK0 005D                   __end_of_EUSART_RxDataHandler 043A  
                       _PIN_MANAGER_Initialize 03D8                           EUSART_Read@readValue 0071  
                                 _eusartRxHead 0077                                   _eusartTxHead 0079  
                                 _eusartRxTail 0076                                   _eusartTxTail 0078  
                     __size_of_ReceivedMessage 0036                   ??_INTERRUPT_InterruptManager 0074  
                      _eusartTxBufferRemaining 0067                                       ?_isdigit 0074  
                                     ?_isspace 0074                                       ?_strncmp 0048  
                               _eusartRxBuffer 0028                                 _eusartTxBuffer 0030  
                               ___wmul@product 0074         EUSART_SetErrorHandler@interruptHandler 0074  
                                    clear_ram0 04CD                                       _PIE1bits 0091  
                            _eusartRxLastError 003A                            blockingWait@counter 0049  
          __size_of_INTERRUPT_InterruptManager 001D                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0076                              _EUSART_is_tx_done 0000  
                      __size_of_SML_SendString 0021      __end_of_EUSART_DefaultOverrunErrorHandler 0504  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 0500  
                            ___wmul@multiplier 0048                                    _EUSART_Read 02A7  
                                     _Num_Char 0045                        ??_OSCILLATOR_Initialize 0074  
                          _EUSART_ErrorHandler 005D                    ?_EUSART_DefaultErrorHandler 0070  
                                     _Storage2 003C                                       _atoi$926 0054  
                                     _atoi$927 0058                                       _atoi$928 0056  
                             __size_of_isdigit 0018                              ??_ReceivedMessage 0072  
                         _EUSART_RxDataHandler 0423                               __size_of_isspace 001D  
                                     __ptext10 03A2                                       __ptext11 04AD  
                                     __ptext20 02EE                                       __ptext12 04FC  
                                     __ptext21 048A                                       __ptext13 03D8  
                                     __ptext30 04B9                                       __ptext22 034B  
                                     __ptext14 04D3                                       __ptext31 0500  
                                     __ptext23 0368                                       __ptext15 0201  
                                     __ptext32 0509                                       __ptext24 02CC  
                                     __ptext16 04D9                                       __ptext33 0504  
                                     __ptext25 04F1                                       __ptext17 04DF  
                                     __ptext34 0423                                       __ptext26 0507  
                                     __ptext18 04E5                                       __ptext35 02A7  
                                     __ptext19 04EB                                       __ptext36 0385  
                                     __ptext28 0275                                       __ptext29 023F  
                                   strcpy@dest 0048                               __size_of_strncmp 0052  
                  __size_of_EUSART_is_rx_ready 0008                                  __size_of_atoi 009B  
                                __size_of_main 006C                        ?_EUSART_SetErrorHandler 0074  
                    __size_of_INIT_SMART_LIGHT 001D  EUSART_SetOverrunErrorHandler@interruptHandler 0074  
                        SML_SendString@command 004B                                       int$flags 007E  
           __end_of_INTERRUPT_InterruptManager 0021                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 04EB         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 04E5                                    _isspace$944 004A  
                   __end_of_ReadyReceiveBuffer 049C                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                                       isdigit@c 0074  
                      __size_of_WDT_Initialize 0004                                       intlevel1 0000  
                                ?_blockingWait 0074                                       isspace@c 0074  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 04F1  
                            __CFG_CLKOUTEN$OFF 0000                                      strcpy@src 004A  
                                    strncmp@_l 004C                                      strncmp@_r 0048  
         __end_of_EUSART_SetRxInterruptHandler 04F7          __size_of_EUSART_SetRxInterruptHandler 0006  
                 _EUSART_SetRxInterruptHandler 04F1                              blockingWait@limit 0074  
                               _SML_SendString 02EE                             _EUSART_Receive_ISR 0275  
EUSART_SetFramingErrorHandler@interruptHandler 0074                                  __pstringtext1 0464  
                                __pstringtext2 0478                                  __pstringtext3 049C  
                                __pstringtext4 04C1                                  __pstringtext5 0000  
                          ?_EUSART_Receive_ISR 0070                                  ??_GetResponse 0074  
                                     strncmp@l 004F                                       strncmp@n 004A  
                                     strncmp@r 004D                                       strstr@nl 0055  
                           EUSART_Write@txData 0074                   __size_of_EUSART_Transmit_ISR 001D  
                               ??_blockingWait 0048                 __end_of_PIN_MANAGER_Initialize 03F2  
                         ??_EUSART_Receive_ISR 0071                         __end_of_SML_SendString 030F  
