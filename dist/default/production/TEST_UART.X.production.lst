

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Nov 05 17:17:51 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	cinit,global,class=CODE,merge=1,delta=2
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	inittext,global,class=CODE,delta=2
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    24                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    25                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    26                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text7,local,class=CODE,merge=1,delta=2
    33                           	psect	text8,local,class=CODE,merge=1,delta=2
    34                           	psect	text9,local,class=CODE,merge=1,delta=2
    35                           	psect	text10,local,class=CODE,merge=1,delta=2
    36                           	psect	text11,local,class=CODE,merge=1,delta=2
    37                           	psect	text12,local,class=CODE,merge=1,delta=2
    38                           	psect	text13,local,class=CODE,merge=1,delta=2
    39                           	psect	text14,local,class=CODE,merge=1,delta=2
    40                           	psect	text15,local,class=CODE,merge=1,delta=2
    41                           	psect	text16,local,class=CODE,merge=1,delta=2
    42                           	psect	text17,local,class=CODE,merge=1,delta=2
    43                           	psect	text18,local,class=CODE,merge=1,delta=2
    44                           	psect	text19,local,class=CODE,merge=1,delta=2
    45                           	psect	text20,local,class=CODE,merge=1,delta=2
    46                           	psect	text21,local,class=CODE,merge=1,delta=2
    47                           	psect	text22,local,class=CODE,merge=1,delta=2
    48                           	psect	intentry,global,class=CODE,delta=2
    49                           	psect	text24,local,class=CODE,merge=1,delta=2
    50                           	psect	text25,local,class=CODE,merge=1,delta=2
    51                           	psect	text26,local,class=CODE,merge=1,delta=2
    52                           	psect	text27,local,class=CODE,merge=1,delta=2
    53                           	psect	text28,local,class=CODE,merge=1,delta=2
    54                           	psect	text29,local,class=CODE,merge=1,delta=2
    55                           	psect	text30,local,class=CODE,merge=1,delta=2
    56                           	psect	text31,local,class=CODE,merge=1,delta=2
    57                           	psect	text32,local,class=CODE,merge=1,delta=2
    58                           	dabs	1,0x7E,2
    59  0000                     
    60                           ; Version 2.05
    61                           ; Generated 20/12/2018 GMT
    62                           ; 
    63                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    64                           ; All rights reserved.
    65                           ; 
    66                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    67                           ; 
    68                           ; Redistribution and use in source and binary forms, with or without modification, are
    69                           ; permitted provided that the following conditions are met:
    70                           ; 
    71                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    72                           ;        conditions and the following disclaimer.
    73                           ; 
    74                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    75                           ;        of conditions and the following disclaimer in the documentation and/or other
    76                           ;        materials provided with the distribution.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC16LF1559 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94  0000                     	;# 
    95  0001                     	;# 
    96  0002                     	;# 
    97  0003                     	;# 
    98  0004                     	;# 
    99  0005                     	;# 
   100  0006                     	;# 
   101  0007                     	;# 
   102  0008                     	;# 
   103  0009                     	;# 
   104  000A                     	;# 
   105  000B                     	;# 
   106  000C                     	;# 
   107  000D                     	;# 
   108  000E                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001C                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0095                     	;# 
   126  0096                     	;# 
   127  0097                     	;# 
   128  0099                     	;# 
   129  009A                     	;# 
   130  009B                     	;# 
   131  009B                     	;# 
   132  009C                     	;# 
   133  009D                     	;# 
   134  009E                     	;# 
   135  009F                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  0116                     	;# 
   140  0117                     	;# 
   141  011D                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  018E                     	;# 
   145  0191                     	;# 
   146  0191                     	;# 
   147  0192                     	;# 
   148  0193                     	;# 
   149  0193                     	;# 
   150  0194                     	;# 
   151  0195                     	;# 
   152  0196                     	;# 
   153  0199                     	;# 
   154  019A                     	;# 
   155  019B                     	;# 
   156  019B                     	;# 
   157  019C                     	;# 
   158  019D                     	;# 
   159  019E                     	;# 
   160  019F                     	;# 
   161  020C                     	;# 
   162  020D                     	;# 
   163  0211                     	;# 
   164  0211                     	;# 
   165  0212                     	;# 
   166  0212                     	;# 
   167  0213                     	;# 
   168  0213                     	;# 
   169  0214                     	;# 
   170  0214                     	;# 
   171  0215                     	;# 
   172  0215                     	;# 
   173  0215                     	;# 
   174  0216                     	;# 
   175  0216                     	;# 
   176  0217                     	;# 
   177  0217                     	;# 
   178  0391                     	;# 
   179  0392                     	;# 
   180  0393                     	;# 
   181  0394                     	;# 
   182  0395                     	;# 
   183  0396                     	;# 
   184  0611                     	;# 
   185  0612                     	;# 
   186  0613                     	;# 
   187  0613                     	;# 
   188  0614                     	;# 
   189  0615                     	;# 
   190  0616                     	;# 
   191  0616                     	;# 
   192  0711                     	;# 
   193  0711                     	;# 
   194  0711                     	;# 
   195  0712                     	;# 
   196  0712                     	;# 
   197  0713                     	;# 
   198  0713                     	;# 
   199  0713                     	;# 
   200  0714                     	;# 
   201  0714                     	;# 
   202  0714                     	;# 
   203  0715                     	;# 
   204  0715                     	;# 
   205  0716                     	;# 
   206  0716                     	;# 
   207  0716                     	;# 
   208  0716                     	;# 
   209  0717                     	;# 
   210  0717                     	;# 
   211  0717                     	;# 
   212  0717                     	;# 
   213  0718                     	;# 
   214  0718                     	;# 
   215  0718                     	;# 
   216  0719                     	;# 
   217  0719                     	;# 
   218  0719                     	;# 
   219  0719                     	;# 
   220  071A                     	;# 
   221  071A                     	;# 
   222  071A                     	;# 
   223  071A                     	;# 
   224  071A                     	;# 
   225  071B                     	;# 
   226  071B                     	;# 
   227  071C                     	;# 
   228  071C                     	;# 
   229  071C                     	;# 
   230  071C                     	;# 
   231  071C                     	;# 
   232  071D                     	;# 
   233  071D                     	;# 
   234  071E                     	;# 
   235  071E                     	;# 
   236  0791                     	;# 
   237  0791                     	;# 
   238  0793                     	;# 
   239  0793                     	;# 
   240  0794                     	;# 
   241  0794                     	;# 
   242  0796                     	;# 
   243  0796                     	;# 
   244  0796                     	;# 
   245  0797                     	;# 
   246  0797                     	;# 
   247  0797                     	;# 
   248  0798                     	;# 
   249  0798                     	;# 
   250  0799                     	;# 
   251  0799                     	;# 
   252  0799                     	;# 
   253  079A                     	;# 
   254  079A                     	;# 
   255  079A                     	;# 
   256  079B                     	;# 
   257  079C                     	;# 
   258  079C                     	;# 
   259  079C                     	;# 
   260  079D                     	;# 
   261  079E                     	;# 
   262  079E                     	;# 
   263  0F8C                     	;# 
   264  0F8D                     	;# 
   265  0F91                     	;# 
   266  0F96                     	;# 
   267  0F97                     	;# 
   268  0F9C                     	;# 
   269  0F9D                     	;# 
   270  0F9E                     	;# 
   271  0FE3                     	;# 
   272  0FE4                     	;# 
   273  0FE5                     	;# 
   274  0FE6                     	;# 
   275  0FE7                     	;# 
   276  0FE8                     	;# 
   277  0FE9                     	;# 
   278  0FEA                     	;# 
   279  0FEB                     	;# 
   280  0FED                     	;# 
   281  0FEE                     	;# 
   282  0FEF                     	;# 
   283  0000                     	;# 
   284  0001                     	;# 
   285  0002                     	;# 
   286  0003                     	;# 
   287  0004                     	;# 
   288  0005                     	;# 
   289  0006                     	;# 
   290  0007                     	;# 
   291  0008                     	;# 
   292  0009                     	;# 
   293  000A                     	;# 
   294  000B                     	;# 
   295  000C                     	;# 
   296  000D                     	;# 
   297  000E                     	;# 
   298  0011                     	;# 
   299  0012                     	;# 
   300  0015                     	;# 
   301  0016                     	;# 
   302  0016                     	;# 
   303  0017                     	;# 
   304  0018                     	;# 
   305  0019                     	;# 
   306  001A                     	;# 
   307  001B                     	;# 
   308  001C                     	;# 
   309  008C                     	;# 
   310  008D                     	;# 
   311  008E                     	;# 
   312  0091                     	;# 
   313  0092                     	;# 
   314  0095                     	;# 
   315  0096                     	;# 
   316  0097                     	;# 
   317  0099                     	;# 
   318  009A                     	;# 
   319  009B                     	;# 
   320  009B                     	;# 
   321  009C                     	;# 
   322  009D                     	;# 
   323  009E                     	;# 
   324  009F                     	;# 
   325  010C                     	;# 
   326  010D                     	;# 
   327  010E                     	;# 
   328  0116                     	;# 
   329  0117                     	;# 
   330  011D                     	;# 
   331  018C                     	;# 
   332  018D                     	;# 
   333  018E                     	;# 
   334  0191                     	;# 
   335  0191                     	;# 
   336  0192                     	;# 
   337  0193                     	;# 
   338  0193                     	;# 
   339  0194                     	;# 
   340  0195                     	;# 
   341  0196                     	;# 
   342  0199                     	;# 
   343  019A                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020C                     	;# 
   351  020D                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0391                     	;# 
   368  0392                     	;# 
   369  0393                     	;# 
   370  0394                     	;# 
   371  0395                     	;# 
   372  0396                     	;# 
   373  0611                     	;# 
   374  0612                     	;# 
   375  0613                     	;# 
   376  0613                     	;# 
   377  0614                     	;# 
   378  0615                     	;# 
   379  0616                     	;# 
   380  0616                     	;# 
   381  0711                     	;# 
   382  0711                     	;# 
   383  0711                     	;# 
   384  0712                     	;# 
   385  0712                     	;# 
   386  0713                     	;# 
   387  0713                     	;# 
   388  0713                     	;# 
   389  0714                     	;# 
   390  0714                     	;# 
   391  0714                     	;# 
   392  0715                     	;# 
   393  0715                     	;# 
   394  0716                     	;# 
   395  0716                     	;# 
   396  0716                     	;# 
   397  0716                     	;# 
   398  0717                     	;# 
   399  0717                     	;# 
   400  0717                     	;# 
   401  0717                     	;# 
   402  0718                     	;# 
   403  0718                     	;# 
   404  0718                     	;# 
   405  0719                     	;# 
   406  0719                     	;# 
   407  0719                     	;# 
   408  0719                     	;# 
   409  071A                     	;# 
   410  071A                     	;# 
   411  071A                     	;# 
   412  071A                     	;# 
   413  071A                     	;# 
   414  071B                     	;# 
   415  071B                     	;# 
   416  071C                     	;# 
   417  071C                     	;# 
   418  071C                     	;# 
   419  071C                     	;# 
   420  071C                     	;# 
   421  071D                     	;# 
   422  071D                     	;# 
   423  071E                     	;# 
   424  071E                     	;# 
   425  0791                     	;# 
   426  0791                     	;# 
   427  0793                     	;# 
   428  0793                     	;# 
   429  0794                     	;# 
   430  0794                     	;# 
   431  0796                     	;# 
   432  0796                     	;# 
   433  0796                     	;# 
   434  0797                     	;# 
   435  0797                     	;# 
   436  0797                     	;# 
   437  0798                     	;# 
   438  0798                     	;# 
   439  0799                     	;# 
   440  0799                     	;# 
   441  0799                     	;# 
   442  079A                     	;# 
   443  079A                     	;# 
   444  079A                     	;# 
   445  079B                     	;# 
   446  079C                     	;# 
   447  079C                     	;# 
   448  079C                     	;# 
   449  079D                     	;# 
   450  079E                     	;# 
   451  079E                     	;# 
   452  0F8C                     	;# 
   453  0F8D                     	;# 
   454  0F91                     	;# 
   455  0F96                     	;# 
   456  0F97                     	;# 
   457  0F9C                     	;# 
   458  0F9D                     	;# 
   459  0F9E                     	;# 
   460  0FE3                     	;# 
   461  0FE4                     	;# 
   462  0FE5                     	;# 
   463  0FE6                     	;# 
   464  0FE7                     	;# 
   465  0FE8                     	;# 
   466  0FE9                     	;# 
   467  0FEA                     	;# 
   468  0FEB                     	;# 
   469  0FED                     	;# 
   470  0FEE                     	;# 
   471  0FEF                     	;# 
   472  0000                     	;# 
   473  0001                     	;# 
   474  0002                     	;# 
   475  0003                     	;# 
   476  0004                     	;# 
   477  0005                     	;# 
   478  0006                     	;# 
   479  0007                     	;# 
   480  0008                     	;# 
   481  0009                     	;# 
   482  000A                     	;# 
   483  000B                     	;# 
   484  000C                     	;# 
   485  000D                     	;# 
   486  000E                     	;# 
   487  0011                     	;# 
   488  0012                     	;# 
   489  0015                     	;# 
   490  0016                     	;# 
   491  0016                     	;# 
   492  0017                     	;# 
   493  0018                     	;# 
   494  0019                     	;# 
   495  001A                     	;# 
   496  001B                     	;# 
   497  001C                     	;# 
   498  008C                     	;# 
   499  008D                     	;# 
   500  008E                     	;# 
   501  0091                     	;# 
   502  0092                     	;# 
   503  0095                     	;# 
   504  0096                     	;# 
   505  0097                     	;# 
   506  0099                     	;# 
   507  009A                     	;# 
   508  009B                     	;# 
   509  009B                     	;# 
   510  009C                     	;# 
   511  009D                     	;# 
   512  009E                     	;# 
   513  009F                     	;# 
   514  010C                     	;# 
   515  010D                     	;# 
   516  010E                     	;# 
   517  0116                     	;# 
   518  0117                     	;# 
   519  011D                     	;# 
   520  018C                     	;# 
   521  018D                     	;# 
   522  018E                     	;# 
   523  0191                     	;# 
   524  0191                     	;# 
   525  0192                     	;# 
   526  0193                     	;# 
   527  0193                     	;# 
   528  0194                     	;# 
   529  0195                     	;# 
   530  0196                     	;# 
   531  0199                     	;# 
   532  019A                     	;# 
   533  019B                     	;# 
   534  019B                     	;# 
   535  019C                     	;# 
   536  019D                     	;# 
   537  019E                     	;# 
   538  019F                     	;# 
   539  020C                     	;# 
   540  020D                     	;# 
   541  0211                     	;# 
   542  0211                     	;# 
   543  0212                     	;# 
   544  0212                     	;# 
   545  0213                     	;# 
   546  0213                     	;# 
   547  0214                     	;# 
   548  0214                     	;# 
   549  0215                     	;# 
   550  0215                     	;# 
   551  0215                     	;# 
   552  0216                     	;# 
   553  0216                     	;# 
   554  0217                     	;# 
   555  0217                     	;# 
   556  0391                     	;# 
   557  0392                     	;# 
   558  0393                     	;# 
   559  0394                     	;# 
   560  0395                     	;# 
   561  0396                     	;# 
   562  0611                     	;# 
   563  0612                     	;# 
   564  0613                     	;# 
   565  0613                     	;# 
   566  0614                     	;# 
   567  0615                     	;# 
   568  0616                     	;# 
   569  0616                     	;# 
   570  0711                     	;# 
   571  0711                     	;# 
   572  0711                     	;# 
   573  0712                     	;# 
   574  0712                     	;# 
   575  0713                     	;# 
   576  0713                     	;# 
   577  0713                     	;# 
   578  0714                     	;# 
   579  0714                     	;# 
   580  0714                     	;# 
   581  0715                     	;# 
   582  0715                     	;# 
   583  0716                     	;# 
   584  0716                     	;# 
   585  0716                     	;# 
   586  0716                     	;# 
   587  0717                     	;# 
   588  0717                     	;# 
   589  0717                     	;# 
   590  0717                     	;# 
   591  0718                     	;# 
   592  0718                     	;# 
   593  0718                     	;# 
   594  0719                     	;# 
   595  0719                     	;# 
   596  0719                     	;# 
   597  0719                     	;# 
   598  071A                     	;# 
   599  071A                     	;# 
   600  071A                     	;# 
   601  071A                     	;# 
   602  071A                     	;# 
   603  071B                     	;# 
   604  071B                     	;# 
   605  071C                     	;# 
   606  071C                     	;# 
   607  071C                     	;# 
   608  071C                     	;# 
   609  071C                     	;# 
   610  071D                     	;# 
   611  071D                     	;# 
   612  071E                     	;# 
   613  071E                     	;# 
   614  0791                     	;# 
   615  0791                     	;# 
   616  0793                     	;# 
   617  0793                     	;# 
   618  0794                     	;# 
   619  0794                     	;# 
   620  0796                     	;# 
   621  0796                     	;# 
   622  0796                     	;# 
   623  0797                     	;# 
   624  0797                     	;# 
   625  0797                     	;# 
   626  0798                     	;# 
   627  0798                     	;# 
   628  0799                     	;# 
   629  0799                     	;# 
   630  0799                     	;# 
   631  079A                     	;# 
   632  079A                     	;# 
   633  079A                     	;# 
   634  079B                     	;# 
   635  079C                     	;# 
   636  079C                     	;# 
   637  079C                     	;# 
   638  079D                     	;# 
   639  079E                     	;# 
   640  079E                     	;# 
   641  0F8C                     	;# 
   642  0F8D                     	;# 
   643  0F91                     	;# 
   644  0F96                     	;# 
   645  0F97                     	;# 
   646  0F9C                     	;# 
   647  0F9D                     	;# 
   648  0F9E                     	;# 
   649  0FE3                     	;# 
   650  0FE4                     	;# 
   651  0FE5                     	;# 
   652  0FE6                     	;# 
   653  0FE7                     	;# 
   654  0FE8                     	;# 
   655  0FE9                     	;# 
   656  0FEA                     	;# 
   657  0FEB                     	;# 
   658  0FED                     	;# 
   659  0FEE                     	;# 
   660  0FEF                     	;# 
   661  0000                     	;# 
   662  0001                     	;# 
   663  0002                     	;# 
   664  0003                     	;# 
   665  0004                     	;# 
   666  0005                     	;# 
   667  0006                     	;# 
   668  0007                     	;# 
   669  0008                     	;# 
   670  0009                     	;# 
   671  000A                     	;# 
   672  000B                     	;# 
   673  000C                     	;# 
   674  000D                     	;# 
   675  000E                     	;# 
   676  0011                     	;# 
   677  0012                     	;# 
   678  0015                     	;# 
   679  0016                     	;# 
   680  0016                     	;# 
   681  0017                     	;# 
   682  0018                     	;# 
   683  0019                     	;# 
   684  001A                     	;# 
   685  001B                     	;# 
   686  001C                     	;# 
   687  008C                     	;# 
   688  008D                     	;# 
   689  008E                     	;# 
   690  0091                     	;# 
   691  0092                     	;# 
   692  0095                     	;# 
   693  0096                     	;# 
   694  0097                     	;# 
   695  0099                     	;# 
   696  009A                     	;# 
   697  009B                     	;# 
   698  009B                     	;# 
   699  009C                     	;# 
   700  009D                     	;# 
   701  009E                     	;# 
   702  009F                     	;# 
   703  010C                     	;# 
   704  010D                     	;# 
   705  010E                     	;# 
   706  0116                     	;# 
   707  0117                     	;# 
   708  011D                     	;# 
   709  018C                     	;# 
   710  018D                     	;# 
   711  018E                     	;# 
   712  0191                     	;# 
   713  0191                     	;# 
   714  0192                     	;# 
   715  0193                     	;# 
   716  0193                     	;# 
   717  0194                     	;# 
   718  0195                     	;# 
   719  0196                     	;# 
   720  0199                     	;# 
   721  019A                     	;# 
   722  019B                     	;# 
   723  019B                     	;# 
   724  019C                     	;# 
   725  019D                     	;# 
   726  019E                     	;# 
   727  019F                     	;# 
   728  020C                     	;# 
   729  020D                     	;# 
   730  0211                     	;# 
   731  0211                     	;# 
   732  0212                     	;# 
   733  0212                     	;# 
   734  0213                     	;# 
   735  0213                     	;# 
   736  0214                     	;# 
   737  0214                     	;# 
   738  0215                     	;# 
   739  0215                     	;# 
   740  0215                     	;# 
   741  0216                     	;# 
   742  0216                     	;# 
   743  0217                     	;# 
   744  0217                     	;# 
   745  0391                     	;# 
   746  0392                     	;# 
   747  0393                     	;# 
   748  0394                     	;# 
   749  0395                     	;# 
   750  0396                     	;# 
   751  0611                     	;# 
   752  0612                     	;# 
   753  0613                     	;# 
   754  0613                     	;# 
   755  0614                     	;# 
   756  0615                     	;# 
   757  0616                     	;# 
   758  0616                     	;# 
   759  0711                     	;# 
   760  0711                     	;# 
   761  0711                     	;# 
   762  0712                     	;# 
   763  0712                     	;# 
   764  0713                     	;# 
   765  0713                     	;# 
   766  0713                     	;# 
   767  0714                     	;# 
   768  0714                     	;# 
   769  0714                     	;# 
   770  0715                     	;# 
   771  0715                     	;# 
   772  0716                     	;# 
   773  0716                     	;# 
   774  0716                     	;# 
   775  0716                     	;# 
   776  0717                     	;# 
   777  0717                     	;# 
   778  0717                     	;# 
   779  0717                     	;# 
   780  0718                     	;# 
   781  0718                     	;# 
   782  0718                     	;# 
   783  0719                     	;# 
   784  0719                     	;# 
   785  0719                     	;# 
   786  0719                     	;# 
   787  071A                     	;# 
   788  071A                     	;# 
   789  071A                     	;# 
   790  071A                     	;# 
   791  071A                     	;# 
   792  071B                     	;# 
   793  071B                     	;# 
   794  071C                     	;# 
   795  071C                     	;# 
   796  071C                     	;# 
   797  071C                     	;# 
   798  071C                     	;# 
   799  071D                     	;# 
   800  071D                     	;# 
   801  071E                     	;# 
   802  071E                     	;# 
   803  0791                     	;# 
   804  0791                     	;# 
   805  0793                     	;# 
   806  0793                     	;# 
   807  0794                     	;# 
   808  0794                     	;# 
   809  0796                     	;# 
   810  0796                     	;# 
   811  0796                     	;# 
   812  0797                     	;# 
   813  0797                     	;# 
   814  0797                     	;# 
   815  0798                     	;# 
   816  0798                     	;# 
   817  0799                     	;# 
   818  0799                     	;# 
   819  0799                     	;# 
   820  079A                     	;# 
   821  079A                     	;# 
   822  079A                     	;# 
   823  079B                     	;# 
   824  079C                     	;# 
   825  079C                     	;# 
   826  079C                     	;# 
   827  079D                     	;# 
   828  079E                     	;# 
   829  079E                     	;# 
   830  0F8C                     	;# 
   831  0F8D                     	;# 
   832  0F91                     	;# 
   833  0F96                     	;# 
   834  0F97                     	;# 
   835  0F9C                     	;# 
   836  0F9D                     	;# 
   837  0F9E                     	;# 
   838  0FE3                     	;# 
   839  0FE4                     	;# 
   840  0FE5                     	;# 
   841  0FE6                     	;# 
   842  0FE7                     	;# 
   843  0FE8                     	;# 
   844  0FE9                     	;# 
   845  0FEA                     	;# 
   846  0FEB                     	;# 
   847  0FED                     	;# 
   848  0FEE                     	;# 
   849  0FEF                     	;# 
   850  0000                     	;# 
   851  0001                     	;# 
   852  0002                     	;# 
   853  0003                     	;# 
   854  0004                     	;# 
   855  0005                     	;# 
   856  0006                     	;# 
   857  0007                     	;# 
   858  0008                     	;# 
   859  0009                     	;# 
   860  000A                     	;# 
   861  000B                     	;# 
   862  000C                     	;# 
   863  000D                     	;# 
   864  000E                     	;# 
   865  0011                     	;# 
   866  0012                     	;# 
   867  0015                     	;# 
   868  0016                     	;# 
   869  0016                     	;# 
   870  0017                     	;# 
   871  0018                     	;# 
   872  0019                     	;# 
   873  001A                     	;# 
   874  001B                     	;# 
   875  001C                     	;# 
   876  008C                     	;# 
   877  008D                     	;# 
   878  008E                     	;# 
   879  0091                     	;# 
   880  0092                     	;# 
   881  0095                     	;# 
   882  0096                     	;# 
   883  0097                     	;# 
   884  0099                     	;# 
   885  009A                     	;# 
   886  009B                     	;# 
   887  009B                     	;# 
   888  009C                     	;# 
   889  009D                     	;# 
   890  009E                     	;# 
   891  009F                     	;# 
   892  010C                     	;# 
   893  010D                     	;# 
   894  010E                     	;# 
   895  0116                     	;# 
   896  0117                     	;# 
   897  011D                     	;# 
   898  018C                     	;# 
   899  018D                     	;# 
   900  018E                     	;# 
   901  0191                     	;# 
   902  0191                     	;# 
   903  0192                     	;# 
   904  0193                     	;# 
   905  0193                     	;# 
   906  0194                     	;# 
   907  0195                     	;# 
   908  0196                     	;# 
   909  0199                     	;# 
   910  019A                     	;# 
   911  019B                     	;# 
   912  019B                     	;# 
   913  019C                     	;# 
   914  019D                     	;# 
   915  019E                     	;# 
   916  019F                     	;# 
   917  020C                     	;# 
   918  020D                     	;# 
   919  0211                     	;# 
   920  0211                     	;# 
   921  0212                     	;# 
   922  0212                     	;# 
   923  0213                     	;# 
   924  0213                     	;# 
   925  0214                     	;# 
   926  0214                     	;# 
   927  0215                     	;# 
   928  0215                     	;# 
   929  0215                     	;# 
   930  0216                     	;# 
   931  0216                     	;# 
   932  0217                     	;# 
   933  0217                     	;# 
   934  0391                     	;# 
   935  0392                     	;# 
   936  0393                     	;# 
   937  0394                     	;# 
   938  0395                     	;# 
   939  0396                     	;# 
   940  0611                     	;# 
   941  0612                     	;# 
   942  0613                     	;# 
   943  0613                     	;# 
   944  0614                     	;# 
   945  0615                     	;# 
   946  0616                     	;# 
   947  0616                     	;# 
   948  0711                     	;# 
   949  0711                     	;# 
   950  0711                     	;# 
   951  0712                     	;# 
   952  0712                     	;# 
   953  0713                     	;# 
   954  0713                     	;# 
   955  0713                     	;# 
   956  0714                     	;# 
   957  0714                     	;# 
   958  0714                     	;# 
   959  0715                     	;# 
   960  0715                     	;# 
   961  0716                     	;# 
   962  0716                     	;# 
   963  0716                     	;# 
   964  0716                     	;# 
   965  0717                     	;# 
   966  0717                     	;# 
   967  0717                     	;# 
   968  0717                     	;# 
   969  0718                     	;# 
   970  0718                     	;# 
   971  0718                     	;# 
   972  0719                     	;# 
   973  0719                     	;# 
   974  0719                     	;# 
   975  0719                     	;# 
   976  071A                     	;# 
   977  071A                     	;# 
   978  071A                     	;# 
   979  071A                     	;# 
   980  071A                     	;# 
   981  071B                     	;# 
   982  071B                     	;# 
   983  071C                     	;# 
   984  071C                     	;# 
   985  071C                     	;# 
   986  071C                     	;# 
   987  071C                     	;# 
   988  071D                     	;# 
   989  071D                     	;# 
   990  071E                     	;# 
   991  071E                     	;# 
   992  0791                     	;# 
   993  0791                     	;# 
   994  0793                     	;# 
   995  0793                     	;# 
   996  0794                     	;# 
   997  0794                     	;# 
   998  0796                     	;# 
   999  0796                     	;# 
  1000  0796                     	;# 
  1001  0797                     	;# 
  1002  0797                     	;# 
  1003  0797                     	;# 
  1004  0798                     	;# 
  1005  0798                     	;# 
  1006  0799                     	;# 
  1007  0799                     	;# 
  1008  0799                     	;# 
  1009  079A                     	;# 
  1010  079A                     	;# 
  1011  079A                     	;# 
  1012  079B                     	;# 
  1013  079C                     	;# 
  1014  079C                     	;# 
  1015  079C                     	;# 
  1016  079D                     	;# 
  1017  079E                     	;# 
  1018  079E                     	;# 
  1019  0F8C                     	;# 
  1020  0F8D                     	;# 
  1021  0F91                     	;# 
  1022  0F96                     	;# 
  1023  0F97                     	;# 
  1024  0F9C                     	;# 
  1025  0F9D                     	;# 
  1026  0F9E                     	;# 
  1027  0FE3                     	;# 
  1028  0FE4                     	;# 
  1029  0FE5                     	;# 
  1030  0FE6                     	;# 
  1031  0FE7                     	;# 
  1032  0FE8                     	;# 
  1033  0FE9                     	;# 
  1034  0FEA                     	;# 
  1035  0FEB                     	;# 
  1036  0FED                     	;# 
  1037  0FEE                     	;# 
  1038  0FEF                     	;# 
  1039  0000                     	;# 
  1040  0001                     	;# 
  1041  0002                     	;# 
  1042  0003                     	;# 
  1043  0004                     	;# 
  1044  0005                     	;# 
  1045  0006                     	;# 
  1046  0007                     	;# 
  1047  0008                     	;# 
  1048  0009                     	;# 
  1049  000A                     	;# 
  1050  000B                     	;# 
  1051  000C                     	;# 
  1052  000D                     	;# 
  1053  000E                     	;# 
  1054  0011                     	;# 
  1055  0012                     	;# 
  1056  0015                     	;# 
  1057  0016                     	;# 
  1058  0016                     	;# 
  1059  0017                     	;# 
  1060  0018                     	;# 
  1061  0019                     	;# 
  1062  001A                     	;# 
  1063  001B                     	;# 
  1064  001C                     	;# 
  1065  008C                     	;# 
  1066  008D                     	;# 
  1067  008E                     	;# 
  1068  0091                     	;# 
  1069  0092                     	;# 
  1070  0095                     	;# 
  1071  0096                     	;# 
  1072  0097                     	;# 
  1073  0099                     	;# 
  1074  009A                     	;# 
  1075  009B                     	;# 
  1076  009B                     	;# 
  1077  009C                     	;# 
  1078  009D                     	;# 
  1079  009E                     	;# 
  1080  009F                     	;# 
  1081  010C                     	;# 
  1082  010D                     	;# 
  1083  010E                     	;# 
  1084  0116                     	;# 
  1085  0117                     	;# 
  1086  011D                     	;# 
  1087  018C                     	;# 
  1088  018D                     	;# 
  1089  018E                     	;# 
  1090  0191                     	;# 
  1091  0191                     	;# 
  1092  0192                     	;# 
  1093  0193                     	;# 
  1094  0193                     	;# 
  1095  0194                     	;# 
  1096  0195                     	;# 
  1097  0196                     	;# 
  1098  0199                     	;# 
  1099  019A                     	;# 
  1100  019B                     	;# 
  1101  019B                     	;# 
  1102  019C                     	;# 
  1103  019D                     	;# 
  1104  019E                     	;# 
  1105  019F                     	;# 
  1106  020C                     	;# 
  1107  020D                     	;# 
  1108  0211                     	;# 
  1109  0211                     	;# 
  1110  0212                     	;# 
  1111  0212                     	;# 
  1112  0213                     	;# 
  1113  0213                     	;# 
  1114  0214                     	;# 
  1115  0214                     	;# 
  1116  0215                     	;# 
  1117  0215                     	;# 
  1118  0215                     	;# 
  1119  0216                     	;# 
  1120  0216                     	;# 
  1121  0217                     	;# 
  1122  0217                     	;# 
  1123  0391                     	;# 
  1124  0392                     	;# 
  1125  0393                     	;# 
  1126  0394                     	;# 
  1127  0395                     	;# 
  1128  0396                     	;# 
  1129  0611                     	;# 
  1130  0612                     	;# 
  1131  0613                     	;# 
  1132  0613                     	;# 
  1133  0614                     	;# 
  1134  0615                     	;# 
  1135  0616                     	;# 
  1136  0616                     	;# 
  1137  0711                     	;# 
  1138  0711                     	;# 
  1139  0711                     	;# 
  1140  0712                     	;# 
  1141  0712                     	;# 
  1142  0713                     	;# 
  1143  0713                     	;# 
  1144  0713                     	;# 
  1145  0714                     	;# 
  1146  0714                     	;# 
  1147  0714                     	;# 
  1148  0715                     	;# 
  1149  0715                     	;# 
  1150  0716                     	;# 
  1151  0716                     	;# 
  1152  0716                     	;# 
  1153  0716                     	;# 
  1154  0717                     	;# 
  1155  0717                     	;# 
  1156  0717                     	;# 
  1157  0717                     	;# 
  1158  0718                     	;# 
  1159  0718                     	;# 
  1160  0718                     	;# 
  1161  0719                     	;# 
  1162  0719                     	;# 
  1163  0719                     	;# 
  1164  0719                     	;# 
  1165  071A                     	;# 
  1166  071A                     	;# 
  1167  071A                     	;# 
  1168  071A                     	;# 
  1169  071A                     	;# 
  1170  071B                     	;# 
  1171  071B                     	;# 
  1172  071C                     	;# 
  1173  071C                     	;# 
  1174  071C                     	;# 
  1175  071C                     	;# 
  1176  071C                     	;# 
  1177  071D                     	;# 
  1178  071D                     	;# 
  1179  071E                     	;# 
  1180  071E                     	;# 
  1181  0791                     	;# 
  1182  0791                     	;# 
  1183  0793                     	;# 
  1184  0793                     	;# 
  1185  0794                     	;# 
  1186  0794                     	;# 
  1187  0796                     	;# 
  1188  0796                     	;# 
  1189  0796                     	;# 
  1190  0797                     	;# 
  1191  0797                     	;# 
  1192  0797                     	;# 
  1193  0798                     	;# 
  1194  0798                     	;# 
  1195  0799                     	;# 
  1196  0799                     	;# 
  1197  0799                     	;# 
  1198  079A                     	;# 
  1199  079A                     	;# 
  1200  079A                     	;# 
  1201  079B                     	;# 
  1202  079C                     	;# 
  1203  079C                     	;# 
  1204  079C                     	;# 
  1205  079D                     	;# 
  1206  079E                     	;# 
  1207  079E                     	;# 
  1208  0F8C                     	;# 
  1209  0F8D                     	;# 
  1210  0F91                     	;# 
  1211  0F96                     	;# 
  1212  0F97                     	;# 
  1213  0F9C                     	;# 
  1214  0F9D                     	;# 
  1215  0F9E                     	;# 
  1216  0FE3                     	;# 
  1217  0FE4                     	;# 
  1218  0FE5                     	;# 
  1219  0FE6                     	;# 
  1220  0FE7                     	;# 
  1221  0FE8                     	;# 
  1222  0FE9                     	;# 
  1223  0FEA                     	;# 
  1224  0FEB                     	;# 
  1225  0FED                     	;# 
  1226  0FEE                     	;# 
  1227  0FEF                     	;# 
  1228                           
  1229 ;; Function _EUSART_is_tx_ready is unused but had its address taken
  1230  0000                     
  1231 ;; Function _EUSART_is_tx_done is unused but had its address taken
  1232  0000                     
  1233                           	psect	idataBANK0
  1234  0441                     __pidataBANK0:	
  1235                           
  1236                           ;initializer for _RESET
  1237  0441  34FE               	retlw	254
  1238  0442  3401               	retlw	1
  1239  0443  3441               	retlw	65
  1240  0444  3400               	retlw	0
  1241  0445  3400               	retlw	0
  1242  0446  3440               	retlw	64
  1243                           
  1244                           ;initializer for _LVL
  1245  0447  344C               	retlw	76
  1246  0448  3445               	retlw	69
  1247  0449  3456               	retlw	86
  1248  044A  3445               	retlw	69
  1249  044B  344C               	retlw	76
  1250                           
  1251                           	psect	idataBANK1
  1252  0427                     __pidataBANK1:	
  1253                           
  1254                           ;initializer for _KEY3
  1255  0427  34FE               	retlw	254
  1256  0428  3402               	retlw	2
  1257  0429  3427               	retlw	39
  1258  042A  3407               	retlw	7
  1259  042B  3404               	retlw	4
  1260  042C  3401               	retlw	1
  1261  042D  3427               	retlw	39
  1262                           
  1263                           ;initializer for _KEY5
  1264  042E  34FE               	retlw	254
  1265  042F  3402               	retlw	2
  1266  0430  3427               	retlw	39
  1267  0431  3407               	retlw	7
  1268  0432  3410               	retlw	16
  1269  0433  3401               	retlw	1
  1270  0434  3433               	retlw	51
  1271                           
  1272                           	psect	stringtext1
  1273  03DF                     __pstringtext1:	
  1274  03DF                     _uart:	
  1275  03DF  34C7               	retlw	low _EUSART_Read
  1276  03E0  3402               	retlw	high _EUSART_Read
  1277  03E1  34EC               	retlw	low _EUSART_Write
  1278  03E2  3402               	retlw	high _EUSART_Write
  1279  03E3  3400               	retlw	0
  1280  03E4  3400               	retlw	0
  1281  03E5  344C               	retlw	low _EUSART_is_rx_ready
  1282  03E6  3404               	retlw	high _EUSART_is_rx_ready
  1283  03E7  346C               	retlw	low _EUSART_SetTxInterruptHandler
  1284  03E8  3404               	retlw	high _EUSART_SetTxInterruptHandler
  1285  03E9  3470               	retlw	low _EUSART_Receive_ISR
  1286  03EA  3402               	retlw	high _EUSART_Receive_ISR
  1287  03EB  3484               	retlw	low _EUSART_SetRxInterruptHandler
  1288  03EC  3404               	retlw	high _EUSART_SetRxInterruptHandler
  1289  03ED  3400               	retlw	0
  1290  03EE  3400               	retlw	0
  1291  03EF  3448               	retlw	low _EUSART_Transmit_ISR
  1292  03F0  3403               	retlw	high _EUSART_Transmit_ISR
  1293  03F1  34FD               	retlw	low _EUSART_Initialize
  1294  03F2  3401               	retlw	high _EUSART_Initialize
  1295  03F3                     __end_of_uart:	
  1296                           
  1297                           	psect	nvBANK0
  1298  0059                     __pnvBANK0:	
  1299  0059                     _EUSART_ErrorHandler:	
  1300  0059                     	ds	2
  1301  005B                     _EUSART_OverrunErrorHandler:	
  1302  005B                     	ds	2
  1303  005D                     _EUSART_FramingErrorHandler:	
  1304  005D                     	ds	2
  1305  005F                     _EUSART_RxDefaultInterruptHandler:	
  1306  005F                     	ds	2
  1307  0061                     _EUSART_TxDefaultInterruptHandler:	
  1308  0061                     	ds	2
  1309  0063                     _eusartTxBufferRemaining:	
  1310  0063                     	ds	1
  1311  0011                     _PIR1bits	set	17
  1312  000B                     _INTCONbits	set	11
  1313  0095                     _OPTION_REGbits	set	149
  1314  008E                     _TRISC	set	142
  1315  008D                     _TRISB	set	141
  1316  008C                     _TRISA	set	140
  1317  0097                     _WDTCON	set	151
  1318  0099                     _OSCCON	set	153
  1319  0091                     _PIE1bits	set	145
  1320  011D                     _APFCON	set	285
  1321  010E                     _LATC	set	270
  1322  010D                     _LATB	set	269
  1323  010C                     _LATA	set	268
  1324  0116                     _BORCON	set	278
  1325  018C                     _ANSELA	set	396
  1326  018D                     _ANSELB	set	397
  1327  018E                     _ANSELC	set	398
  1328  0199                     _RCREG	set	409
  1329  019D                     _RCSTAbits	set	413
  1330  019A                     _TXREG	set	410
  1331  019E                     _TXSTAbits	set	414
  1332  019C                     _SPBRGH	set	412
  1333  019B                     _SPBRGL	set	411
  1334  019E                     _TXSTA	set	414
  1335  019D                     _RCSTA	set	413
  1336  019F                     _BAUDCON	set	415
  1337  020C                     _WPUA	set	524
  1338  020D                     _WPUB	set	525
  1339                           
  1340                           	psect	stringtext2
  1341  03F3                     __pstringtext2:	
  1342  03F3                     STR_2:	
  1343  03F3  3453               	retlw	83	;'S'
  1344  03F4  3459               	retlw	89	;'Y'
  1345  03F5  3453               	retlw	83	;'S'
  1346  03F6  3420               	retlw	32	;' '
  1347  03F7  3446               	retlw	70	;'F'
  1348  03F8  3441               	retlw	65	;'A'
  1349  03F9  3443               	retlw	67	;'C'
  1350  03FA  3454               	retlw	84	;'T'
  1351  03FB  344F               	retlw	79	;'O'
  1352  03FC  3452               	retlw	82	;'R'
  1353  03FD  3459               	retlw	89	;'Y'
  1354  03FE  3420               	retlw	32	;' '
  1355  03FF  3452               	retlw	82	;'R'
  1356  0400  3445               	retlw	69	;'E'
  1357  0401  3453               	retlw	83	;'S'
  1358  0402  3445               	retlw	69	;'E'
  1359  0403  3454               	retlw	84	;'T'
  1360  0404  3400               	retlw	0
  1361                           
  1362                           	psect	stringtext3
  1363  0405                     __pstringtext3:	
  1364  0405                     STR_3:	
  1365  0405  3453               	retlw	83	;'S'
  1366  0406  344D               	retlw	77	;'M'
  1367  0407  3441               	retlw	65	;'A'
  1368  0408  3452               	retlw	82	;'R'
  1369  0409  3454               	retlw	84	;'T'
  1370  040A  3420               	retlw	32	;' '
  1371  040B  344C               	retlw	76	;'L'
  1372  040C  3449               	retlw	73	;'I'
  1373  040D  3447               	retlw	71	;'G'
  1374  040E  3448               	retlw	72	;'H'
  1375  040F  3454               	retlw	84	;'T'
  1376  0410  3420               	retlw	32	;' '
  1377  0411  3449               	retlw	73	;'I'
  1378  0412  344E               	retlw	78	;'N'
  1379  0413  3449               	retlw	73	;'I'
  1380  0414  3454               	retlw	84	;'T'
  1381  0415  3400               	retlw	0
  1382                           
  1383                           	psect	stringtext4
  1384  0454                     __pstringtext4:	
  1385  0454                     STR_1:	
  1386  0454  344C               	retlw	76	;'L'
  1387  0455  3445               	retlw	69	;'E'
  1388  0456  3456               	retlw	86	;'V'
  1389  0457  3445               	retlw	69	;'E'
  1390  0458  344C               	retlw	76	;'L'
  1391  0459  3400               	retlw	0
  1392                           
  1393                           	psect	stringtext5
  1394  0000                     __pstringtext5:	
  1395                           
  1396                           ; #config settings
  1397  0000                     
  1398                           	psect	cinit
  1399  0023                     start_initialization:	
  1400  0023                     __initialization:	
  1401                           
  1402                           ; Initialize objects allocated to BANK0
  1403  0023  3041               	movlw	low __pidataBANK0
  1404  0024  0084               	movwf	4
  1405  0025  3084               	movlw	(high __pidataBANK0)| (0+128)
  1406  0026  0085               	movwf	5
  1407  0027  3064               	movlw	low __pdataBANK0
  1408  0028  0086               	movwf	6
  1409  0029  3000               	movlw	high __pdataBANK0
  1410  002A  0087               	movwf	7
  1411  002B  300B               	movlw	11
  1412  002C  3184  245A  3180   	fcall	init_ram
  1413                           
  1414                           ; Initialize objects allocated to BANK1
  1415  002F  3027               	movlw	low __pidataBANK1
  1416  0030  0084               	movwf	4
  1417  0031  3084               	movlw	(high __pidataBANK1)| (0+128)
  1418  0032  0085               	movwf	5
  1419  0033  30E0               	movlw	low __pdataBANK1
  1420  0034  0086               	movwf	6
  1421  0035  3000               	movlw	high __pdataBANK1
  1422  0036  0087               	movwf	7
  1423  0037  300E               	movlw	14
  1424  0038  3184  245A  3180   	fcall	init_ram
  1425                           
  1426                           ; Clear objects allocated to COMMON
  1427  003B  01F6               	clrf	__pbssCOMMON& (0+127)
  1428  003C  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1429  003D  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1430  003E  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1431                           
  1432                           ; Clear objects allocated to BANK0
  1433  003F  3020               	movlw	low __pbssBANK0
  1434  0040  0084               	movwf	4
  1435  0041  3000               	movlw	high __pbssBANK0
  1436  0042  0085               	movwf	5
  1437  0043  3028               	movlw	40
  1438  0044  3184  2460  3180   	fcall	clear_ram0
  1439                           
  1440                           ; Clear objects allocated to BANK1
  1441  0047  30A0               	movlw	low __pbssBANK1
  1442  0048  0084               	movwf	4
  1443  0049  3000               	movlw	high __pbssBANK1
  1444  004A  0085               	movwf	5
  1445  004B  3040               	movlw	64
  1446  004C  3184  2460  3180   	fcall	clear_ram0
  1447                           
  1448                           ; Clear objects allocated to BANK2
  1449  004F  3020               	movlw	low __pbssBANK2
  1450  0050  0084               	movwf	4
  1451  0051  3001               	movlw	high __pbssBANK2
  1452  0052  0085               	movwf	5
  1453  0053  3040               	movlw	64
  1454  0054  3184  2460  3180   	fcall	clear_ram0
  1455                           
  1456                           ; Clear objects allocated to BANK3
  1457  0057  30A0               	movlw	low __pbssBANK3
  1458  0058  0084               	movwf	4
  1459  0059  3001               	movlw	high __pbssBANK3
  1460  005A  0085               	movwf	5
  1461  005B  3040               	movlw	64
  1462  005C  3184  2460         	fcall	clear_ram0
  1463  005E                     end_of_initialization:	
  1464                           ;End of C runtime variable initialization code
  1465                           
  1466  005E                     __end_of__initialization:	
  1467  005E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1468  005F  0020               	movlb	0
  1469  0060  3180  28F8         	ljmp	_main	;jump to C main() function
  1470                           
  1471                           	psect	bssCOMMON
  1472  0076                     __pbssCOMMON:	
  1473  0076                     _eusartRxTail:	
  1474  0076                     	ds	1
  1475  0077                     _eusartRxHead:	
  1476  0077                     	ds	1
  1477  0078                     _eusartTxTail:	
  1478  0078                     	ds	1
  1479  0079                     _eusartTxHead:	
  1480  0079                     	ds	1
  1481                           
  1482                           	psect	bssBANK0
  1483  0020                     __pbssBANK0:	
  1484  0020                     _eusartRxStatusBuffer:	
  1485  0020                     	ds	8
  1486  0028                     _eusartRxBuffer:	
  1487  0028                     	ds	8
  1488  0030                     _eusartTxBuffer:	
  1489  0030                     	ds	8
  1490  0038                     _rxData:	
  1491  0038                     	ds	1
  1492  0039                     _ResponseIndex:	
  1493  0039                     	ds	1
  1494  003A                     _eusartRxLastError:	
  1495  003A                     	ds	1
  1496  003B                     _eusartRxCount:	
  1497  003B                     	ds	1
  1498  003C                     _Storage2:	
  1499  003C                     	ds	9
  1500  0045                     _Num_Char:	
  1501  0045                     	ds	3
  1502                           
  1503                           	psect	dataBANK0
  1504  0064                     __pdataBANK0:	
  1505  0064                     _RESET:	
  1506  0064                     	ds	6
  1507  006A                     _LVL:	
  1508  006A                     	ds	5
  1509                           
  1510                           	psect	bssBANK1
  1511  00A0                     __pbssBANK1:	
  1512  00A0                     _ResponseBuffer:	
  1513  00A0                     	ds	64
  1514                           
  1515                           	psect	dataBANK1
  1516  00E0                     __pdataBANK1:	
  1517  00E0                     _KEY3:	
  1518  00E0                     	ds	7
  1519  00E7                     _KEY5:	
  1520  00E7                     	ds	7
  1521                           
  1522                           	psect	bssBANK2
  1523  0120                     __pbssBANK2:	
  1524  0120                     _Storage:	
  1525  0120                     	ds	64
  1526                           
  1527                           	psect	bssBANK3
  1528  01A0                     __pbssBANK3:	
  1529  01A0                     _ReadStorage:	
  1530  01A0                     	ds	64
  1531                           
  1532                           	psect	inittext
  1533  045A                     init_ram:	
  1534  045A  00FE               	movwf	126
  1535  045B                     initloop:	
  1536  045B  0012               	moviw fsr0++
  1537  045C  001E               	movwi fsr1++
  1538  045D  0BFE               	decfsz	126,f
  1539  045E  2C5B               	goto	initloop
  1540  045F  3400               	retlw	0
  1541                           
  1542                           	psect	clrtext
  1543  0460                     clear_ram0:	
  1544                           ;	Called with FSR0 containing the base address, and
  1545                           ;	WREG with the size to clear
  1546                           
  1547  0460  0064               	clrwdt	;clear the watchdog before getting into this loop
  1548  0461                     clrloop0:	
  1549  0461  0180               	clrf	0	;clear RAM location pointed to by FSR
  1550  0462  3101               	addfsr 0,1
  1551  0463  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1552  0464  2C61               	goto	clrloop0	;have we reached the end yet?
  1553  0465  3400               	retlw	0	;all done for this memory range, return
  1554                           
  1555                           	psect	cstackBANK2
  1556  0160                     __pcstackBANK2:	
  1557  0160                     	ds	4
  1558  0164                     main@s:	
  1559                           
  1560                           ; 1 bytes @ 0x4
  1561  0164                     	ds	1
  1562                           
  1563                           	psect	cstackCOMMON
  1564  0070                     __pcstackCOMMON:	
  1565  0070                     ?_EUSART_Receive_ISR:	
  1566  0070                     ?_EUSART_Transmit_ISR:	
  1567                           ; 1 bytes @ 0x0
  1568                           
  1569  0070                     ??_EUSART_Transmit_ISR:	
  1570                           ; 1 bytes @ 0x0
  1571                           
  1572  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  1573                           ; 1 bytes @ 0x0
  1574                           
  1575  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  1576                           ; 1 bytes @ 0x0
  1577                           
  1578  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  1579                           ; 1 bytes @ 0x0
  1580                           
  1581  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  1582                           ; 1 bytes @ 0x0
  1583                           
  1584  0070                     ?_EUSART_DefaultErrorHandler:	
  1585                           ; 1 bytes @ 0x0
  1586                           
  1587  0070                     ?_EUSART_RxDataHandler:	
  1588                           ; 1 bytes @ 0x0
  1589                           
  1590  0070                     ??_EUSART_RxDataHandler:	
  1591                           ; 1 bytes @ 0x0
  1592                           
  1593  0070                     ?_PIN_MANAGER_Initialize:	
  1594                           ; 1 bytes @ 0x0
  1595                           
  1596  0070                     ?_OSCILLATOR_Initialize:	
  1597                           ; 1 bytes @ 0x0
  1598                           
  1599  0070                     ?_WDT_Initialize:	
  1600                           ; 1 bytes @ 0x0
  1601                           
  1602  0070                     ?_INIT_SMART_LIGHT:	
  1603                           ; 1 bytes @ 0x0
  1604                           
  1605  0070                     ?_ReadyReceiveBuffer:	
  1606                           ; 1 bytes @ 0x0
  1607                           
  1608  0070                     ?_GetResponse:	
  1609                           ; 1 bytes @ 0x0
  1610                           
  1611  0070                     ?_ReceivedMessage:	
  1612                           ; 1 bytes @ 0x0
  1613                           
  1614  0070                     ?_EUSART_Initialize:	
  1615                           ; 1 bytes @ 0x0
  1616                           
  1617  0070                     ?_EUSART_is_rx_ready:	
  1618                           ; 1 bytes @ 0x0
  1619                           
  1620  0070                     ??_EUSART_is_rx_ready:	
  1621                           ; 1 bytes @ 0x0
  1622                           
  1623  0070                     ?_EUSART_Read:	
  1624                           ; 1 bytes @ 0x0
  1625                           
  1626  0070                     ??_EUSART_Read:	
  1627                           ; 1 bytes @ 0x0
  1628                           
  1629  0070                     ?_INTERRUPT_InterruptManager:	
  1630                           ; 1 bytes @ 0x0
  1631                           
  1632  0070                     ?_SYSTEM_Initialize:	
  1633                           ; 1 bytes @ 0x0
  1634                           
  1635  0070                     ?_main:	
  1636                           ; 1 bytes @ 0x0
  1637                           
  1638                           
  1639                           ; 1 bytes @ 0x0
  1640  0070                     	ds	1
  1641  0071                     ??_EUSART_Receive_ISR:	
  1642  0071                     ??_EUSART_DefaultErrorHandler:	
  1643                           ; 1 bytes @ 0x1
  1644                           
  1645  0071                     EUSART_Read@readValue:	
  1646                           ; 1 bytes @ 0x1
  1647                           
  1648                           
  1649                           ; 1 bytes @ 0x1
  1650  0071                     	ds	1
  1651  0072                     ??_ReceivedMessage:	
  1652                           
  1653                           ; 1 bytes @ 0x2
  1654  0072                     	ds	1
  1655  0073                     ReceivedMessage@readByte:	
  1656                           
  1657                           ; 1 bytes @ 0x3
  1658  0073                     	ds	1
  1659  0074                     ?_EUSART_SetRxInterruptHandler:	
  1660  0074                     ?_EUSART_SetTxInterruptHandler:	
  1661                           ; 1 bytes @ 0x4
  1662                           
  1663  0074                     ?_EUSART_SetFramingErrorHandler:	
  1664                           ; 1 bytes @ 0x4
  1665                           
  1666  0074                     ?_EUSART_SetOverrunErrorHandler:	
  1667                           ; 1 bytes @ 0x4
  1668                           
  1669  0074                     ?_EUSART_SetErrorHandler:	
  1670                           ; 1 bytes @ 0x4
  1671                           
  1672  0074                     ??_PIN_MANAGER_Initialize:	
  1673                           ; 1 bytes @ 0x4
  1674                           
  1675  0074                     ??_OSCILLATOR_Initialize:	
  1676                           ; 1 bytes @ 0x4
  1677                           
  1678  0074                     ??_WDT_Initialize:	
  1679                           ; 1 bytes @ 0x4
  1680                           
  1681  0074                     ??_ReadyReceiveBuffer:	
  1682                           ; 1 bytes @ 0x4
  1683                           
  1684  0074                     ?_blockingWait:	
  1685                           ; 1 bytes @ 0x4
  1686                           
  1687  0074                     ??_GetResponse:	
  1688                           ; 1 bytes @ 0x4
  1689                           
  1690  0074                     ??_memset:	
  1691                           ; 1 bytes @ 0x4
  1692                           
  1693  0074                     ??_strncmp:	
  1694                           ; 1 bytes @ 0x4
  1695                           
  1696  0074                     ?_strchr:	
  1697                           ; 1 bytes @ 0x4
  1698                           
  1699  0074                     ?_EUSART_Write:	
  1700                           ; 1 bytes @ 0x4
  1701                           
  1702  0074                     ??_INTERRUPT_InterruptManager:	
  1703                           ; 1 bytes @ 0x4
  1704                           
  1705  0074                     ?_strlen:	
  1706                           ; 1 bytes @ 0x4
  1707                           
  1708  0074                     EUSART_Write@txData:	
  1709                           ; 2 bytes @ 0x4
  1710                           
  1711  0074                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1712                           ; 1 bytes @ 0x4
  1713                           
  1714  0074                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1715                           ; 2 bytes @ 0x4
  1716                           
  1717  0074                     EUSART_SetErrorHandler@interruptHandler:	
  1718                           ; 2 bytes @ 0x4
  1719                           
  1720  0074                     EUSART_SetTxInterruptHandler@interruptHandler:	
  1721                           ; 2 bytes @ 0x4
  1722                           
  1723  0074                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1724                           ; 2 bytes @ 0x4
  1725                           
  1726  0074                     blockingWait@limit:	
  1727                           ; 2 bytes @ 0x4
  1728                           
  1729  0074                     strchr@c:	
  1730                           ; 2 bytes @ 0x4
  1731                           
  1732  0074                     strlen@s:	
  1733                           ; 2 bytes @ 0x4
  1734                           
  1735                           
  1736                           ; 2 bytes @ 0x4
  1737  0074                     	ds	1
  1738  0075                     ??_EUSART_Write:	
  1739  0075                     ReadyReceiveBuffer@position:	
  1740                           ; 1 bytes @ 0x5
  1741                           
  1742                           
  1743                           ; 1 bytes @ 0x5
  1744  0075                     	ds	1
  1745  0076                     ??_EUSART_SetRxInterruptHandler:	
  1746  0076                     ??_EUSART_SetTxInterruptHandler:	
  1747                           ; 1 bytes @ 0x6
  1748                           
  1749  0076                     ??_EUSART_SetFramingErrorHandler:	
  1750                           ; 1 bytes @ 0x6
  1751                           
  1752  0076                     ??_EUSART_SetOverrunErrorHandler:	
  1753                           ; 1 bytes @ 0x6
  1754                           
  1755  0076                     ??_EUSART_SetErrorHandler:	
  1756                           ; 1 bytes @ 0x6
  1757                           
  1758  0076                     ??_INIT_SMART_LIGHT:	
  1759                           ; 1 bytes @ 0x6
  1760                           
  1761  0076                     ??_strchr:	
  1762                           ; 1 bytes @ 0x6
  1763                           
  1764  0076                     ??_SYSTEM_Initialize:	
  1765                           ; 1 bytes @ 0x6
  1766                           
  1767                           
  1768                           	psect	cstackBANK0
  1769  0048                     __pcstackBANK0:	
  1770                           ; 1 bytes @ 0x6
  1771                           
  1772  0048                     ??_blockingWait:	
  1773  0048                     ?_memset:	
  1774                           ; 1 bytes @ 0x0
  1775                           
  1776  0048                     ??_strlen:	
  1777                           ; 1 bytes @ 0x0
  1778                           
  1779  0048                     ??_EUSART_Initialize:	
  1780                           ; 1 bytes @ 0x0
  1781                           
  1782  0048                     ?_SendString:	
  1783                           ; 1 bytes @ 0x0
  1784                           
  1785  0048                     ?_strcpy:	
  1786                           ; 1 bytes @ 0x0
  1787                           
  1788  0048                     ?_strncmp:	
  1789                           ; 2 bytes @ 0x0
  1790                           
  1791  0048                     strchr@s:	
  1792                           ; 2 bytes @ 0x0
  1793                           
  1794  0048                     SendString@command:	
  1795                           ; 1 bytes @ 0x0
  1796                           
  1797  0048                     memset@c:	
  1798                           ; 2 bytes @ 0x0
  1799                           
  1800  0048                     strcpy@dest:	
  1801                           ; 2 bytes @ 0x0
  1802                           
  1803  0048                     strncmp@_r:	
  1804                           ; 2 bytes @ 0x0
  1805                           
  1806                           
  1807                           ; 2 bytes @ 0x0
  1808  0048                     	ds	1
  1809  0049                     blockingWait@counter:	
  1810  0049                     strlen@a:	
  1811                           ; 2 bytes @ 0x1
  1812                           
  1813                           
  1814                           ; 2 bytes @ 0x1
  1815  0049                     	ds	1
  1816  004A                     ??_SendString:	
  1817  004A                     memset@n:	
  1818                           ; 1 bytes @ 0x2
  1819                           
  1820  004A                     strcpy@src:	
  1821                           ; 2 bytes @ 0x2
  1822                           
  1823  004A                     strncmp@n:	
  1824                           ; 2 bytes @ 0x2
  1825                           
  1826                           
  1827                           ; 2 bytes @ 0x2
  1828  004A                     	ds	2
  1829  004C                     ??_strcpy:	
  1830  004C                     strncmp@_l:	
  1831                           ; 1 bytes @ 0x4
  1832                           
  1833  004C                     memset@k:	
  1834                           ; 1 bytes @ 0x4
  1835                           
  1836                           
  1837                           ; 2 bytes @ 0x4
  1838  004C                     	ds	1
  1839  004D                     strncmp@r:	
  1840                           
  1841                           ; 2 bytes @ 0x5
  1842  004D                     	ds	1
  1843  004E                     memset@dest:	
  1844                           
  1845                           ; 1 bytes @ 0x6
  1846  004E                     	ds	1
  1847  004F                     memset@s:	
  1848  004F                     strncmp@l:	
  1849                           ; 1 bytes @ 0x7
  1850                           
  1851                           
  1852                           ; 1 bytes @ 0x7
  1853  004F                     	ds	1
  1854  0050                     ?_strstr:	
  1855  0050                     strcpy@s:	
  1856                           ; 1 bytes @ 0x8
  1857                           
  1858  0050                     strstr@n:	
  1859                           ; 2 bytes @ 0x8
  1860                           
  1861                           
  1862                           ; 2 bytes @ 0x8
  1863  0050                     	ds	2
  1864  0052                     ??_strstr:	
  1865  0052                     strcpy@d:	
  1866                           ; 1 bytes @ 0xA
  1867                           
  1868                           
  1869                           ; 2 bytes @ 0xA
  1870  0052                     	ds	3
  1871  0055                     strstr@nl:	
  1872                           
  1873                           ; 2 bytes @ 0xD
  1874  0055                     	ds	2
  1875  0057                     strstr@h:	
  1876                           
  1877                           ; 1 bytes @ 0xF
  1878  0057                     	ds	1
  1879  0058                     ??_main:	
  1880                           
  1881                           ; 1 bytes @ 0x10
  1882  0058                     	ds	1
  1883                           
  1884                           	psect	maintext
  1885  00F8                     __pmaintext:	
  1886 ;;
  1887 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1888 ;;
  1889 ;; *************** function _main *****************
  1890 ;; Defined at:
  1891 ;;		line 19 in file "main.c"
  1892 ;; Parameters:    Size  Location     Type
  1893 ;;		None
  1894 ;; Auto vars:     Size  Location     Type
  1895 ;;  num             2    0        int 
  1896 ;;  s               1    4[BANK2 ] PTR unsigned char 
  1897 ;;		 -> NULL(0), Storage(64), 
  1898 ;;  test            2    0        int 
  1899 ;; Return value:  Size  Location     Type
  1900 ;;                  1    wreg      void 
  1901 ;; Registers used:
  1902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1903 ;; Tracked objects:
  1904 ;;		On entry : B1F/0
  1905 ;;		On exit  : 0/0
  1906 ;;		Unchanged: 0/0
  1907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1908 ;;      Params:         0       0       0       0       0       0       0       0
  1909 ;;      Locals:         0       0       0       5       0       0       0       0
  1910 ;;      Temps:          0       1       0       0       0       0       0       0
  1911 ;;      Totals:         0       1       0       5       0       0       0       0
  1912 ;;Total ram usage:        6 bytes
  1913 ;; Hardware stack levels required when called:    8
  1914 ;; This function calls:
  1915 ;;		_GetResponse
  1916 ;;		_INIT_SMART_LIGHT
  1917 ;;		_ReadyReceiveBuffer
  1918 ;;		_SYSTEM_Initialize
  1919 ;;		_blockingWait
  1920 ;;		_memset
  1921 ;;		_strcpy
  1922 ;;		_strstr
  1923 ;; This function is called by:
  1924 ;;		Startup code after reset
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927                           
  1928                           
  1929                           ;psect for function _main
  1930  00F8                     _main:	
  1931                           
  1932                           ;main.c: 21:     SYSTEM_Initialize();
  1933                           
  1934                           ;incstack = 0
  1935                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1936  00F8  3184  2435  3180   	fcall	_SYSTEM_Initialize
  1937                           
  1938                           ;main.c: 22:     (INTCONbits.GIE = 1);
  1939  00FB  178B               	bsf	11,7	;volatile
  1940                           
  1941                           ;main.c: 23:     (INTCONbits.PEIE = 1);
  1942  00FC  170B               	bsf	11,6	;volatile
  1943                           
  1944                           ;main.c: 24:     INIT_SMART_LIGHT ();
  1945  00FD  3183  230E  3180   	fcall	_INIT_SMART_LIGHT
  1946  0100                     L1:	
  1947                           
  1948                           ;main.c: 25:     ReadyReceiveBuffer();
  1949  0100  3184  2416  3180   	fcall	_ReadyReceiveBuffer
  1950  0103                     l1930:	
  1951                           
  1952                           ;main.c: 28:     {;main.c: 29:         if(ResponseIndex != 0)
  1953  0103  0020               	movlb	0	; select bank0
  1954  0104  0839               	movf	_ResponseIndex,w
  1955  0105  1903               	btfsc	3,2
  1956  0106  2903               	goto	l1930
  1957                           
  1958                           ;main.c: 30:         {;main.c: 31:             blockingWait(2);
  1959  0107  3002               	movlw	2
  1960  0108  00F4               	movwf	blockingWait@limit
  1961  0109  3000               	movlw	0
  1962  010A  00F5               	movwf	blockingWait@limit+1
  1963  010B  3183  2365  3180   	fcall	_blockingWait
  1964                           
  1965                           ;main.c: 32:             rxData = GetResponse();
  1966  010E  3184  2495  3180   	fcall	_GetResponse
  1967  0111  0020               	movlb	0	; select bank0
  1968  0112  00D8               	movwf	??_main
  1969  0113  0858               	movf	??_main,w
  1970  0114  00B8               	movwf	_rxData
  1971                           
  1972                           ;main.c: 35:             strcpy(Storage, rxData);
  1973  0115  3020               	movlw	low _Storage
  1974  0116  00C8               	movwf	strcpy@dest
  1975  0117  3001               	movlw	high _Storage
  1976  0118  00C9               	movwf	strcpy@dest+1
  1977  0119  0838               	movf	_rxData,w
  1978  011A  00CA               	movwf	strcpy@src
  1979  011B  39FF               	andlw	255
  1980  011C  1D03               	skipz
  1981  011D  3000               	movlw	0
  1982  011E  00CB               	movwf	strcpy@src+1
  1983  011F  3182  22A2  3180   	fcall	_strcpy
  1984                           
  1985                           ;main.c: 37:             char *s;;main.c: 38:             s = strstr(Storage,"LEVEL");
  1986  0122  3054               	movlw	low (STR_1| (0+32768))
  1987  0123  0020               	movlb	0	; select bank0
  1988  0124  00D0               	movwf	strstr@n
  1989  0125  3084               	movlw	high (STR_1| (0+32768))
  1990  0126  00D1               	movwf	strstr@n+1
  1991  0127  3020               	movlw	(low (_Storage| (0+256)))& (0+255)
  1992  0128  3181  21B7  3180   	fcall	_strstr
  1993  012B  0020               	movlb	0	; select bank0
  1994  012C  00D8               	movwf	??_main
  1995  012D  0858               	movf	??_main,w
  1996  012E  0022               	movlb	2	; select bank2
  1997  012F  00E4               	movwf	main@s^(0+256)
  1998                           
  1999                           ;main.c: 39:             strcpy(Storage2, s);
  2000  0130  303C               	movlw	low _Storage2
  2001  0131  0020               	movlb	0	; select bank0
  2002  0132  00C8               	movwf	strcpy@dest
  2003  0133  3000               	movlw	high _Storage2
  2004  0134  00C9               	movwf	strcpy@dest+1
  2005  0135  0022               	movlb	2	; select bank2
  2006  0136  0864               	movf	main@s^(0+256),w
  2007  0137  0020               	movlb	0	; select bank0
  2008  0138  00CA               	movwf	strcpy@src
  2009  0139  39FF               	andlw	255
  2010  013A  1D03               	skipz
  2011  013B  3001               	movlw	1
  2012  013C  00CB               	movwf	strcpy@src+1
  2013  013D  3182  22A2  3180   	fcall	_strcpy
  2014                           
  2015                           ;main.c: 41:             Num_Char[0] = Storage2[6];
  2016  0140  0020               	movlb	0	; select bank0
  2017  0141  0842               	movf	_Storage2+6,w
  2018  0142  00D8               	movwf	??_main
  2019  0143  0858               	movf	??_main,w
  2020  0144  00C5               	movwf	_Num_Char
  2021                           
  2022                           ;main.c: 42:             Num_Char[1] = Storage2[7];
  2023  0145  0843               	movf	_Storage2+7,w
  2024  0146  00D8               	movwf	??_main
  2025  0147  0858               	movf	??_main,w
  2026  0148  00C6               	movwf	_Num_Char+1
  2027                           
  2028                           ;main.c: 43:             Num_Char[2] = Storage2[8];
  2029  0149  0844               	movf	_Storage2+8,w
  2030  014A  00D8               	movwf	??_main
  2031  014B  0858               	movf	??_main,w
  2032  014C  00C7               	movwf	_Num_Char+2
  2033                           
  2034                           ;main.c: 50:             memset(Storage2,((void*)0),9);
  2035  014D  3000               	movlw	0
  2036  014E  00C8               	movwf	memset@c
  2037  014F  00C9               	movwf	memset@c+1
  2038  0150  3009               	movlw	9
  2039  0151  00CA               	movwf	memset@n
  2040  0152  3000               	movlw	0
  2041  0153  00CB               	movwf	memset@n+1
  2042  0154  303C               	movlw	(low (_Storage2| 0))& (0+255)
  2043  0155  3180  2062  3180   	fcall	_memset
  2044                           
  2045                           ;main.c: 51:             memset(Num_Char,((void*)0),3);
  2046  0158  3000               	movlw	0
  2047  0159  0020               	movlb	0	; select bank0
  2048  015A  00C8               	movwf	memset@c
  2049  015B  00C9               	movwf	memset@c+1
  2050  015C  3003               	movlw	3
  2051  015D  00CA               	movwf	memset@n
  2052  015E  3000               	movlw	0
  2053  015F  00CB               	movwf	memset@n+1
  2054  0160  3045               	movlw	(low (_Num_Char| 0))& (0+255)
  2055  0161  3180  2062  3180   	fcall	_memset
  2056  0164  2900               	goto	L1
  2057  0165                     __end_of_main:	
  2058                           ;main.c: 52:             ReadyReceiveBuffer();
  2059                           
  2060                           
  2061                           	psect	text1
  2062  01B7                     __ptext1:	
  2063 ;; *************** function _strstr *****************
  2064 ;; Defined at:
  2065 ;;		line 143 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strstr.c"
  2066 ;; Parameters:    Size  Location     Type
  2067 ;;  h               1    wreg     PTR const unsigned char 
  2068 ;;		 -> NULL(0), Storage(64), 
  2069 ;;  n               2    8[BANK0 ] PTR const unsigned char 
  2070 ;;		 -> STR_1(6), 
  2071 ;; Auto vars:     Size  Location     Type
  2072 ;;  h               1   15[BANK0 ] PTR const unsigned char 
  2073 ;;		 -> NULL(0), Storage(64), 
  2074 ;;  nl              2   13[BANK0 ] unsigned int 
  2075 ;; Return value:  Size  Location     Type
  2076 ;;                  1    wreg      PTR unsigned char 
  2077 ;; Registers used:
  2078 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2079 ;; Tracked objects:
  2080 ;;		On entry : 0/0
  2081 ;;		On exit  : 0/0
  2082 ;;		Unchanged: 0/0
  2083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2084 ;;      Params:         0       2       0       0       0       0       0       0
  2085 ;;      Locals:         0       3       0       0       0       0       0       0
  2086 ;;      Temps:          0       3       0       0       0       0       0       0
  2087 ;;      Totals:         0       8       0       0       0       0       0       0
  2088 ;;Total ram usage:        8 bytes
  2089 ;; Hardware stack levels used:    1
  2090 ;; Hardware stack levels required when called:    6
  2091 ;; This function calls:
  2092 ;;		_strchr
  2093 ;;		_strlen
  2094 ;;		_strncmp
  2095 ;; This function is called by:
  2096 ;;		_main
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099                           
  2100                           
  2101                           ;psect for function _strstr
  2102  01B7                     _strstr:	
  2103                           
  2104                           ;incstack = 0
  2105                           ; Regs used in _strstr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2106                           ;strstr@h stored from wreg
  2107  01B7  0020               	movlb	0	; select bank0
  2108  01B8  00D7               	movwf	strstr@h
  2109  01B9  0850               	movf	strstr@n,w
  2110  01BA  0451               	iorwf	strstr@n+1,w
  2111  01BB  1903               	btfsc	3,2
  2112  01BC  29FB               	goto	l1868
  2113  01BD  0851               	movf	strstr@n+1,w
  2114  01BE  00F5               	movwf	strlen@s+1
  2115  01BF  0850               	movf	strstr@n,w
  2116  01C0  00F4               	movwf	strlen@s
  2117  01C1  3183  2399  3181   	fcall	_strlen
  2118  01C4  0875               	movf	?_strlen+1,w
  2119  01C5  0020               	movlb	0	; select bank0
  2120  01C6  00D6               	movwf	strstr@nl+1
  2121  01C7  0874               	movf	?_strlen,w
  2122  01C8  00D5               	movwf	strstr@nl
  2123  01C9  29F1               	goto	l1864
  2124  01CA                     l1856:	
  2125  01CA  0851               	movf	strstr@n+1,w
  2126  01CB  00C9               	movwf	strncmp@_r+1
  2127  01CC  0850               	movf	strstr@n,w
  2128  01CD  00C8               	movwf	strncmp@_r
  2129  01CE  0856               	movf	strstr@nl+1,w
  2130  01CF  00CB               	movwf	strncmp@n+1
  2131  01D0  0855               	movf	strstr@nl,w
  2132  01D1  00CA               	movwf	strncmp@n
  2133  01D2  0857               	movf	strstr@h,w
  2134  01D3  3181  2165  3181   	fcall	_strncmp
  2135  01D6  0020               	movlb	0	; select bank0
  2136  01D7  0848               	movf	?_strncmp,w
  2137  01D8  0449               	iorwf	?_strncmp+1,w
  2138  01D9  1D03               	btfss	3,2
  2139  01DA  29DD               	goto	l1862
  2140  01DB  0857               	movf	strstr@h,w
  2141  01DC  0008               	return
  2142  01DD                     l1862:	
  2143  01DD  0850               	movf	strstr@n,w
  2144  01DE  0084               	movwf	4
  2145  01DF  0851               	movf	strstr@n+1,w
  2146  01E0  0085               	movwf	5
  2147  01E1  0800               	movf	0,w	;code access
  2148  01E2  00D2               	movwf	??_strstr
  2149  01E3  01D3               	clrf	??_strstr+1
  2150  01E4  0852               	movf	??_strstr,w
  2151  01E5  00F4               	movwf	strchr@c
  2152  01E6  0853               	movf	??_strstr+1,w
  2153  01E7  00F5               	movwf	strchr@c+1
  2154  01E8  0857               	movf	strstr@h,w
  2155  01E9  3E01               	addlw	1
  2156  01EA  3183  23C9  3181   	fcall	_strchr
  2157  01ED  0020               	movlb	0	; select bank0
  2158  01EE  00D4               	movwf	??_strstr+2
  2159  01EF  0854               	movf	??_strstr+2,w
  2160  01F0  00D7               	movwf	strstr@h
  2161  01F1                     l1864:	
  2162  01F1  0857               	movf	strstr@h,w
  2163  01F2  1903               	btfsc	3,2
  2164  01F3  29FB               	goto	l1868
  2165  01F4  0857               	movf	strstr@h,w
  2166  01F5  0086               	movwf	6
  2167  01F6  3001               	movlw	1	; select bank2/3
  2168  01F7  0087               	movwf	7
  2169  01F8  0801               	movf	1,w
  2170  01F9  1D03               	btfss	3,2
  2171  01FA  29CA               	goto	l1856
  2172  01FB                     l1868:	
  2173  01FB  3000               	movlw	0
  2174  01FC  0008               	return
  2175  01FD                     __end_of_strstr:	
  2176                           
  2177                           	psect	text2
  2178  0165                     __ptext2:	
  2179 ;; *************** function _strncmp *****************
  2180 ;; Defined at:
  2181 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strncmp.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;  _l              1    wreg     PTR const unsigned char 
  2184 ;;		 -> NULL(0), Storage(64), 
  2185 ;;  _r              2    0[BANK0 ] PTR const unsigned char 
  2186 ;;		 -> STR_1(6), 
  2187 ;;  n               2    2[BANK0 ] unsigned int 
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;  _l              1    4[BANK0 ] PTR const unsigned char 
  2190 ;;		 -> NULL(0), Storage(64), 
  2191 ;;  r               2    5[BANK0 ] PTR const unsigned char 
  2192 ;;		 -> STR_1(6), 
  2193 ;;  l               1    7[BANK0 ] PTR const unsigned char 
  2194 ;;		 -> NULL(0), Storage(64), 
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  2    0[BANK0 ] int 
  2197 ;; Registers used:
  2198 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2204 ;;      Params:         0       4       0       0       0       0       0       0
  2205 ;;      Locals:         0       4       0       0       0       0       0       0
  2206 ;;      Temps:          1       0       0       0       0       0       0       0
  2207 ;;      Totals:         1       8       0       0       0       0       0       0
  2208 ;;Total ram usage:        9 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    5
  2211 ;; This function calls:
  2212 ;;		Nothing
  2213 ;; This function is called by:
  2214 ;;		_strstr
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217                           
  2218                           
  2219                           ;psect for function _strncmp
  2220  0165                     _strncmp:	
  2221                           
  2222                           ;incstack = 0
  2223                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  2224                           ;strncmp@_l stored from wreg
  2225  0165  0020               	movlb	0	; select bank0
  2226  0166  00CC               	movwf	strncmp@_l
  2227  0167  084C               	movf	strncmp@_l,w
  2228  0168  00F4               	movwf	??_strncmp
  2229  0169  0874               	movf	??_strncmp,w
  2230  016A  00CF               	movwf	strncmp@l
  2231  016B  0849               	movf	strncmp@_r+1,w
  2232  016C  00CE               	movwf	strncmp@r+1
  2233  016D  0848               	movf	strncmp@_r,w
  2234  016E  00CD               	movwf	strncmp@r
  2235  016F  3001               	movlw	1
  2236  0170  02CA               	subwf	strncmp@n,f
  2237  0171  3000               	movlw	0
  2238  0172  3BCB               	subwfb	strncmp@n+1,f
  2239  0173  0A4A               	incf	strncmp@n,w
  2240  0174  1D03               	skipz
  2241  0175  29A1               	goto	l1796
  2242  0176  0A4B               	incf	strncmp@n+1,w
  2243  0177  1D03               	btfss	3,2
  2244  0178  29A1               	goto	l1796
  2245  0179  01C8               	clrf	?_strncmp
  2246  017A  01C9               	clrf	?_strncmp+1
  2247  017B  0008               	return
  2248  017C                     l1798:	
  2249  017C  084D               	movf	strncmp@r,w
  2250  017D  0084               	movwf	4
  2251  017E  084E               	movf	strncmp@r+1,w
  2252  017F  0085               	movwf	5
  2253  0180  0012               	moviw fsr0++
  2254  0181  1903               	btfsc	3,2
  2255  0182  29A8               	goto	l1804
  2256  0183  084A               	movf	strncmp@n,w
  2257  0184  044B               	iorwf	strncmp@n+1,w
  2258  0185  1903               	btfsc	3,2
  2259  0186  29A8               	goto	l1804
  2260  0187  084D               	movf	strncmp@r,w
  2261  0188  0084               	movwf	4
  2262  0189  084E               	movf	strncmp@r+1,w
  2263  018A  0085               	movwf	5
  2264  018B  0800               	movf	0,w	;code access
  2265  018C  00F4               	movwf	??_strncmp
  2266  018D  084F               	movf	strncmp@l,w
  2267  018E  0086               	movwf	6
  2268  018F  3001               	movlw	1	; select bank2/3
  2269  0190  0087               	movwf	7
  2270  0191  0801               	movf	1,w
  2271  0192  0674               	xorwf	??_strncmp,w
  2272  0193  1D03               	btfss	3,2
  2273  0194  29A8               	goto	l1804
  2274  0195  3001               	movlw	1
  2275  0196  00F4               	movwf	??_strncmp
  2276  0197  0874               	movf	??_strncmp,w
  2277  0198  07CF               	addwf	strncmp@l,f
  2278  0199  3001               	movlw	1
  2279  019A  07CD               	addwf	strncmp@r,f
  2280  019B  3000               	movlw	0
  2281  019C  3DCE               	addwfc	strncmp@r+1,f
  2282  019D  3001               	movlw	1
  2283  019E  02CA               	subwf	strncmp@n,f
  2284  019F  3000               	movlw	0
  2285  01A0  3BCB               	subwfb	strncmp@n+1,f
  2286  01A1                     l1796:	
  2287  01A1  084F               	movf	strncmp@l,w
  2288  01A2  0086               	movwf	6
  2289  01A3  3001               	movlw	1	; select bank2/3
  2290  01A4  0087               	movwf	7
  2291  01A5  0801               	movf	1,w
  2292  01A6  1D03               	btfss	3,2
  2293  01A7  297C               	goto	l1798
  2294  01A8                     l1804:	
  2295  01A8  084F               	movf	strncmp@l,w
  2296  01A9  0086               	movwf	6
  2297  01AA  3001               	movlw	1	; select bank2/3
  2298  01AB  0087               	movwf	7
  2299  01AC  084D               	movf	strncmp@r,w
  2300  01AD  0084               	movwf	4
  2301  01AE  084E               	movf	strncmp@r+1,w
  2302  01AF  0085               	movwf	5
  2303  01B0  0800               	movf	0,w	;code access
  2304  01B1  0201               	subwf	1,w
  2305  01B2  00C8               	movwf	?_strncmp
  2306  01B3  01C9               	clrf	?_strncmp+1
  2307  01B4  1C03               	skipc
  2308  01B5  03C9               	decf	?_strncmp+1,f
  2309  01B6  0008               	return
  2310  01B7                     __end_of_strncmp:	
  2311                           
  2312                           	psect	text3
  2313  0399                     __ptext3:	
  2314 ;; *************** function _strlen *****************
  2315 ;; Defined at:
  2316 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  s               2    4[COMMON] PTR const unsigned char 
  2319 ;;		 -> STR_1(6), 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  a               2    1[BANK0 ] PTR const unsigned char 
  2322 ;;		 -> STR_1(6), 
  2323 ;; Return value:  Size  Location     Type
  2324 ;;                  2    4[COMMON] unsigned int 
  2325 ;; Registers used:
  2326 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2327 ;; Tracked objects:
  2328 ;;		On entry : 0/0
  2329 ;;		On exit  : 0/0
  2330 ;;		Unchanged: 0/0
  2331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2332 ;;      Params:         2       0       0       0       0       0       0       0
  2333 ;;      Locals:         0       2       0       0       0       0       0       0
  2334 ;;      Temps:          0       1       0       0       0       0       0       0
  2335 ;;      Totals:         2       3       0       0       0       0       0       0
  2336 ;;Total ram usage:        5 bytes
  2337 ;; Hardware stack levels used:    1
  2338 ;; Hardware stack levels required when called:    5
  2339 ;; This function calls:
  2340 ;;		Nothing
  2341 ;; This function is called by:
  2342 ;;		_strstr
  2343 ;; This function uses a non-reentrant model
  2344 ;;
  2345                           
  2346                           
  2347                           ;psect for function _strlen
  2348  0399                     _strlen:	
  2349                           
  2350                           ;incstack = 0
  2351                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  2352  0399  0875               	movf	strlen@s+1,w
  2353  039A  0020               	movlb	0	; select bank0
  2354  039B  00CA               	movwf	strlen@a+1
  2355  039C  0874               	movf	strlen@s,w
  2356  039D  00C9               	movwf	strlen@a
  2357  039E                     l1776:	
  2358  039E  0874               	movf	strlen@s,w
  2359  039F  0084               	movwf	4
  2360  03A0  0875               	movf	strlen@s+1,w
  2361  03A1  0085               	movwf	5
  2362  03A2  0012               	moviw fsr0++
  2363  03A3  1903               	btfsc	3,2
  2364  03A4  2BAA               	goto	l1778
  2365  03A5  3001               	movlw	1
  2366  03A6  07F4               	addwf	strlen@s,f
  2367  03A7  3000               	movlw	0
  2368  03A8  3DF5               	addwfc	strlen@s+1,f
  2369  03A9  2B9E               	goto	l1776
  2370  03AA                     l1778:	
  2371  03AA  0020               	movlb	0	; select bank0
  2372  03AB  0849               	movf	strlen@a,w
  2373  03AC  0274               	subwf	strlen@s,w
  2374  03AD  00F4               	movwf	?_strlen
  2375  03AE  084A               	movf	strlen@a+1,w
  2376  03AF  3B75               	subwfb	strlen@s+1,w
  2377  03B0  00F5               	movwf	?_strlen+1
  2378  03B1  0008               	return
  2379  03B2                     __end_of_strlen:	
  2380                           
  2381                           	psect	text4
  2382  03C9                     __ptext4:	
  2383 ;; *************** function _strchr *****************
  2384 ;; Defined at:
  2385 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strchr.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;  s               1    wreg     PTR const unsigned char 
  2388 ;;		 -> NULL(0), Storage(64), 
  2389 ;;  c               2    4[COMMON] int 
  2390 ;; Auto vars:     Size  Location     Type
  2391 ;;  s               1    0[BANK0 ] PTR const unsigned char 
  2392 ;;		 -> NULL(0), Storage(64), 
  2393 ;; Return value:  Size  Location     Type
  2394 ;;                  1    wreg      PTR unsigned char 
  2395 ;; Registers used:
  2396 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2397 ;; Tracked objects:
  2398 ;;		On entry : 0/0
  2399 ;;		On exit  : 0/0
  2400 ;;		Unchanged: 0/0
  2401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2402 ;;      Params:         2       0       0       0       0       0       0       0
  2403 ;;      Locals:         0       1       0       0       0       0       0       0
  2404 ;;      Temps:          0       0       0       0       0       0       0       0
  2405 ;;      Totals:         2       1       0       0       0       0       0       0
  2406 ;;Total ram usage:        3 bytes
  2407 ;; Hardware stack levels used:    1
  2408 ;; Hardware stack levels required when called:    5
  2409 ;; This function calls:
  2410 ;;		Nothing
  2411 ;; This function is called by:
  2412 ;;		_strstr
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           
  2417                           ;psect for function _strchr
  2418  03C9                     _strchr:	
  2419                           
  2420                           ;incstack = 0
  2421                           ; Regs used in _strchr: [wreg+fsr1l+fsr1h+status,2+status,0]
  2422                           ;strchr@s stored from wreg
  2423  03C9  0020               	movlb	0	; select bank0
  2424  03CA  00C8               	movwf	strchr@s
  2425  03CB                     l898:	
  2426  03CB  0848               	movf	strchr@s,w
  2427  03CC  0086               	movwf	6
  2428  03CD  3001               	movlw	1	; select bank2/3
  2429  03CE  0087               	movwf	7
  2430  03CF  0801               	movf	1,w
  2431  03D0  0674               	xorwf	strchr@c,w
  2432  03D1  1D03               	skipz
  2433  03D2  2BD5               	goto	l1814
  2434  03D3  0848               	movf	strchr@s,w
  2435  03D4  0008               	return
  2436  03D5                     l1814:	
  2437  03D5  0848               	movf	strchr@s,w
  2438  03D6  0086               	movwf	6
  2439  03D7  3001               	movlw	1	; select bank2/3
  2440  03D8  0087               	movwf	7
  2441  03D9  0AC8               	incf	strchr@s,f
  2442  03DA  0801               	movf	1,w
  2443  03DB  1D03               	btfss	3,2
  2444  03DC  2BCB               	goto	l898
  2445  03DD  3000               	movlw	0
  2446  03DE  0008               	return
  2447  03DF                     __end_of_strchr:	
  2448                           
  2449                           	psect	text5
  2450  02A2                     __ptext5:	
  2451 ;; *************** function _strcpy *****************
  2452 ;; Defined at:
  2453 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strcpy.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  dest            2    0[BANK0 ] PTR unsigned char 
  2456 ;;		 -> Storage2(9), Storage(64), 
  2457 ;;  src             2    2[BANK0 ] PTR const unsigned char 
  2458 ;;		 -> ResponseBuffer(64), NULL(0), Storage(64), 
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;  d               2   10[BANK0 ] PTR unsigned char 
  2461 ;;		 -> Storage2(9), Storage(64), 
  2462 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  2463 ;;		 -> ResponseBuffer(64), NULL(0), Storage(64), 
  2464 ;; Return value:  Size  Location     Type
  2465 ;;                  2    0[BANK0 ] PTR unsigned char 
  2466 ;; Registers used:
  2467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h
  2468 ;; Tracked objects:
  2469 ;;		On entry : 0/0
  2470 ;;		On exit  : 0/0
  2471 ;;		Unchanged: 0/0
  2472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2473 ;;      Params:         0       4       0       0       0       0       0       0
  2474 ;;      Locals:         0       4       0       0       0       0       0       0
  2475 ;;      Temps:          0       4       0       0       0       0       0       0
  2476 ;;      Totals:         0      12       0       0       0       0       0       0
  2477 ;;Total ram usage:       12 bytes
  2478 ;; Hardware stack levels used:    1
  2479 ;; Hardware stack levels required when called:    5
  2480 ;; This function calls:
  2481 ;;		Nothing
  2482 ;; This function is called by:
  2483 ;;		_main
  2484 ;; This function uses a non-reentrant model
  2485 ;;
  2486                           
  2487                           
  2488                           ;psect for function _strcpy
  2489  02A2                     _strcpy:	
  2490                           
  2491                           ;incstack = 0
  2492                           ; Regs used in _strcpy: [wreg-fsr1h]
  2493  02A2  0020               	movlb	0	; select bank0
  2494  02A3  084B               	movf	strcpy@src+1,w
  2495  02A4  00D1               	movwf	strcpy@s+1
  2496  02A5  084A               	movf	strcpy@src,w
  2497  02A6  00D0               	movwf	strcpy@s
  2498  02A7  0849               	movf	strcpy@dest+1,w
  2499  02A8  00D3               	movwf	strcpy@d+1
  2500  02A9  0848               	movf	strcpy@dest,w
  2501  02AA  00D2               	movwf	strcpy@d
  2502  02AB                     l1850:	
  2503  02AB  0853               	movf	strcpy@d+1,w
  2504  02AC  00CD               	movwf	??_strcpy+1
  2505  02AD  0852               	movf	strcpy@d,w
  2506  02AE  00CC               	movwf	??_strcpy
  2507  02AF  0AD2               	incf	strcpy@d,f
  2508  02B0  1903               	skipnz
  2509  02B1  0AD3               	incf	strcpy@d+1,f
  2510  02B2  084C               	movf	??_strcpy,w
  2511  02B3  0086               	movwf	6
  2512  02B4  084D               	movf	??_strcpy+1,w
  2513  02B5  0087               	movwf	7
  2514  02B6  0851               	movf	strcpy@s+1,w
  2515  02B7  00CF               	movwf	??_strcpy+3
  2516  02B8  0850               	movf	strcpy@s,w
  2517  02B9  00CE               	movwf	??_strcpy+2
  2518  02BA  0AD0               	incf	strcpy@s,f
  2519  02BB  1903               	skipnz
  2520  02BC  0AD1               	incf	strcpy@s+1,f
  2521  02BD  084E               	movf	??_strcpy+2,w
  2522  02BE  0084               	movwf	4
  2523  02BF  084F               	movf	??_strcpy+3,w
  2524  02C0  0085               	movwf	5
  2525  02C1  0800               	movf	0,w
  2526  02C2  3FC0               	movwi [0]fsr1
  2527  02C3  0889               	movf	9,f
  2528  02C4  1903               	btfsc	3,2
  2529  02C5  0008               	return
  2530  02C6  2AAB               	goto	l1850
  2531  02C7                     __end_of_strcpy:	
  2532                           
  2533                           	psect	text6
  2534  0062                     __ptext6:	
  2535 ;; *************** function _memset *****************
  2536 ;; Defined at:
  2537 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\memset.c"
  2538 ;; Parameters:    Size  Location     Type
  2539 ;;  dest            1    wreg     PTR void 
  2540 ;;		 -> Num_Char(3), Storage2(9), 
  2541 ;;  c               2    0[BANK0 ] int 
  2542 ;;  n               2    2[BANK0 ] unsigned int 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  dest            1    6[BANK0 ] PTR void 
  2545 ;;		 -> Num_Char(3), Storage2(9), 
  2546 ;;  k               2    4[BANK0 ] unsigned int 
  2547 ;;  s               1    7[BANK0 ] PTR unsigned char 
  2548 ;;		 -> Num_Char(3), Storage2(9), 
  2549 ;; Return value:  Size  Location     Type
  2550 ;;                  1    wreg      PTR void 
  2551 ;; Registers used:
  2552 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2558 ;;      Params:         0       4       0       0       0       0       0       0
  2559 ;;      Locals:         0       4       0       0       0       0       0       0
  2560 ;;      Temps:          2       0       0       0       0       0       0       0
  2561 ;;      Totals:         2       8       0       0       0       0       0       0
  2562 ;;Total ram usage:       10 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    5
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		_main
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           
  2573                           ;psect for function _memset
  2574  0062                     _memset:	
  2575                           
  2576                           ;incstack = 0
  2577                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  2578                           ;memset@dest stored from wreg
  2579  0062  0020               	movlb	0	; select bank0
  2580  0063  00CE               	movwf	memset@dest
  2581  0064  084E               	movf	memset@dest,w
  2582  0065  00F4               	movwf	??_memset
  2583  0066  0874               	movf	??_memset,w
  2584  0067  00CF               	movwf	memset@s
  2585  0068  084A               	movf	memset@n,w
  2586  0069  044B               	iorwf	memset@n+1,w
  2587  006A  1903               	btfsc	3,2
  2588  006B  0008               	return
  2589  006C  0848               	movf	memset@c,w
  2590  006D  00F4               	movwf	??_memset
  2591  006E  084F               	movf	memset@s,w
  2592  006F  0086               	movwf	6
  2593  0070  0187               	clrf	7
  2594  0071  0874               	movf	??_memset,w
  2595  0072  0081               	movwf	1
  2596  0073  0848               	movf	memset@c,w
  2597  0074  00F4               	movwf	??_memset
  2598  0075  084A               	movf	memset@n,w
  2599  0076  074F               	addwf	memset@s,w
  2600  0077  00F5               	movwf	??_memset+1
  2601  0078  0875               	movf	??_memset+1,w
  2602  0079  3EFF               	addlw	255
  2603  007A  0086               	movwf	6
  2604  007B  0187               	clrf	7
  2605  007C  0874               	movf	??_memset,w
  2606  007D  0081               	movwf	1
  2607  007E  3000               	movlw	0
  2608  007F  024B               	subwf	memset@n+1,w
  2609  0080  3003               	movlw	3
  2610  0081  1903               	skipnz
  2611  0082  024A               	subwf	memset@n,w
  2612  0083  1C03               	btfss	3,0
  2613  0084  0008               	return
  2614  0085  0848               	movf	memset@c,w
  2615  0086  00F4               	movwf	??_memset
  2616  0087  0A4F               	incf	memset@s,w
  2617  0088  0086               	movwf	6
  2618  0089  0187               	clrf	7
  2619  008A  0874               	movf	??_memset,w
  2620  008B  0081               	movwf	1
  2621  008C  0848               	movf	memset@c,w
  2622  008D  00F4               	movwf	??_memset
  2623  008E  084F               	movf	memset@s,w
  2624  008F  3E02               	addlw	2
  2625  0090  0086               	movwf	6
  2626  0091  0187               	clrf	7
  2627  0092  0874               	movf	??_memset,w
  2628  0093  0081               	movwf	1
  2629  0094  0848               	movf	memset@c,w
  2630  0095  00F4               	movwf	??_memset
  2631  0096  084A               	movf	memset@n,w
  2632  0097  074F               	addwf	memset@s,w
  2633  0098  00F5               	movwf	??_memset+1
  2634  0099  0875               	movf	??_memset+1,w
  2635  009A  3EFE               	addlw	254
  2636  009B  0086               	movwf	6
  2637  009C  0187               	clrf	7
  2638  009D  0874               	movf	??_memset,w
  2639  009E  0081               	movwf	1
  2640  009F  0848               	movf	memset@c,w
  2641  00A0  00F4               	movwf	??_memset
  2642  00A1  084A               	movf	memset@n,w
  2643  00A2  074F               	addwf	memset@s,w
  2644  00A3  00F5               	movwf	??_memset+1
  2645  00A4  0875               	movf	??_memset+1,w
  2646  00A5  3EFD               	addlw	253
  2647  00A6  0086               	movwf	6
  2648  00A7  0187               	clrf	7
  2649  00A8  0874               	movf	??_memset,w
  2650  00A9  0081               	movwf	1
  2651  00AA  3000               	movlw	0
  2652  00AB  024B               	subwf	memset@n+1,w
  2653  00AC  3007               	movlw	7
  2654  00AD  1903               	skipnz
  2655  00AE  024A               	subwf	memset@n,w
  2656  00AF  1C03               	btfss	3,0
  2657  00B0  0008               	return
  2658  00B1  0848               	movf	memset@c,w
  2659  00B2  00F4               	movwf	??_memset
  2660  00B3  084F               	movf	memset@s,w
  2661  00B4  3E03               	addlw	3
  2662  00B5  0086               	movwf	6
  2663  00B6  0187               	clrf	7
  2664  00B7  0874               	movf	??_memset,w
  2665  00B8  0081               	movwf	1
  2666  00B9  0848               	movf	memset@c,w
  2667  00BA  00F4               	movwf	??_memset
  2668  00BB  084A               	movf	memset@n,w
  2669  00BC  074F               	addwf	memset@s,w
  2670  00BD  00F5               	movwf	??_memset+1
  2671  00BE  0875               	movf	??_memset+1,w
  2672  00BF  3EFC               	addlw	252
  2673  00C0  0086               	movwf	6
  2674  00C1  0187               	clrf	7
  2675  00C2  0874               	movf	??_memset,w
  2676  00C3  0081               	movwf	1
  2677  00C4  3000               	movlw	0
  2678  00C5  024B               	subwf	memset@n+1,w
  2679  00C6  3009               	movlw	9
  2680  00C7  1903               	skipnz
  2681  00C8  024A               	subwf	memset@n,w
  2682  00C9  1C03               	btfss	3,0
  2683  00CA  0008               	return
  2684  00CB  094F               	comf	memset@s,w
  2685  00CC  00F4               	movwf	??_memset
  2686  00CD  0950               	comf	memset@s+1,w
  2687  00CE  00F5               	movwf	??_memset+1
  2688  00CF  0AF4               	incf	??_memset,f
  2689  00D0  1903               	skipnz
  2690  00D1  0AF5               	incf	??_memset+1,f
  2691  00D2  3003               	movlw	3
  2692  00D3  0574               	andwf	??_memset,w
  2693  00D4  00CC               	movwf	memset@k
  2694  00D5  3000               	movlw	0
  2695  00D6  0575               	andwf	??_memset+1,w
  2696  00D7  00CD               	movwf	memset@k+1
  2697  00D8  084C               	movf	memset@k,w
  2698  00D9  00F4               	movwf	??_memset
  2699  00DA  0874               	movf	??_memset,w
  2700  00DB  07CF               	addwf	memset@s,f
  2701  00DC  084C               	movf	memset@k,w
  2702  00DD  02CA               	subwf	memset@n,f
  2703  00DE  084D               	movf	memset@k+1,w
  2704  00DF  3BCB               	subwfb	memset@n+1,f
  2705  00E0  30FC               	movlw	252
  2706  00E1  05CA               	andwf	memset@n,f
  2707  00E2  30FF               	movlw	255
  2708  00E3  05CB               	andwf	memset@n+1,f
  2709  00E4                     l1916:	
  2710  00E4  084A               	movf	memset@n,w
  2711  00E5  044B               	iorwf	memset@n+1,w
  2712  00E6  1903               	btfsc	3,2
  2713  00E7  0008               	return
  2714  00E8  0848               	movf	memset@c,w
  2715  00E9  00F4               	movwf	??_memset
  2716  00EA  084F               	movf	memset@s,w
  2717  00EB  0086               	movwf	6
  2718  00EC  0187               	clrf	7
  2719  00ED  0874               	movf	??_memset,w
  2720  00EE  0081               	movwf	1
  2721  00EF  3001               	movlw	1
  2722  00F0  02CA               	subwf	memset@n,f
  2723  00F1  3000               	movlw	0
  2724  00F2  3BCB               	subwfb	memset@n+1,f
  2725  00F3  3001               	movlw	1
  2726  00F4  00F4               	movwf	??_memset
  2727  00F5  0874               	movf	??_memset,w
  2728  00F6  07CF               	addwf	memset@s,f
  2729  00F7  28E4               	goto	l1916
  2730  00F8                     __end_of_memset:	
  2731                           
  2732                           	psect	text7
  2733  0365                     __ptext7:	
  2734 ;; *************** function _blockingWait *****************
  2735 ;; Defined at:
  2736 ;;		line 51 in file "uart.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;  limit           2    4[COMMON] unsigned short 
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;  counter         2    1[BANK0 ] unsigned short 
  2741 ;; Return value:  Size  Location     Type
  2742 ;;                  1    wreg      void 
  2743 ;; Registers used:
  2744 ;;		wreg, status,2
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 0/0
  2748 ;;		Unchanged: 0/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2750 ;;      Params:         2       0       0       0       0       0       0       0
  2751 ;;      Locals:         0       2       0       0       0       0       0       0
  2752 ;;      Temps:          0       1       0       0       0       0       0       0
  2753 ;;      Totals:         2       3       0       0       0       0       0       0
  2754 ;;Total ram usage:        5 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    5
  2757 ;; This function calls:
  2758 ;;		Nothing
  2759 ;; This function is called by:
  2760 ;;		_main
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           
  2765                           ;psect for function _blockingWait
  2766  0365                     _blockingWait:	
  2767                           
  2768                           ;uart.c: 51: void blockingWait (uint16_t limit);uart.c: 52: {;uart.c: 53:     for (uint1
      +                          6_t counter = 0; counter < limit; counter++)
  2769                           
  2770                           ;incstack = 0
  2771                           ; Regs used in _blockingWait: [wreg+status,2]
  2772  0365  0020               	movlb	0	; select bank0
  2773  0366  01C9               	clrf	blockingWait@counter
  2774  0367  01CA               	clrf	blockingWait@counter+1
  2775  0368                     l336:	
  2776  0368  0875               	movf	blockingWait@limit+1,w
  2777  0369  024A               	subwf	blockingWait@counter+1,w
  2778  036A  1D03               	skipz
  2779  036B  2B6E               	goto	u1005
  2780  036C  0874               	movf	blockingWait@limit,w
  2781  036D  0249               	subwf	blockingWait@counter,w
  2782  036E                     u1005:	
  2783  036E  1803               	btfsc	3,0
  2784  036F  0008               	return
  2785                           
  2786                           ;uart.c: 54:   _delay((unsigned long)((10)*(32000000/4000.0)));
  2787  0370  3068               	movlw	104
  2788  0371  0020               	movlb	0	; select bank0
  2789  0372  00C8               	movwf	??_blockingWait
  2790  0373  30E4               	movlw	228
  2791  0374                     u1137:	
  2792  0374  0B89               	decfsz	9,f
  2793  0375  2B74               	goto	u1137
  2794  0376  0BC8               	decfsz	??_blockingWait,f
  2795  0377  2B74               	goto	u1137
  2796  0378  0000               	nop
  2797  0379  3001               	movlw	1
  2798  037A  0020               	movlb	0	; select bank0
  2799  037B  07C9               	addwf	blockingWait@counter,f
  2800  037C  3000               	movlw	0
  2801  037D  3DCA               	addwfc	blockingWait@counter+1,f
  2802  037E  2B68               	goto	l336
  2803  037F                     __end_of_blockingWait:	
  2804                           
  2805                           	psect	text8
  2806  0435                     __ptext8:	
  2807 ;; *************** function _SYSTEM_Initialize *****************
  2808 ;; Defined at:
  2809 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;		None
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2, status,0, pclath, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2823 ;;      Params:         0       0       0       0       0       0       0       0
  2824 ;;      Locals:         0       0       0       0       0       0       0       0
  2825 ;;      Temps:          0       0       0       0       0       0       0       0
  2826 ;;      Totals:         0       0       0       0       0       0       0       0
  2827 ;;Total ram usage:        0 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    7
  2830 ;; This function calls:
  2831 ;;		_EUSART_Initialize
  2832 ;;		_OSCILLATOR_Initialize
  2833 ;;		_PIN_MANAGER_Initialize
  2834 ;;		_WDT_Initialize
  2835 ;; This function is called by:
  2836 ;;		_main
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           
  2841                           ;psect for function _SYSTEM_Initialize
  2842  0435                     _SYSTEM_Initialize:	
  2843                           
  2844                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  2845                           
  2846                           ;incstack = 0
  2847                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2848  0435  3183  237F  3184   	fcall	_PIN_MANAGER_Initialize
  2849                           
  2850                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  2851  0438  3184  2466  3184   	fcall	_OSCILLATOR_Initialize
  2852                           
  2853                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  2854  043B  3184  248A  3184   	fcall	_WDT_Initialize
  2855                           
  2856                           ;mcc_generated_files/mcc.c: 56:     EUSART_Initialize();
  2857  043E  3181  21FD         	fcall	_EUSART_Initialize
  2858  0440  0008               	return
  2859  0441                     __end_of_SYSTEM_Initialize:	
  2860                           
  2861                           	psect	text9
  2862  048A                     __ptext9:	
  2863 ;; *************** function _WDT_Initialize *****************
  2864 ;; Defined at:
  2865 ;;		line 67 in file "mcc_generated_files/mcc.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		wreg
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2879 ;;      Params:         0       0       0       0       0       0       0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0       0
  2882 ;;      Totals:         0       0       0       0       0       0       0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:    5
  2886 ;; This function calls:
  2887 ;;		Nothing
  2888 ;; This function is called by:
  2889 ;;		_SYSTEM_Initialize
  2890 ;; This function uses a non-reentrant model
  2891 ;;
  2892                           
  2893                           
  2894                           ;psect for function _WDT_Initialize
  2895  048A                     _WDT_Initialize:	
  2896                           
  2897                           ;mcc_generated_files/mcc.c: 70:     WDTCON = 0x16;
  2898                           
  2899                           ;incstack = 0
  2900                           ; Regs used in _WDT_Initialize: [wreg]
  2901  048A  3016               	movlw	22
  2902  048B  0021               	movlb	1	; select bank1
  2903  048C  0097               	movwf	23	;volatile
  2904  048D  0008               	return
  2905  048E                     __end_of_WDT_Initialize:	
  2906                           
  2907                           	psect	text10
  2908  037F                     __ptext10:	
  2909 ;; *************** function _PIN_MANAGER_Initialize *****************
  2910 ;; Defined at:
  2911 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;		None
  2914 ;; Auto vars:     Size  Location     Type
  2915 ;;		None
  2916 ;; Return value:  Size  Location     Type
  2917 ;;                  1    wreg      void 
  2918 ;; Registers used:
  2919 ;;		wreg, status,2
  2920 ;; Tracked objects:
  2921 ;;		On entry : 0/0
  2922 ;;		On exit  : 0/0
  2923 ;;		Unchanged: 0/0
  2924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2925 ;;      Params:         0       0       0       0       0       0       0       0
  2926 ;;      Locals:         0       0       0       0       0       0       0       0
  2927 ;;      Temps:          0       0       0       0       0       0       0       0
  2928 ;;      Totals:         0       0       0       0       0       0       0       0
  2929 ;;Total ram usage:        0 bytes
  2930 ;; Hardware stack levels used:    1
  2931 ;; Hardware stack levels required when called:    5
  2932 ;; This function calls:
  2933 ;;		Nothing
  2934 ;; This function is called by:
  2935 ;;		_SYSTEM_Initialize
  2936 ;; This function uses a non-reentrant model
  2937 ;;
  2938                           
  2939                           
  2940                           ;psect for function _PIN_MANAGER_Initialize
  2941  037F                     _PIN_MANAGER_Initialize:	
  2942                           
  2943                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  2944                           
  2945                           ;incstack = 0
  2946                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2947  037F  0022               	movlb	2	; select bank2
  2948  0380  018C               	clrf	12	;volatile
  2949                           
  2950                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  2951  0381  018D               	clrf	13	;volatile
  2952                           
  2953                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  2954  0382  018E               	clrf	14	;volatile
  2955                           
  2956                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3F;
  2957  0383  303F               	movlw	63
  2958  0384  0021               	movlb	1	; select bank1
  2959  0385  008C               	movwf	12	;volatile
  2960                           
  2961                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x70;
  2962  0386  3070               	movlw	112
  2963  0387  008D               	movwf	13	;volatile
  2964                           
  2965                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xFF;
  2966  0388  30FF               	movlw	255
  2967  0389  008E               	movwf	14	;volatile
  2968                           
  2969                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xFF;
  2970  038A  30FF               	movlw	255
  2971  038B  0023               	movlb	3	; select bank3
  2972  038C  008E               	movwf	14	;volatile
  2973                           
  2974                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x50;
  2975  038D  3050               	movlw	80
  2976  038E  008D               	movwf	13	;volatile
  2977                           
  2978                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  2979  038F  3037               	movlw	55
  2980  0390  008C               	movwf	12	;volatile
  2981                           
  2982                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  2983  0391  0024               	movlb	4	; select bank4
  2984  0392  018D               	clrf	13	;volatile
  2985                           
  2986                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  2987  0393  018C               	clrf	12	;volatile
  2988                           
  2989                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  2990  0394  0021               	movlb	1	; select bank1
  2991  0395  1795               	bsf	21,7	;volatile
  2992                           
  2993                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  2994  0396  0022               	movlb	2	; select bank2
  2995  0397  019D               	clrf	29	;volatile
  2996  0398  0008               	return
  2997  0399                     __end_of_PIN_MANAGER_Initialize:	
  2998                           
  2999                           	psect	text11
  3000  0466                     __ptext11:	
  3001 ;; *************** function _OSCILLATOR_Initialize *****************
  3002 ;; Defined at:
  3003 ;;		line 59 in file "mcc_generated_files/mcc.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;		None
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;		None
  3008 ;; Return value:  Size  Location     Type
  3009 ;;                  1    wreg      void 
  3010 ;; Registers used:
  3011 ;;		wreg, status,2
  3012 ;; Tracked objects:
  3013 ;;		On entry : 0/0
  3014 ;;		On exit  : 0/0
  3015 ;;		Unchanged: 0/0
  3016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3017 ;;      Params:         0       0       0       0       0       0       0       0
  3018 ;;      Locals:         0       0       0       0       0       0       0       0
  3019 ;;      Temps:          0       0       0       0       0       0       0       0
  3020 ;;      Totals:         0       0       0       0       0       0       0       0
  3021 ;;Total ram usage:        0 bytes
  3022 ;; Hardware stack levels used:    1
  3023 ;; Hardware stack levels required when called:    5
  3024 ;; This function calls:
  3025 ;;		Nothing
  3026 ;; This function is called by:
  3027 ;;		_SYSTEM_Initialize
  3028 ;; This function uses a non-reentrant model
  3029 ;;
  3030                           
  3031                           
  3032                           ;psect for function _OSCILLATOR_Initialize
  3033  0466                     _OSCILLATOR_Initialize:	
  3034                           
  3035                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0xF0;
  3036                           
  3037                           ;incstack = 0
  3038                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  3039  0466  30F0               	movlw	240
  3040  0467  0021               	movlb	1	; select bank1
  3041  0468  0099               	movwf	25	;volatile
  3042                           
  3043                           ;mcc_generated_files/mcc.c: 64:     BORCON = 0x00;
  3044  0469  0022               	movlb	2	; select bank2
  3045  046A  0196               	clrf	22	;volatile
  3046  046B  0008               	return
  3047  046C                     __end_of_OSCILLATOR_Initialize:	
  3048                           
  3049                           	psect	text12
  3050  01FD                     __ptext12:	
  3051 ;; *************** function _EUSART_Initialize *****************
  3052 ;; Defined at:
  3053 ;;		line 88 in file "mcc_generated_files/eusart.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;		None
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;		None
  3058 ;; Return value:  Size  Location     Type
  3059 ;;                  1    wreg      void 
  3060 ;; Registers used:
  3061 ;;		wreg, status,2, status,0, pclath, cstack
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3067 ;;      Params:         0       0       0       0       0       0       0       0
  3068 ;;      Locals:         0       0       0       0       0       0       0       0
  3069 ;;      Temps:          0       1       0       0       0       0       0       0
  3070 ;;      Totals:         0       1       0       0       0       0       0       0
  3071 ;;Total ram usage:        1 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:    6
  3074 ;; This function calls:
  3075 ;;		_EUSART_SetErrorHandler
  3076 ;;		_EUSART_SetFramingErrorHandler
  3077 ;;		_EUSART_SetOverrunErrorHandler
  3078 ;;		_EUSART_SetRxInterruptHandler
  3079 ;;		_EUSART_SetTxInterruptHandler
  3080 ;; This function is called by:
  3081 ;;		_SYSTEM_Initialize
  3082 ;; This function uses a non-reentrant model
  3083 ;;
  3084                           
  3085                           
  3086                           ;psect for function _EUSART_Initialize
  3087  01FD                     _EUSART_Initialize:	
  3088                           
  3089                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  3090                           
  3091                           ;incstack = 0
  3092                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  3093  01FD  0021               	movlb	1	; select bank1
  3094  01FE  1291               	bcf	17,5	;volatile
  3095                           
  3096                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  3097  01FF  3070               	movlw	low _EUSART_Receive_ISR
  3098  0200  00F4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  3099  0201  3002               	movlw	high _EUSART_Receive_ISR
  3100  0202  00F5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  3101  0203  3184  2484  3181   	fcall	_EUSART_SetRxInterruptHandler
  3102                           
  3103                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  3104  0206  0021               	movlb	1	; select bank1
  3105  0207  1211               	bcf	17,4	;volatile
  3106                           
  3107                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  3108  0208  3048               	movlw	low _EUSART_Transmit_ISR
  3109  0209  00F4               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  3110  020A  3003               	movlw	high _EUSART_Transmit_ISR
  3111  020B  00F5               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  3112  020C  3184  246C  3181   	fcall	_EUSART_SetTxInterruptHandler
  3113                           
  3114                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  3115  020F  3008               	movlw	8
  3116  0210  0023               	movlb	3	; select bank3
  3117  0211  009F               	movwf	31	;volatile
  3118                           
  3119                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  3120  0212  3090               	movlw	144
  3121  0213  009D               	movwf	29	;volatile
  3122                           
  3123                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  3124  0214  3024               	movlw	36
  3125  0215  009E               	movwf	30	;volatile
  3126                           
  3127                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0x44;
  3128  0216  3044               	movlw	68
  3129  0217  009B               	movwf	27	;volatile
  3130                           
  3131                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;
  3132  0218  019C               	clrf	28	;volatile
  3133                           
  3134                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  3135  0219  3097               	movlw	low _EUSART_DefaultFramingErrorHandler
  3136  021A  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  3137  021B  3004               	movlw	high _EUSART_DefaultFramingErrorHandler
  3138  021C  00F5               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  3139  021D  3184  2478  3181   	fcall	_EUSART_SetFramingErrorHandler
  3140                           
  3141                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  3142  0220  308E               	movlw	low _EUSART_DefaultOverrunErrorHandler
  3143  0221  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  3144  0222  3004               	movlw	high _EUSART_DefaultOverrunErrorHandler
  3145  0223  00F5               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  3146  0224  3184  2472  3181   	fcall	_EUSART_SetOverrunErrorHandler
  3147                           
  3148                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  3149  0227  3092               	movlw	low _EUSART_DefaultErrorHandler
  3150  0228  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler
  3151  0229  3004               	movlw	high _EUSART_DefaultErrorHandler
  3152  022A  00F5               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  3153  022B  3184  247E         	fcall	_EUSART_SetErrorHandler
  3154                           
  3155                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  3156  022D  0020               	movlb	0	; select bank0
  3157  022E  01BA               	clrf	_eusartRxLastError	;volatile
  3158                           
  3159                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  3160  022F  01F9               	clrf	_eusartTxHead	;volatile
  3161                           
  3162                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  3163  0230  01F8               	clrf	_eusartTxTail	;volatile
  3164                           
  3165                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  3166  0231  3008               	movlw	8
  3167  0232  00C8               	movwf	??_EUSART_Initialize
  3168  0233  0848               	movf	??_EUSART_Initialize,w
  3169  0234  00E3               	movwf	_eusartTxBufferRemaining	;volatile
  3170                           
  3171                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  3172  0235  01F7               	clrf	_eusartRxHead	;volatile
  3173                           
  3174                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  3175  0236  01F6               	clrf	_eusartRxTail	;volatile
  3176                           
  3177                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  3178  0237  01BB               	clrf	_eusartRxCount	;volatile
  3179                           
  3180                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  3181  0238  0021               	movlb	1	; select bank1
  3182  0239  1691               	bsf	17,5	;volatile
  3183  023A  0008               	return
  3184  023B                     __end_of_EUSART_Initialize:	
  3185                           
  3186                           	psect	text13
  3187  046C                     __ptext13:	
  3188 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  3189 ;; Defined at:
  3190 ;;		line 276 in file "mcc_generated_files/eusart.c"
  3191 ;; Parameters:    Size  Location     Type
  3192 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  3193 ;;		 -> EUSART_Transmit_ISR(1), 
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;		None
  3196 ;; Return value:  Size  Location     Type
  3197 ;;                  1    wreg      void 
  3198 ;; Registers used:
  3199 ;;		wreg
  3200 ;; Tracked objects:
  3201 ;;		On entry : 0/0
  3202 ;;		On exit  : 0/0
  3203 ;;		Unchanged: 0/0
  3204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3205 ;;      Params:         2       0       0       0       0       0       0       0
  3206 ;;      Locals:         0       0       0       0       0       0       0       0
  3207 ;;      Temps:          0       0       0       0       0       0       0       0
  3208 ;;      Totals:         2       0       0       0       0       0       0       0
  3209 ;;Total ram usage:        2 bytes
  3210 ;; Hardware stack levels used:    1
  3211 ;; Hardware stack levels required when called:    5
  3212 ;; This function calls:
  3213 ;;		Nothing
  3214 ;; This function is called by:
  3215 ;;		_EUSART_Initialize
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           
  3220                           ;psect for function _EUSART_SetTxInterruptHandler
  3221  046C                     _EUSART_SetTxInterruptHandler:	
  3222                           
  3223                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  3224                           
  3225                           ;incstack = 0
  3226                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  3227  046C  0875               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  3228  046D  0020               	movlb	0	; select bank0
  3229  046E  00E2               	movwf	_EUSART_TxDefaultInterruptHandler+1
  3230  046F  0874               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  3231  0470  00E1               	movwf	_EUSART_TxDefaultInterruptHandler
  3232  0471  0008               	return
  3233  0472                     __end_of_EUSART_SetTxInterruptHandler:	
  3234                           
  3235                           	psect	text14
  3236  0472                     __ptext14:	
  3237 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  3238 ;; Defined at:
  3239 ;;		line 268 in file "mcc_generated_files/eusart.c"
  3240 ;; Parameters:    Size  Location     Type
  3241 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  3242 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;		None
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      void 
  3247 ;; Registers used:
  3248 ;;		wreg
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3254 ;;      Params:         2       0       0       0       0       0       0       0
  3255 ;;      Locals:         0       0       0       0       0       0       0       0
  3256 ;;      Temps:          0       0       0       0       0       0       0       0
  3257 ;;      Totals:         2       0       0       0       0       0       0       0
  3258 ;;Total ram usage:        2 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; Hardware stack levels required when called:    5
  3261 ;; This function calls:
  3262 ;;		Nothing
  3263 ;; This function is called by:
  3264 ;;		_EUSART_Initialize
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           
  3269                           ;psect for function _EUSART_SetOverrunErrorHandler
  3270  0472                     _EUSART_SetOverrunErrorHandler:	
  3271                           
  3272                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  3273                           
  3274                           ;incstack = 0
  3275                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  3276  0472  0875               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  3277  0473  0020               	movlb	0	; select bank0
  3278  0474  00DC               	movwf	_EUSART_OverrunErrorHandler+1
  3279  0475  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  3280  0476  00DB               	movwf	_EUSART_OverrunErrorHandler
  3281  0477  0008               	return
  3282  0478                     __end_of_EUSART_SetOverrunErrorHandler:	
  3283                           
  3284                           	psect	text15
  3285  0478                     __ptext15:	
  3286 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  3287 ;; Defined at:
  3288 ;;		line 264 in file "mcc_generated_files/eusart.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  3291 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  3292 ;; Auto vars:     Size  Location     Type
  3293 ;;		None
  3294 ;; Return value:  Size  Location     Type
  3295 ;;                  1    wreg      void 
  3296 ;; Registers used:
  3297 ;;		wreg
  3298 ;; Tracked objects:
  3299 ;;		On entry : 0/0
  3300 ;;		On exit  : 0/0
  3301 ;;		Unchanged: 0/0
  3302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3303 ;;      Params:         2       0       0       0       0       0       0       0
  3304 ;;      Locals:         0       0       0       0       0       0       0       0
  3305 ;;      Temps:          0       0       0       0       0       0       0       0
  3306 ;;      Totals:         2       0       0       0       0       0       0       0
  3307 ;;Total ram usage:        2 bytes
  3308 ;; Hardware stack levels used:    1
  3309 ;; Hardware stack levels required when called:    5
  3310 ;; This function calls:
  3311 ;;		Nothing
  3312 ;; This function is called by:
  3313 ;;		_EUSART_Initialize
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           
  3318                           ;psect for function _EUSART_SetFramingErrorHandler
  3319  0478                     _EUSART_SetFramingErrorHandler:	
  3320                           
  3321                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  3322                           
  3323                           ;incstack = 0
  3324                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  3325  0478  0875               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  3326  0479  0020               	movlb	0	; select bank0
  3327  047A  00DE               	movwf	_EUSART_FramingErrorHandler+1
  3328  047B  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  3329  047C  00DD               	movwf	_EUSART_FramingErrorHandler
  3330  047D  0008               	return
  3331  047E                     __end_of_EUSART_SetFramingErrorHandler:	
  3332                           
  3333                           	psect	text16
  3334  047E                     __ptext16:	
  3335 ;; *************** function _EUSART_SetErrorHandler *****************
  3336 ;; Defined at:
  3337 ;;		line 272 in file "mcc_generated_files/eusart.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  3340 ;;		 -> EUSART_DefaultErrorHandler(1), 
  3341 ;; Auto vars:     Size  Location     Type
  3342 ;;		None
  3343 ;; Return value:  Size  Location     Type
  3344 ;;                  1    wreg      void 
  3345 ;; Registers used:
  3346 ;;		wreg
  3347 ;; Tracked objects:
  3348 ;;		On entry : 0/0
  3349 ;;		On exit  : 0/0
  3350 ;;		Unchanged: 0/0
  3351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3352 ;;      Params:         2       0       0       0       0       0       0       0
  3353 ;;      Locals:         0       0       0       0       0       0       0       0
  3354 ;;      Temps:          0       0       0       0       0       0       0       0
  3355 ;;      Totals:         2       0       0       0       0       0       0       0
  3356 ;;Total ram usage:        2 bytes
  3357 ;; Hardware stack levels used:    1
  3358 ;; Hardware stack levels required when called:    5
  3359 ;; This function calls:
  3360 ;;		Nothing
  3361 ;; This function is called by:
  3362 ;;		_EUSART_Initialize
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           
  3367                           ;psect for function _EUSART_SetErrorHandler
  3368  047E                     _EUSART_SetErrorHandler:	
  3369                           
  3370                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  3371                           
  3372                           ;incstack = 0
  3373                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  3374  047E  0875               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  3375  047F  0020               	movlb	0	; select bank0
  3376  0480  00DA               	movwf	_EUSART_ErrorHandler+1
  3377  0481  0874               	movf	EUSART_SetErrorHandler@interruptHandler,w
  3378  0482  00D9               	movwf	_EUSART_ErrorHandler
  3379  0483  0008               	return
  3380  0484                     __end_of_EUSART_SetErrorHandler:	
  3381                           
  3382                           	psect	text17
  3383  0416                     __ptext17:	
  3384 ;; *************** function _ReadyReceiveBuffer *****************
  3385 ;; Defined at:
  3386 ;;		line 41 in file "uart.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;		None
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;  position        1    5[COMMON] unsigned char 
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3400 ;;      Params:         0       0       0       0       0       0       0       0
  3401 ;;      Locals:         1       0       0       0       0       0       0       0
  3402 ;;      Temps:          1       0       0       0       0       0       0       0
  3403 ;;      Totals:         2       0       0       0       0       0       0       0
  3404 ;;Total ram usage:        2 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:    5
  3407 ;; This function calls:
  3408 ;;		Nothing
  3409 ;; This function is called by:
  3410 ;;		_main
  3411 ;; This function uses a non-reentrant model
  3412 ;;
  3413                           
  3414                           
  3415                           ;psect for function _ReadyReceiveBuffer
  3416  0416                     _ReadyReceiveBuffer:	
  3417                           
  3418                           ;uart.c: 43:     ResponseIndex = 0;
  3419                           
  3420                           ;incstack = 0
  3421                           ; Regs used in _ReadyReceiveBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  3422  0416  0020               	movlb	0	; select bank0
  3423  0417  01B9               	clrf	_ResponseIndex
  3424                           
  3425                           ;uart.c: 44:     for (uint8_t position = 0; position < 64; position++)
  3426  0418  01F5               	clrf	ReadyReceiveBuffer@position
  3427  0419                     l1834:	
  3428                           
  3429                           ;uart.c: 45:         ResponseBuffer[position] = 0;
  3430  0419  0875               	movf	ReadyReceiveBuffer@position,w
  3431  041A  3EA0               	addlw	(low (_ResponseBuffer| 0))& (0+255)
  3432  041B  0086               	movwf	6
  3433  041C  0187               	clrf	7
  3434  041D  0181               	clrf	1
  3435  041E  3001               	movlw	1
  3436  041F  00F4               	movwf	??_ReadyReceiveBuffer
  3437  0420  0874               	movf	??_ReadyReceiveBuffer,w
  3438  0421  07F5               	addwf	ReadyReceiveBuffer@position,f
  3439  0422  3040               	movlw	64
  3440  0423  0275               	subwf	ReadyReceiveBuffer@position,w
  3441  0424  1803               	btfsc	3,0
  3442  0425  0008               	return
  3443  0426  2C19               	goto	l1834
  3444  0427                     __end_of_ReadyReceiveBuffer:	
  3445                           
  3446                           	psect	text18
  3447  030E                     __ptext18:	
  3448 ;; *************** function _INIT_SMART_LIGHT *****************
  3449 ;; Defined at:
  3450 ;;		line 22 in file "uart.c"
  3451 ;; Parameters:    Size  Location     Type
  3452 ;;		None
  3453 ;; Auto vars:     Size  Location     Type
  3454 ;;		None
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  1    wreg      void 
  3457 ;; Registers used:
  3458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3464 ;;      Params:         0       0       0       0       0       0       0       0
  3465 ;;      Locals:         0       0       0       0       0       0       0       0
  3466 ;;      Temps:          0       0       0       0       0       0       0       0
  3467 ;;      Totals:         0       0       0       0       0       0       0       0
  3468 ;;Total ram usage:        0 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    7
  3471 ;; This function calls:
  3472 ;;		_EUSART_SetRxInterruptHandler
  3473 ;;		_SendString
  3474 ;; This function is called by:
  3475 ;;		_main
  3476 ;; This function uses a non-reentrant model
  3477 ;;
  3478                           
  3479                           
  3480                           ;psect for function _INIT_SMART_LIGHT
  3481  030E                     _INIT_SMART_LIGHT:	
  3482                           
  3483                           ;uart.c: 24:     uart[SML].SetRxISR(ReceivedMessage);
  3484                           
  3485                           ;incstack = 0
  3486                           ; Regs used in _INIT_SMART_LIGHT: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3487  030E  303B               	movlw	low _ReceivedMessage
  3488  030F  00F4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  3489  0310  3002               	movlw	high _ReceivedMessage
  3490  0311  00F5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  3491  0312  30EB               	movlw	low ((_uart+12)| (0+32768))
  3492  0313  0084               	movwf	4
  3493  0314  3083               	movlw	high ((_uart+12)| (0+32768))
  3494  0315  0085               	movwf	5
  3495  0316  3F01               	moviw [1]fsr0
  3496  0317  008A               	movwf	10
  3497  0318  3F00               	moviw [0]fsr0
  3498  0319  000A               	callw
  3499  031A  3183               	pagesel	$
  3500                           
  3501                           ;uart.c: 25:     SendString("SYS FACTORY RESET");
  3502  031B  30F3               	movlw	low (STR_2| (0+32768))
  3503  031C  0020               	movlb	0	; select bank0
  3504  031D  00C8               	movwf	SendString@command
  3505  031E  3083               	movlw	high (STR_2| (0+32768))
  3506  031F  00C9               	movwf	SendString@command+1
  3507  0320  3183  232B  3183   	fcall	_SendString
  3508                           
  3509                           ;uart.c: 26:     SendString("SMART LIGHT INIT");
  3510  0323  3005               	movlw	low (STR_3| (0+32768))
  3511  0324  0020               	movlb	0	; select bank0
  3512  0325  00C8               	movwf	SendString@command
  3513  0326  3084               	movlw	high (STR_3| (0+32768))
  3514  0327  00C9               	movwf	SendString@command+1
  3515  0328  3183  232B         	fcall	_SendString
  3516  032A  0008               	return
  3517  032B                     __end_of_INIT_SMART_LIGHT:	
  3518                           
  3519                           	psect	text19
  3520  032B                     __ptext19:	
  3521 ;; *************** function _SendString *****************
  3522 ;; Defined at:
  3523 ;;		line 7 in file "uart.c"
  3524 ;; Parameters:    Size  Location     Type
  3525 ;;  command         2    0[BANK0 ] PTR const unsigned char 
  3526 ;;		 -> STR_3(17), STR_2(18), 
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;		None
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3538 ;;      Params:         0       2       0       0       0       0       0       0
  3539 ;;      Locals:         0       0       0       0       0       0       0       0
  3540 ;;      Temps:          0       1       0       0       0       0       0       0
  3541 ;;      Totals:         0       3       0       0       0       0       0       0
  3542 ;;Total ram usage:        3 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    6
  3545 ;; This function calls:
  3546 ;;		_EUSART_Write
  3547 ;; This function is called by:
  3548 ;;		_INIT_SMART_LIGHT
  3549 ;; This function uses a non-reentrant model
  3550 ;;
  3551                           
  3552                           
  3553                           ;psect for function _SendString
  3554  032B                     _SendString:	
  3555  032B                     l1770:	
  3556                           ;uart.c: 7: void SendString(const char* command);uart.c: 8: {;uart.c: 9:     while (Resp
      +                          onseIndex-- != 0)
  3557                           
  3558                           ;incstack = 0
  3559                           ; Regs used in _SendString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3560                           
  3561                           
  3562                           ;uart.c: 9:     while (ResponseIndex-- != 0)
  3563  032B  3001               	movlw	1
  3564  032C  0020               	movlb	0	; select bank0
  3565  032D  02B9               	subwf	_ResponseIndex,f
  3566  032E  0A39               	incf	_ResponseIndex,w
  3567  032F  1903               	btfsc	3,2
  3568  0330  0008               	return
  3569                           
  3570                           ;uart.c: 10:         uart[SML].Write(*command++);
  3571  0331  0848               	movf	SendString@command,w
  3572  0332  0084               	movwf	4
  3573  0333  0849               	movf	SendString@command+1,w
  3574  0334  0085               	movwf	5
  3575  0335  0800               	movf	0,w	;code access
  3576  0336  00CA               	movwf	??_SendString
  3577  0337  084A               	movf	??_SendString,w
  3578  0338  00F4               	movwf	EUSART_Write@txData
  3579  0339  30E1               	movlw	low ((_uart+2)| (0+32768))
  3580  033A  0084               	movwf	4
  3581  033B  3083               	movlw	high ((_uart+2)| (0+32768))
  3582  033C  0085               	movwf	5
  3583  033D  3F01               	moviw [1]fsr0
  3584  033E  008A               	movwf	10
  3585  033F  3F00               	moviw [0]fsr0
  3586  0340  000A               	callw
  3587  0341  3183               	pagesel	$
  3588  0342  3001               	movlw	1
  3589  0343  0020               	movlb	0	; select bank0
  3590  0344  07C8               	addwf	SendString@command,f
  3591  0345  3000               	movlw	0
  3592  0346  3DC9               	addwfc	SendString@command+1,f
  3593  0347  2B2B               	goto	l1770
  3594  0348                     __end_of_SendString:	
  3595                           
  3596                           	psect	text20
  3597  02EC                     __ptext20:	
  3598 ;; *************** function _EUSART_Write *****************
  3599 ;; Defined at:
  3600 ;;		line 173 in file "mcc_generated_files/eusart.c"
  3601 ;; Parameters:    Size  Location     Type
  3602 ;;  txData          1    4[COMMON] unsigned char 
  3603 ;; Auto vars:     Size  Location     Type
  3604 ;;		None
  3605 ;; Return value:  Size  Location     Type
  3606 ;;                  1    wreg      void 
  3607 ;; Registers used:
  3608 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3609 ;; Tracked objects:
  3610 ;;		On entry : 0/0
  3611 ;;		On exit  : 0/0
  3612 ;;		Unchanged: 0/0
  3613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3614 ;;      Params:         1       0       0       0       0       0       0       0
  3615 ;;      Locals:         0       0       0       0       0       0       0       0
  3616 ;;      Temps:          1       0       0       0       0       0       0       0
  3617 ;;      Totals:         2       0       0       0       0       0       0       0
  3618 ;;Total ram usage:        2 bytes
  3619 ;; Hardware stack levels used:    1
  3620 ;; Hardware stack levels required when called:    5
  3621 ;; This function calls:
  3622 ;;		Nothing
  3623 ;; This function is called by:
  3624 ;;		_SendString
  3625 ;;		_SML_SendString
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           
  3630                           ;psect for function _EUSART_Write
  3631  02EC                     _EUSART_Write:	
  3632  02EC                     l1694:	
  3633                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  3634                           
  3635                           ;incstack = 0
  3636                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  3637                           
  3638                           
  3639                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  3640  02EC  0020               	movlb	0	; select bank0
  3641  02ED  0863               	movf	_eusartTxBufferRemaining,w	;volatile
  3642  02EE  1903               	btfsc	3,2
  3643  02EF  2AEC               	goto	l1694
  3644                           
  3645                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  3646  02F0  0021               	movlb	1	; select bank1
  3647  02F1  1A11               	btfsc	17,4	;volatile
  3648  02F2  2AF7               	goto	l100
  3649                           
  3650                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  3651  02F3  0874               	movf	EUSART_Write@txData,w
  3652  02F4  0023               	movlb	3	; select bank3
  3653  02F5  009A               	movwf	26	;volatile
  3654                           
  3655                           ;mcc_generated_files/eusart.c: 182:     }
  3656  02F6  2B0B               	goto	l1708
  3657  02F7                     l100:	
  3658                           ;mcc_generated_files/eusart.c: 183:     else
  3659                           
  3660                           
  3661                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  3662  02F7  1211               	bcf	17,4	;volatile
  3663                           
  3664                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  3665  02F8  0874               	movf	EUSART_Write@txData,w
  3666  02F9  00F5               	movwf	??_EUSART_Write
  3667  02FA  0879               	movf	_eusartTxHead,w
  3668  02FB  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  3669  02FC  0086               	movwf	6
  3670  02FD  0187               	clrf	7
  3671  02FE  0875               	movf	??_EUSART_Write,w
  3672  02FF  0081               	movwf	1
  3673  0300  3001               	movlw	1
  3674  0301  00F5               	movwf	??_EUSART_Write
  3675  0302  0875               	movf	??_EUSART_Write,w
  3676  0303  07F9               	addwf	_eusartTxHead,f	;volatile
  3677                           
  3678                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  3679  0304  3008               	movlw	8
  3680  0305  0279               	subwf	_eusartTxHead,w	;volatile
  3681  0306  1803               	btfsc	3,0
  3682                           
  3683                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  3684  0307  01F9               	clrf	_eusartTxHead	;volatile
  3685                           
  3686                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  3687  0308  3001               	movlw	1
  3688  0309  0020               	movlb	0	; select bank0
  3689  030A  02E3               	subwf	_eusartTxBufferRemaining,f	;volatile
  3690  030B                     l1708:	
  3691                           
  3692                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  3693  030B  0021               	movlb	1	; select bank1
  3694  030C  1611               	bsf	17,4	;volatile
  3695  030D  0008               	return
  3696  030E                     __end_of_EUSART_Write:	
  3697                           
  3698                           	psect	text21
  3699  0484                     __ptext21:	
  3700 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  3701 ;; Defined at:
  3702 ;;		line 280 in file "mcc_generated_files/eusart.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  3705 ;;		 -> ReceivedMessage(1), EUSART_Receive_ISR(1), 
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;		None
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  1    wreg      void 
  3710 ;; Registers used:
  3711 ;;		wreg
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3717 ;;      Params:         2       0       0       0       0       0       0       0
  3718 ;;      Locals:         0       0       0       0       0       0       0       0
  3719 ;;      Temps:          0       0       0       0       0       0       0       0
  3720 ;;      Totals:         2       0       0       0       0       0       0       0
  3721 ;;Total ram usage:        2 bytes
  3722 ;; Hardware stack levels used:    1
  3723 ;; Hardware stack levels required when called:    5
  3724 ;; This function calls:
  3725 ;;		Nothing
  3726 ;; This function is called by:
  3727 ;;		_EUSART_Initialize
  3728 ;;		_INIT_SMART_LIGHT
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           
  3733                           ;psect for function _EUSART_SetRxInterruptHandler
  3734  0484                     _EUSART_SetRxInterruptHandler:	
  3735                           
  3736                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  3737                           
  3738                           ;incstack = 0
  3739                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  3740  0484  0875               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  3741  0485  0020               	movlb	0	; select bank0
  3742  0486  00E0               	movwf	_EUSART_RxDefaultInterruptHandler+1
  3743  0487  0874               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  3744  0488  00DF               	movwf	_EUSART_RxDefaultInterruptHandler
  3745  0489  0008               	return
  3746  048A                     __end_of_EUSART_SetRxInterruptHandler:	
  3747                           
  3748                           	psect	text22
  3749  0495                     __ptext22:	
  3750 ;; *************** function _GetResponse *****************
  3751 ;; Defined at:
  3752 ;;		line 47 in file "uart.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;		None
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;		None
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  1    wreg      PTR unsigned char 
  3759 ;; Registers used:
  3760 ;;		wreg
  3761 ;; Tracked objects:
  3762 ;;		On entry : 0/0
  3763 ;;		On exit  : 0/0
  3764 ;;		Unchanged: 0/0
  3765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3766 ;;      Params:         0       0       0       0       0       0       0       0
  3767 ;;      Locals:         0       0       0       0       0       0       0       0
  3768 ;;      Temps:          0       0       0       0       0       0       0       0
  3769 ;;      Totals:         0       0       0       0       0       0       0       0
  3770 ;;Total ram usage:        0 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    5
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		_main
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           
  3781                           ;psect for function _GetResponse
  3782  0495                     _GetResponse:	
  3783                           
  3784                           ;uart.c: 49:     return ResponseBuffer;
  3785                           
  3786                           ;incstack = 0
  3787                           ; Regs used in _GetResponse: [wreg]
  3788  0495  30A0               	movlw	(low (_ResponseBuffer| 0))& (0+255)
  3789  0496  0008               	return
  3790  0497                     __end_of_GetResponse:	
  3791                           
  3792                           	psect	intentry
  3793  0004                     __pintentry:	
  3794 ;; *************** function _INTERRUPT_InterruptManager *****************
  3795 ;; Defined at:
  3796 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  3797 ;; Parameters:    Size  Location     Type
  3798 ;;		None
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;		None
  3801 ;; Return value:  Size  Location     Type
  3802 ;;                  1    wreg      void 
  3803 ;; Registers used:
  3804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3805 ;; Tracked objects:
  3806 ;;		On entry : 0/0
  3807 ;;		On exit  : 0/0
  3808 ;;		Unchanged: 0/0
  3809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3810 ;;      Params:         0       0       0       0       0       0       0       0
  3811 ;;      Locals:         0       0       0       0       0       0       0       0
  3812 ;;      Temps:          0       0       0       0       0       0       0       0
  3813 ;;      Totals:         0       0       0       0       0       0       0       0
  3814 ;;Total ram usage:        0 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; Hardware stack levels required when called:    4
  3817 ;; This function calls:
  3818 ;;		Absolute function
  3819 ;;		_EUSART_Receive_ISR
  3820 ;;		_EUSART_Transmit_ISR
  3821 ;;		_ReceivedMessage
  3822 ;; This function is called by:
  3823 ;;		Interrupt level 1
  3824 ;; This function uses a non-reentrant model
  3825 ;;
  3826                           
  3827  0004                     _INTERRUPT_InterruptManager:	
  3828                           
  3829                           ;incstack = 0
  3830  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3831                           
  3832                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3833  0005  3180               	pagesel	$
  3834                           
  3835                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  3836  0006  1F0B               	btfss	11,6	;volatile
  3837  0007  281F               	goto	i1l165
  3838                           
  3839                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  3840  0008  0021               	movlb	1	; select bank1
  3841  0009  1E11               	btfss	17,4	;volatile
  3842  000A  2814               	goto	i1l160
  3843  000B  0020               	movlb	0	; select bank0
  3844  000C  1E11               	btfss	17,4	;volatile
  3845  000D  2814               	goto	i1l160
  3846                           
  3847                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
  3848  000E  0862               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  3849  000F  008A               	movwf	10
  3850  0010  0861               	movf	_EUSART_TxDefaultInterruptHandler,w
  3851  0011  000A               	callw
  3852  0012  3180               	pagesel	$
  3853                           
  3854                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  3855  0013  281F               	goto	i1l165
  3856  0014                     i1l160:	
  3857                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  3858                           
  3859  0014  0021               	movlb	1	; select bank1
  3860  0015  1E91               	btfss	17,5	;volatile
  3861  0016  281F               	goto	i1l165
  3862  0017  0020               	movlb	0	; select bank0
  3863  0018  1E91               	btfss	17,5	;volatile
  3864  0019  281F               	goto	i1l165
  3865                           
  3866                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
  3867  001A  0860               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  3868  001B  008A               	movwf	10
  3869  001C  085F               	movf	_EUSART_RxDefaultInterruptHandler,w
  3870  001D  000A               	callw
  3871  001E  3180               	pagesel	$
  3872  001F                     i1l165:	
  3873                           ;mcc_generated_files/interrupt_manager.c: 69:     }
  3874                           
  3875                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  3876                           
  3877  001F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3878  0020  0009               	retfie
  3879  0021                     __end_of_INTERRUPT_InterruptManager:	
  3880                           
  3881                           	psect	text24
  3882  0270                     __ptext24:	
  3883 ;; *************** function _EUSART_Receive_ISR *****************
  3884 ;; Defined at:
  3885 ;;		line 216 in file "mcc_generated_files/eusart.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;		None
  3888 ;; Auto vars:     Size  Location     Type
  3889 ;;		None
  3890 ;; Return value:  Size  Location     Type
  3891 ;;                  1    wreg      void 
  3892 ;; Registers used:
  3893 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3894 ;; Tracked objects:
  3895 ;;		On entry : 0/0
  3896 ;;		On exit  : 0/0
  3897 ;;		Unchanged: 0/0
  3898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3899 ;;      Params:         0       0       0       0       0       0       0       0
  3900 ;;      Locals:         0       0       0       0       0       0       0       0
  3901 ;;      Temps:          0       0       0       0       0       0       0       0
  3902 ;;      Totals:         0       0       0       0       0       0       0       0
  3903 ;;Total ram usage:        0 bytes
  3904 ;; Hardware stack levels used:    1
  3905 ;; Hardware stack levels required when called:    2
  3906 ;; This function calls:
  3907 ;;		Absolute function
  3908 ;;		_EUSART_DefaultErrorHandler
  3909 ;;		_EUSART_DefaultFramingErrorHandler
  3910 ;;		_EUSART_DefaultOverrunErrorHandler
  3911 ;;		_EUSART_RxDataHandler
  3912 ;; This function is called by:
  3913 ;;		_EUSART_Initialize
  3914 ;;		_ReceivedMessage
  3915 ;;		_INTERRUPT_InterruptManager
  3916 ;; This function uses a non-reentrant model
  3917 ;;
  3918                           
  3919                           
  3920                           ;psect for function _EUSART_Receive_ISR
  3921  0270                     _EUSART_Receive_ISR:	
  3922                           
  3923                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  3924                           
  3925                           ;incstack = 0
  3926                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3927  0270  0877               	movf	_eusartRxHead,w	;volatile
  3928  0271  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3929  0272  0086               	movwf	6
  3930  0273  0187               	clrf	7
  3931  0274  0181               	clrf	1
  3932                           
  3933                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
  3934  0275  0023               	movlb	3	; select bank3
  3935  0276  1D1D               	btfss	29,2	;volatile
  3936  0277  2A83               	goto	i1l1412
  3937                           
  3938                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  3939  0278  0877               	movf	_eusartRxHead,w	;volatile
  3940  0279  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3941  027A  0086               	movwf	6
  3942  027B  0187               	clrf	7
  3943  027C  1481               	bsf	1,1
  3944                           
  3945                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
  3946  027D  0020               	movlb	0	; select bank0
  3947  027E  085E               	movf	_EUSART_FramingErrorHandler+1,w
  3948  027F  008A               	movwf	10
  3949  0280  085D               	movf	_EUSART_FramingErrorHandler,w
  3950  0281  000A               	callw
  3951  0282  3182               	pagesel	$
  3952  0283                     i1l1412:	
  3953                           
  3954                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
  3955  0283  0023               	movlb	3	; select bank3
  3956  0284  1C9D               	btfss	29,1	;volatile
  3957  0285  2A91               	goto	i1l1418
  3958                           
  3959                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  3960  0286  0877               	movf	_eusartRxHead,w	;volatile
  3961  0287  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3962  0288  0086               	movwf	6
  3963  0289  0187               	clrf	7
  3964  028A  1501               	bsf	1,2
  3965                           
  3966                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
  3967  028B  0020               	movlb	0	; select bank0
  3968  028C  085C               	movf	_EUSART_OverrunErrorHandler+1,w
  3969  028D  008A               	movwf	10
  3970  028E  085B               	movf	_EUSART_OverrunErrorHandler,w
  3971  028F  000A               	callw
  3972  0290  3182               	pagesel	$
  3973  0291                     i1l1418:	
  3974                           
  3975                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
  3976  0291  0877               	movf	_eusartRxHead,w	;volatile
  3977  0292  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3978  0293  0086               	movwf	6
  3979  0294  0187               	clrf	7
  3980  0295  0801               	movf	1,w
  3981  0296  1903               	btfsc	3,2
  3982  0297  2A9F               	goto	i1l1422
  3983                           
  3984                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
  3985  0298  0020               	movlb	0	; select bank0
  3986  0299  085A               	movf	_EUSART_ErrorHandler+1,w
  3987  029A  008A               	movwf	10
  3988  029B  0859               	movf	_EUSART_ErrorHandler,w
  3989  029C  000A               	callw
  3990  029D  3182               	pagesel	$
  3991                           
  3992                           ;mcc_generated_files/eusart.c: 233:     } else {
  3993  029E  0008               	return
  3994  029F                     i1l1422:	
  3995                           
  3996                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
  3997  029F  3183  23B2         	fcall	_EUSART_RxDataHandler
  3998  02A1  0008               	return
  3999  02A2                     __end_of_EUSART_Receive_ISR:	
  4000                           
  4001                           	psect	text25
  4002  023B                     __ptext25:	
  4003 ;; *************** function _ReceivedMessage *****************
  4004 ;; Defined at:
  4005 ;;		line 28 in file "uart.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;		None
  4008 ;; Auto vars:     Size  Location     Type
  4009 ;;  readByte        1    3[COMMON] unsigned char 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  1    wreg      void 
  4012 ;; Registers used:
  4013 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4019 ;;      Params:         0       0       0       0       0       0       0       0
  4020 ;;      Locals:         1       0       0       0       0       0       0       0
  4021 ;;      Temps:          1       0       0       0       0       0       0       0
  4022 ;;      Totals:         2       0       0       0       0       0       0       0
  4023 ;;Total ram usage:        2 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    3
  4026 ;; This function calls:
  4027 ;;		_EUSART_Read
  4028 ;;		_EUSART_Receive_ISR
  4029 ;;		_EUSART_is_rx_ready
  4030 ;; This function is called by:
  4031 ;;		_INIT_SMART_LIGHT
  4032 ;;		_INTERRUPT_InterruptManager
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           
  4037                           ;psect for function _ReceivedMessage
  4038  023B                     _ReceivedMessage:	
  4039                           
  4040                           ;uart.c: 30:     uart[SML].RxDefaultISR();
  4041                           
  4042                           ;incstack = 0
  4043                           ; Regs used in _ReceivedMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4044  023B  30E9               	movlw	low ((_uart+10)| (0+32768))
  4045  023C  0084               	movwf	4
  4046  023D  3083               	movlw	high ((_uart+10)| (0+32768))
  4047  023E  0085               	movwf	5
  4048  023F  3F01               	moviw [1]fsr0
  4049  0240  008A               	movwf	10
  4050  0241  3F00               	moviw [0]fsr0
  4051  0242  000A               	callw
  4052  0243  3182               	pagesel	$
  4053  0244                     i1l1614:	
  4054                           ;uart.c: 31:     while (!uart[SML].DataReady()) {
  4055                           
  4056                           
  4057                           ;uart.c: 31:     while (!uart[SML].DataReady()) {
  4058  0244  30E5               	movlw	low ((_uart+6)| (0+32768))
  4059  0245  0084               	movwf	4
  4060  0246  3083               	movlw	high ((_uart+6)| (0+32768))
  4061  0247  0085               	movwf	5
  4062  0248  3F01               	moviw [1]fsr0
  4063  0249  008A               	movwf	10
  4064  024A  3F00               	moviw [0]fsr0
  4065  024B  000A               	callw
  4066  024C  3182               	pagesel	$
  4067  024D  3A00               	xorlw	0
  4068  024E  1D03               	btfss	3,2
  4069  024F  2A52               	goto	i1l1616
  4070                           
  4071                           ;uart.c: 32:         __nop();
  4072  0250  0000               	nop
  4073  0251  2A44               	goto	i1l1614
  4074  0252                     i1l1616:	
  4075                           
  4076                           ;uart.c: 34:     uint8_t readByte = uart[SML].Read();
  4077  0252  30DF               	movlw	low (_uart| (0+32768))
  4078  0253  0084               	movwf	4
  4079  0254  3083               	movlw	high (_uart| (0+32768))
  4080  0255  0085               	movwf	5
  4081  0256  3F01               	moviw [1]fsr0
  4082  0257  008A               	movwf	10
  4083  0258  3F00               	moviw [0]fsr0
  4084  0259  000A               	callw
  4085  025A  3182               	pagesel	$
  4086  025B  00F2               	movwf	??_ReceivedMessage
  4087  025C  0872               	movf	??_ReceivedMessage,w
  4088  025D  00F3               	movwf	ReceivedMessage@readByte
  4089                           
  4090                           ;uart.c: 35:     if ((ResponseIndex < 64) )
  4091  025E  3040               	movlw	64
  4092  025F  0020               	movlb	0	; select bank0
  4093  0260  0239               	subwf	_ResponseIndex,w
  4094  0261  1803               	skipnc
  4095  0262  0008               	return
  4096                           
  4097                           ;uart.c: 36:         ResponseBuffer[ResponseIndex++] = readByte;
  4098  0263  0873               	movf	ReceivedMessage@readByte,w
  4099  0264  00F2               	movwf	??_ReceivedMessage
  4100  0265  0839               	movf	_ResponseIndex,w
  4101  0266  3EA0               	addlw	(low (_ResponseBuffer| 0))& (0+255)
  4102  0267  0086               	movwf	6
  4103  0268  0187               	clrf	7
  4104  0269  0872               	movf	??_ReceivedMessage,w
  4105  026A  0081               	movwf	1
  4106  026B  3001               	movlw	1
  4107  026C  00F2               	movwf	??_ReceivedMessage
  4108  026D  0872               	movf	??_ReceivedMessage,w
  4109  026E  07B9               	addwf	_ResponseIndex,f
  4110  026F  0008               	return
  4111  0270                     __end_of_ReceivedMessage:	
  4112                           
  4113                           	psect	text26
  4114  044C                     __ptext26:	
  4115 ;; *************** function _EUSART_is_rx_ready *****************
  4116 ;; Defined at:
  4117 ;;		line 137 in file "mcc_generated_files/eusart.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;		None
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;		None
  4122 ;; Return value:  Size  Location     Type
  4123 ;;                  1    wreg      _Bool 
  4124 ;; Registers used:
  4125 ;;		wreg, status,2, status,0
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4131 ;;      Params:         0       0       0       0       0       0       0       0
  4132 ;;      Locals:         0       0       0       0       0       0       0       0
  4133 ;;      Temps:          0       0       0       0       0       0       0       0
  4134 ;;      Totals:         0       0       0       0       0       0       0       0
  4135 ;;Total ram usage:        0 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; This function calls:
  4138 ;;		Nothing
  4139 ;; This function is called by:
  4140 ;;		_ReceivedMessage
  4141 ;; This function uses a non-reentrant model
  4142 ;;
  4143                           
  4144                           
  4145                           ;psect for function _EUSART_is_rx_ready
  4146  044C                     _EUSART_is_rx_ready:	
  4147                           
  4148                           ;mcc_generated_files/eusart.c: 139:     return (eusartRxCount ? 1 : 0);
  4149                           
  4150                           ;incstack = 0
  4151                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
  4152  044C  0020               	movlb	0	; select bank0
  4153  044D  083B               	movf	_eusartRxCount,w	;volatile
  4154  044E  1903               	btfsc	3,2
  4155  044F  2C52               	goto	u48_20
  4156  0450  3001               	movlw	1
  4157  0451  0008               	return
  4158  0452                     u48_20:	
  4159  0452  3000               	movlw	0
  4160  0453  0008               	return
  4161  0454                     __end_of_EUSART_is_rx_ready:	
  4162                           
  4163                           	psect	text27
  4164  048E                     __ptext27:	
  4165 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  4166 ;; Defined at:
  4167 ;;		line 252 in file "mcc_generated_files/eusart.c"
  4168 ;; Parameters:    Size  Location     Type
  4169 ;;		None
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;		None
  4172 ;; Return value:  Size  Location     Type
  4173 ;;                  1    wreg      void 
  4174 ;; Registers used:
  4175 ;;		None
  4176 ;; Tracked objects:
  4177 ;;		On entry : 0/0
  4178 ;;		On exit  : 0/0
  4179 ;;		Unchanged: 0/0
  4180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4181 ;;      Params:         0       0       0       0       0       0       0       0
  4182 ;;      Locals:         0       0       0       0       0       0       0       0
  4183 ;;      Temps:          0       0       0       0       0       0       0       0
  4184 ;;      Totals:         0       0       0       0       0       0       0       0
  4185 ;;Total ram usage:        0 bytes
  4186 ;; Hardware stack levels used:    1
  4187 ;; This function calls:
  4188 ;;		Nothing
  4189 ;; This function is called by:
  4190 ;;		_EUSART_Initialize
  4191 ;;		_EUSART_Receive_ISR
  4192 ;; This function uses a non-reentrant model
  4193 ;;
  4194                           
  4195                           
  4196                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  4197  048E                     _EUSART_DefaultOverrunErrorHandler:	
  4198                           
  4199                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
  4200                           
  4201                           ;incstack = 0
  4202                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  4203  048E  0023               	movlb	3	; select bank3
  4204  048F  121D               	bcf	29,4	;volatile
  4205                           
  4206                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
  4207  0490  161D               	bsf	29,4	;volatile
  4208  0491  0008               	return
  4209  0492                     __end_of_EUSART_DefaultOverrunErrorHandler:	
  4210                           
  4211                           	psect	text28
  4212  0497                     __ptext28:	
  4213 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  4214 ;; Defined at:
  4215 ;;		line 250 in file "mcc_generated_files/eusart.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;		None
  4218 ;; Auto vars:     Size  Location     Type
  4219 ;;		None
  4220 ;; Return value:  Size  Location     Type
  4221 ;;                  1    wreg      void 
  4222 ;; Registers used:
  4223 ;;		None
  4224 ;; Tracked objects:
  4225 ;;		On entry : 0/0
  4226 ;;		On exit  : 0/0
  4227 ;;		Unchanged: 0/0
  4228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4229 ;;      Params:         0       0       0       0       0       0       0       0
  4230 ;;      Locals:         0       0       0       0       0       0       0       0
  4231 ;;      Temps:          0       0       0       0       0       0       0       0
  4232 ;;      Totals:         0       0       0       0       0       0       0       0
  4233 ;;Total ram usage:        0 bytes
  4234 ;; Hardware stack levels used:    1
  4235 ;; This function calls:
  4236 ;;		Nothing
  4237 ;; This function is called by:
  4238 ;;		_EUSART_Initialize
  4239 ;;		_EUSART_Receive_ISR
  4240 ;; This function uses a non-reentrant model
  4241 ;;
  4242                           
  4243                           
  4244                           ;psect for function _EUSART_DefaultFramingErrorHandler
  4245  0497                     _EUSART_DefaultFramingErrorHandler:	
  4246                           
  4247                           ;incstack = 0
  4248                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  4249  0497  0008               	return
  4250  0498                     __end_of_EUSART_DefaultFramingErrorHandler:	
  4251                           
  4252                           	psect	text29
  4253  0492                     __ptext29:	
  4254 ;; *************** function _EUSART_DefaultErrorHandler *****************
  4255 ;; Defined at:
  4256 ;;		line 260 in file "mcc_generated_files/eusart.c"
  4257 ;; Parameters:    Size  Location     Type
  4258 ;;		None
  4259 ;; Auto vars:     Size  Location     Type
  4260 ;;		None
  4261 ;; Return value:  Size  Location     Type
  4262 ;;                  1    wreg      void 
  4263 ;; Registers used:
  4264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4265 ;; Tracked objects:
  4266 ;;		On entry : 0/0
  4267 ;;		On exit  : 0/0
  4268 ;;		Unchanged: 0/0
  4269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4270 ;;      Params:         0       0       0       0       0       0       0       0
  4271 ;;      Locals:         0       0       0       0       0       0       0       0
  4272 ;;      Temps:          0       0       0       0       0       0       0       0
  4273 ;;      Totals:         0       0       0       0       0       0       0       0
  4274 ;;Total ram usage:        0 bytes
  4275 ;; Hardware stack levels used:    1
  4276 ;; Hardware stack levels required when called:    1
  4277 ;; This function calls:
  4278 ;;		_EUSART_RxDataHandler
  4279 ;; This function is called by:
  4280 ;;		_EUSART_Initialize
  4281 ;;		_EUSART_Receive_ISR
  4282 ;; This function uses a non-reentrant model
  4283 ;;
  4284                           
  4285                           
  4286                           ;psect for function _EUSART_DefaultErrorHandler
  4287  0492                     _EUSART_DefaultErrorHandler:	
  4288                           
  4289                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
  4290                           
  4291                           ;incstack = 0
  4292                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4293  0492  3183  23B2         	fcall	_EUSART_RxDataHandler
  4294  0494  0008               	return
  4295  0495                     __end_of_EUSART_DefaultErrorHandler:	
  4296                           
  4297                           	psect	text30
  4298  03B2                     __ptext30:	
  4299 ;; *************** function _EUSART_RxDataHandler *****************
  4300 ;; Defined at:
  4301 ;;		line 240 in file "mcc_generated_files/eusart.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  1    wreg      void 
  4308 ;; Registers used:
  4309 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4315 ;;      Params:         0       0       0       0       0       0       0       0
  4316 ;;      Locals:         0       0       0       0       0       0       0       0
  4317 ;;      Temps:          1       0       0       0       0       0       0       0
  4318 ;;      Totals:         1       0       0       0       0       0       0       0
  4319 ;;Total ram usage:        1 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; This function calls:
  4322 ;;		Nothing
  4323 ;; This function is called by:
  4324 ;;		_EUSART_Receive_ISR
  4325 ;;		_EUSART_DefaultErrorHandler
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           
  4330                           ;psect for function _EUSART_RxDataHandler
  4331  03B2                     _EUSART_RxDataHandler:	
  4332                           
  4333                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
  4334                           
  4335                           ;incstack = 0
  4336                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  4337  03B2  0023               	movlb	3	; select bank3
  4338  03B3  0819               	movf	25,w	;volatile
  4339  03B4  00F0               	movwf	??_EUSART_RxDataHandler
  4340  03B5  0877               	movf	_eusartRxHead,w
  4341  03B6  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4342  03B7  0086               	movwf	6
  4343  03B8  0187               	clrf	7
  4344  03B9  0870               	movf	??_EUSART_RxDataHandler,w
  4345  03BA  0081               	movwf	1
  4346  03BB  3001               	movlw	1
  4347  03BC  00F0               	movwf	??_EUSART_RxDataHandler
  4348  03BD  0870               	movf	??_EUSART_RxDataHandler,w
  4349  03BE  07F7               	addwf	_eusartRxHead,f	;volatile
  4350                           
  4351                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4352  03BF  3008               	movlw	8
  4353  03C0  0277               	subwf	_eusartRxHead,w	;volatile
  4354  03C1  1803               	btfsc	3,0
  4355                           
  4356                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
  4357  03C2  01F7               	clrf	_eusartRxHead	;volatile
  4358                           
  4359                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
  4360  03C3  3001               	movlw	1
  4361  03C4  00F0               	movwf	??_EUSART_RxDataHandler
  4362  03C5  0870               	movf	??_EUSART_RxDataHandler,w
  4363  03C6  0020               	movlb	0	; select bank0
  4364  03C7  07BB               	addwf	_eusartRxCount,f	;volatile
  4365  03C8  0008               	return
  4366  03C9                     __end_of_EUSART_RxDataHandler:	
  4367                           
  4368                           	psect	text31
  4369  02C7                     __ptext31:	
  4370 ;; *************** function _EUSART_Read *****************
  4371 ;; Defined at:
  4372 ;;		line 151 in file "mcc_generated_files/eusart.c"
  4373 ;; Parameters:    Size  Location     Type
  4374 ;;		None
  4375 ;; Auto vars:     Size  Location     Type
  4376 ;;  readValue       1    1[COMMON] unsigned char 
  4377 ;; Return value:  Size  Location     Type
  4378 ;;                  1    wreg      unsigned char 
  4379 ;; Registers used:
  4380 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4381 ;; Tracked objects:
  4382 ;;		On entry : 0/0
  4383 ;;		On exit  : 0/0
  4384 ;;		Unchanged: 0/0
  4385 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4386 ;;      Params:         0       0       0       0       0       0       0       0
  4387 ;;      Locals:         1       0       0       0       0       0       0       0
  4388 ;;      Temps:          1       0       0       0       0       0       0       0
  4389 ;;      Totals:         2       0       0       0       0       0       0       0
  4390 ;;Total ram usage:        2 bytes
  4391 ;; Hardware stack levels used:    1
  4392 ;; This function calls:
  4393 ;;		Nothing
  4394 ;; This function is called by:
  4395 ;;		_ReceivedMessage
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           
  4400                           ;psect for function _EUSART_Read
  4401  02C7                     _EUSART_Read:	
  4402  02C7                     i1l1384:	
  4403                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  4404                           
  4405                           ;incstack = 0
  4406                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  4407                           
  4408                           
  4409                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  4410  02C7  0020               	movlb	0	; select bank0
  4411  02C8  083B               	movf	_eusartRxCount,w	;volatile
  4412  02C9  1903               	btfsc	3,2
  4413  02CA  2AC7               	goto	i1l1384
  4414                           
  4415                           ;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  4416  02CB  0876               	movf	_eusartRxTail,w	;volatile
  4417  02CC  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  4418  02CD  0086               	movwf	6
  4419  02CE  0187               	clrf	7
  4420  02CF  0801               	movf	1,w
  4421  02D0  00F0               	movwf	??_EUSART_Read
  4422  02D1  0870               	movf	??_EUSART_Read,w
  4423  02D2  00BA               	movwf	_eusartRxLastError	;volatile
  4424                           
  4425                           ;mcc_generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];
  4426  02D3  0876               	movf	_eusartRxTail,w
  4427  02D4  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4428  02D5  0086               	movwf	6
  4429  02D6  0187               	clrf	7
  4430  02D7  0801               	movf	1,w
  4431  02D8  00F0               	movwf	??_EUSART_Read
  4432  02D9  0870               	movf	??_EUSART_Read,w
  4433  02DA  00F1               	movwf	EUSART_Read@readValue
  4434  02DB  3001               	movlw	1
  4435  02DC  00F0               	movwf	??_EUSART_Read
  4436  02DD  0870               	movf	??_EUSART_Read,w
  4437  02DE  07F6               	addwf	_eusartRxTail,f	;volatile
  4438                           
  4439                           ;mcc_generated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  4440  02DF  3008               	movlw	8
  4441  02E0  0276               	subwf	_eusartRxTail,w	;volatile
  4442  02E1  1803               	btfsc	3,0
  4443                           
  4444                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:         eus
      +                          artRxTail = 0;
  4445  02E2  01F6               	clrf	_eusartRxTail	;volatile
  4446                           
  4447                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 0;
  4448  02E3  0021               	movlb	1	; select bank1
  4449  02E4  1291               	bcf	17,5	;volatile
  4450                           
  4451                           ;mcc_generated_files/eusart.c: 167:     eusartRxCount--;
  4452  02E5  3001               	movlw	1
  4453  02E6  0020               	movlb	0	; select bank0
  4454  02E7  02BB               	subwf	_eusartRxCount,f	;volatile
  4455                           
  4456                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.RCIE = 1;
  4457  02E8  0021               	movlb	1	; select bank1
  4458  02E9  1691               	bsf	17,5	;volatile
  4459                           
  4460                           ;mcc_generated_files/eusart.c: 170:     return readValue;
  4461  02EA  0871               	movf	EUSART_Read@readValue,w
  4462  02EB  0008               	return
  4463  02EC                     __end_of_EUSART_Read:	
  4464                           
  4465                           	psect	text32
  4466  0348                     __ptext32:	
  4467 ;; *************** function _EUSART_Transmit_ISR *****************
  4468 ;; Defined at:
  4469 ;;		line 197 in file "mcc_generated_files/eusart.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;		None
  4472 ;; Auto vars:     Size  Location     Type
  4473 ;;		None
  4474 ;; Return value:  Size  Location     Type
  4475 ;;                  1    wreg      void 
  4476 ;; Registers used:
  4477 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4478 ;; Tracked objects:
  4479 ;;		On entry : 0/0
  4480 ;;		On exit  : 0/0
  4481 ;;		Unchanged: 0/0
  4482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4483 ;;      Params:         0       0       0       0       0       0       0       0
  4484 ;;      Locals:         0       0       0       0       0       0       0       0
  4485 ;;      Temps:          1       0       0       0       0       0       0       0
  4486 ;;      Totals:         1       0       0       0       0       0       0       0
  4487 ;;Total ram usage:        1 bytes
  4488 ;; Hardware stack levels used:    1
  4489 ;; This function calls:
  4490 ;;		Nothing
  4491 ;; This function is called by:
  4492 ;;		_EUSART_Initialize
  4493 ;;		_INTERRUPT_InterruptManager
  4494 ;; This function uses a non-reentrant model
  4495 ;;
  4496                           
  4497                           
  4498                           ;psect for function _EUSART_Transmit_ISR
  4499  0348                     _EUSART_Transmit_ISR:	
  4500                           
  4501                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  4502                           
  4503                           ;incstack = 0
  4504                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4505  0348  3008               	movlw	8
  4506  0349  0020               	movlb	0	; select bank0
  4507  034A  0263               	subwf	_eusartTxBufferRemaining,w	;volatile
  4508  034B  1803               	skipnc
  4509  034C  2B62               	goto	i1l106
  4510                           
  4511                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  4512  034D  0878               	movf	_eusartTxTail,w
  4513  034E  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4514  034F  0086               	movwf	6
  4515  0350  0187               	clrf	7
  4516  0351  0801               	movf	1,w
  4517  0352  0023               	movlb	3	; select bank3
  4518  0353  009A               	movwf	26	;volatile
  4519  0354  3001               	movlw	1
  4520  0355  00F0               	movwf	??_EUSART_Transmit_ISR
  4521  0356  0870               	movf	??_EUSART_Transmit_ISR,w
  4522  0357  07F8               	addwf	_eusartTxTail,f	;volatile
  4523                           
  4524                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4525  0358  3008               	movlw	8
  4526  0359  0278               	subwf	_eusartTxTail,w	;volatile
  4527  035A  1803               	btfsc	3,0
  4528                           
  4529                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
  4530  035B  01F8               	clrf	_eusartTxTail	;volatile
  4531                           
  4532                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
  4533  035C  3001               	movlw	1
  4534  035D  00F0               	movwf	??_EUSART_Transmit_ISR
  4535  035E  0870               	movf	??_EUSART_Transmit_ISR,w
  4536  035F  0020               	movlb	0	; select bank0
  4537  0360  07E3               	addwf	_eusartTxBufferRemaining,f	;volatile
  4538                           
  4539                           ;mcc_generated_files/eusart.c: 209:     }
  4540  0361  0008               	return
  4541  0362                     i1l106:	
  4542                           ;mcc_generated_files/eusart.c: 210:     else
  4543                           
  4544                           
  4545                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
  4546  0362  0021               	movlb	1	; select bank1
  4547  0363  1211               	bcf	17,4	;volatile
  4548  0364  0008               	return
  4549  0365                     __end_of_EUSART_Transmit_ISR:	
  4550  007E                     btemp	set	126	;btemp
  4551  007E                     int$flags	set	126
  4552  007E                     wtemp0	set	126


Data Sizes:
    Strings     41
    Constant    20
    Data        25
    BSS         236
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     17      79
    BANK1            80      0      78
    BANK2            80      5      69
    BANK3            80      0      64
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    S517$4$0	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S517$6$0	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), EUSART_Receive_ISR(), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strchr@s	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    strstr@h	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    strstr@n	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 64
		 -> Storage2(BANK0[9]), Storage(BANK2[64]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 64
		 -> Storage2(BANK0[9]), Storage(BANK2[64]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 64
		 -> ResponseBuffer(BANK1[64]), NULL(NULL[0]), Storage(BANK2[64]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> ResponseBuffer(BANK1[64]), NULL(NULL[0]), Storage(BANK2[64]), 

    memset@dest	PTR void  size(1) Largest target is 9
		 -> Num_Char(BANK0[3]), Storage2(BANK0[9]), 

    memset@s	PTR unsigned char  size(1) Largest target is 9
		 -> Num_Char(BANK0[3]), Storage2(BANK0[9]), 

    SendString@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[17]), STR_2(CODE[18]), 

    S517$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    uart.Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    S517$TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    uart.TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S517$TransmitDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    uart.TransmitDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    S517$SetRxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    uart.SetRxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    S517$RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    uart.RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    S517$SetTxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    uart.SetTxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    S517$DataReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    uart.DataReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    S517$TransmitReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    uart.TransmitReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    S517$Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    uart.Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    S517$Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    uart.Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    sp__memset	PTR void  size(1) Largest target is 9
		 -> Num_Char(BANK0[3]), Storage2(BANK0[9]), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    main@s	PTR unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 64
		 -> Storage2(BANK0[9]), Storage(BANK2[64]), 

    sp__GetResponse	PTR unsigned char  size(1) Largest target is 64
		 -> ResponseBuffer(BANK1[64]), 

    rxData	PTR unsigned char  size(1) Largest target is 64
		 -> ResponseBuffer(BANK1[64]), NULL(NULL[0]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), ReceivedMessage(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _main->_ReadyReceiveBuffer
    _main->_blockingWait
    _main->_memset
    _strstr->_strchr
    _strstr->_strlen
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _INIT_SMART_LIGHT->_EUSART_SetRxInterruptHandler
    _SendString->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_ReceivedMessage
    _ReceivedMessage->_EUSART_Read
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_strstr
    _strstr->_strncmp
    _SYSTEM_Initialize->_EUSART_Initialize
    _INIT_SMART_LIGHT->_SendString

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    4858
                                             16 BANK0      1     1      0
                                              0 BANK2      5     5      0
                        _GetResponse
                   _INIT_SMART_LIGHT
                 _ReadyReceiveBuffer
                  _SYSTEM_Initialize
                       _blockingWait
                             _memset
                             _strcpy
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _strstr                                               8     6      2    1453
                                              8 BANK0      8     6      2
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              9     5      4     541
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _strlen                                               5     3      2     220
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _strchr                                               3     1      2     250
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _strcpy                                              12     8      4     397
                                              0 BANK0     12     8      4
 ---------------------------------------------------------------------------------
 (1) _memset                                              10     6      4    1449
                                              4 COMMON     2     2      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _blockingWait                                         5     3      2     158
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     670
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     670
                                              0 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ReadyReceiveBuffer                                   2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INIT_SMART_LIGHT                                     0     0      0     592
       _EUSART_SetRxInterruptHandler *
                         _SendString
 ---------------------------------------------------------------------------------
 (2) _SendString                                           3     1      2     406
                                              0 BANK0      3     1      2
                       _EUSART_Write *
 ---------------------------------------------------------------------------------
 (3) _EUSART_Write                                         2     1      1     192
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     186
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _GetResponse                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0      47
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _ReceivedMessage *
 ---------------------------------------------------------------------------------
 (5) _ReceivedMessage                                      2     2      0      47
                                              2 COMMON     2     2      0
                        _EUSART_Read *
                 _EUSART_Receive_ISR *
                 _EUSART_is_rx_ready *
 ---------------------------------------------------------------------------------
 (6) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Read                                          2     2      0      24
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetResponse
   _INIT_SMART_LIGHT
     _EUSART_SetRxInterruptHandler *
     _SendString *
       _EUSART_Write *
   _ReadyReceiveBuffer
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   _blockingWait
   _memset
   _strcpy
   _strstr
     _strchr
     _strlen
     _strncmp

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _ReceivedMessage *
     _EUSART_Read *
     _EUSART_Receive_ISR *
       Absolute function(Fake) *
       _EUSART_DefaultErrorHandler *
         _EUSART_RxDataHandler
       _EUSART_DefaultFramingErrorHandler *
       _EUSART_DefaultOverrunErrorHandler *
       _EUSART_RxDataHandler *
     _EUSART_is_rx_ready *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     12C       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     11      4F       6       98.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      4E       8       97.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      5      45      10       86.3%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     12C      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Nov 05 17:17:51 2019

                ?_EUSART_SetRxInterruptHandler 0074                                    __CFG_CP$OFF 0000  
                                  __CFG_LVP$ON 0000                                            l100 02F7  
                                          l336 0368                                            l898 03CB  
                                          _LVL 006A                         ??_EUSART_RxDataHandler 0070  
               ?_EUSART_SetFramingErrorHandler 0074                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                   ?_EUSART_Read 0070  
                                         l1708 030B                                           l1804 01A8  
                                         l1814 03D5                                           l1770 032B  
                                         l1834 0419                                           l1850 02AB  
                                         l1930 0103                                           l1916 00E4  
                                         l1694 02EC                                           l1862 01DD  
                                         l1776 039E                                           l1856 01CA  
                                         l1864 01F1                                           l1778 03AA  
                                         l1796 01A1                                           l1868 01FB  
                                         l1798 017C                                           STR_1 0454  
                                         STR_2 03F3                                           STR_3 0405  
                                         u1005 036E                                           u1137 0374  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           _KEY3 00E0  
                                         _KEY5 00E7                            __end_of_GetResponse 0497  
                                         _WPUA 020C                                           _WPUB 020D  
                                 __CFG_WRT$OFF 0000                                           _main 00F8  
                                         _uart 03DF                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           btemp 007E  
                                __CFG_BOREN$ON 0000                                           start 0021  
                             _INIT_SMART_LIGHT 030E                                  __CFG_MCLRE$ON 0000  
                              _ReceivedMessage 023B                                  ?_EUSART_Write 0074  
               __size_of_OSCILLATOR_Initialize 0006                  __end_of_OSCILLATOR_Initialize 046C  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                                        i1l106 0362                                          i1l160 0014  
                                        i1l165 001F                                          _RCREG 0199  
                                        _RCSTA 019D                                          _RESET 0064  
                                        u48_20 0452                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _TXREG 019A                                          _TXSTA 019E  
                               _WDT_Initialize 048A                                          main@s 0164  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                                __end_of_strncmp 01B7  
                              __initialization 0023                                   __end_of_main 0165  
                                 __end_of_uart 03F3                                 ??_EUSART_Write 0075  
                               __CFG_LPBOR$OFF 0000                    ?_INTERRUPT_InterruptManager 0070  
                         __end_of_blockingWait 037F                 ??_EUSART_SetRxInterruptHandler 0076  
                                       ??_main 0058                                    _GetResponse 0495  
                       __end_of_WDT_Initialize 048E      __end_of_EUSART_DefaultFramingErrorHandler 0498  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 0497  
                   _EUSART_OverrunErrorHandler 005B                                         _APFCON 011D  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _ANSELC 018E                     __end_of_EUSART_is_rx_ready 0454  
                                       _BORCON 0116                                         i1l1412 0283  
                                       i1l1422 029F                                         i1l1418 0291  
                                       i1l1614 0244                                         i1l1384 02C7  
                                       i1l1616 0252                             _ReadyReceiveBuffer 0416  
                                   _SendString 032B                                         _OSCCON 0099  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097                                 __CFG_PWRTE$OFF 0000  
                      __end_of_ReceivedMessage 0270                            ?_ReadyReceiveBuffer 0070  
                               __CFG_STVREN$ON 0000                            _EUSART_Transmit_ISR 0348  
                                       _memset 0062                                         _rxData 0038  
                                       _strchr 03C9                                         _strcpy 02A2  
                                       _strlen 0399                                         _strstr 01B7  
                         ??_ReadyReceiveBuffer 0074                                ?_WDT_Initialize 0070  
                                    ??_strncmp 0074                           ?_EUSART_Transmit_ISR 0070  
                         __size_of_EUSART_Read 0025                              _SYSTEM_Initialize 0435  
                      __end_of__initialization 005E                             ?_SYSTEM_Initialize 0070  
         __end_of_EUSART_SetTxInterruptHandler 0472          __size_of_EUSART_SetTxInterruptHandler 0006  
                 _EUSART_SetTxInterruptHandler 046C                        ReceivedMessage@readByte 0073  
                               __pcstackCOMMON 0070                                   __pidataBANK0 0441  
                                 __pidataBANK1 0427                            ??_SYSTEM_Initialize 0076  
                                  _ReadStorage 01A0                                 _OPTION_REGbits 0095  
                         _eusartRxStatusBuffer 0020                       __end_of_INIT_SMART_LIGHT 032B  
              ??_EUSART_SetOverrunErrorHandler 0076                      __end_of_SYSTEM_Initialize 0441  
                        ??_EUSART_Transmit_ISR 0070                                 _ResponseBuffer 00A0  
                                   __pbssBANK0 0020                                     __pbssBANK1 00A0  
                                   __pbssBANK2 0120                                     __pbssBANK3 01A0  
                                  ?_SendString 0048                           __end_of_EUSART_Write 030E  
                  __size_of_EUSART_Receive_ISR 0032                               ?_ReceivedMessage 0070  
                                   __pmaintext 00F8                          __size_of_blockingWait 001A  
                ?_EUSART_SetTxInterruptHandler 0074               _EUSART_TxDefaultInterruptHandler 0061  
                                   __pintentry 0004                                        _BAUDCON 019F  
                                      ?_memset 0048                   ??_EUSART_DefaultErrorHandler 0071  
                                      ?_strchr 0074                                        ?_strcpy 0048  
                                      ?_strlen 0074                                        ?_strstr 0050  
                                _eusartRxCount 003B                  __size_of_EUSART_RxDataHandler 0017  
                     ??_EUSART_SetErrorHandler 0076                              SendString@command 0048  
                                 _blockingWait 0365            __size_of_EUSART_DefaultErrorHandler 0003  
                                      _Storage 0120                                __size_of_memset 0096  
                          __size_of_SendString 001D                                        __ptext1 01B7  
                                      __ptext2 0165                                        __ptext3 0399  
                                      __ptext4 03C9                                        __ptext5 02A2  
                                      __ptext6 0062                                        __ptext7 0365  
                                      __ptext8 0435                                        __ptext9 048A  
                              __size_of_strchr 0016                                __size_of_strcpy 0025  
                              __size_of_strlen 0019                                __size_of_strstr 0046  
                        _OSCILLATOR_Initialize 0466                                   ?_GetResponse 0070  
                     ??_PIN_MANAGER_Initialize 0074                     __size_of_SYSTEM_Initialize 000C  
                                      clrloop0 0461                                        _strncmp 0165  
                         end_of_initialization 005E          __end_of_EUSART_SetOverrunErrorHandler 0478  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 0472  
                                      init_ram 045A                                        memset@c 0048  
                                      memset@k 004C                                        memset@n 004A  
                                      memset@s 004F                                        initloop 045B  
                            _EUSART_Initialize 01FD                             ?_EUSART_Initialize 0070  
                                    _RCSTAbits 019D                             _EUSART_is_rx_ready 044C  
                           _EUSART_is_tx_ready 0000                                        strchr@c 0074  
                                      strchr@s 0048                                        strcpy@d 0052  
                                      strlen@a 0049                                        strcpy@s 0050  
                                      strlen@s 0074                            ??_EUSART_Initialize 0048  
                             ??_WDT_Initialize 0074                 ??_EUSART_SetTxInterruptHandler 0076  
                                      strstr@h 0057                                        strstr@n 0050  
                          ?_EUSART_is_rx_ready 0070                               __CFG_FOSC$INTOSC 0000  
                        __size_of_EUSART_Write 0022                __size_of_EUSART_SetErrorHandler 0006  
                    __end_of_EUSART_Initialize 023B                           ??_EUSART_is_rx_ready 0070  
                                    _TXSTAbits 019E             __end_of_EUSART_DefaultErrorHandler 0495  
                   _EUSART_DefaultErrorHandler 0492                                   _EUSART_Write 02EC  
                       ?_OSCILLATOR_Initialize 0070                                 __end_of_memset 00F8  
                               __end_of_strchr 03DF                                 __end_of_strcpy 02C7  
                               __end_of_strlen 03B2                                 __end_of_strstr 01FD  
                          start_initialization 0023                    __size_of_ReadyReceiveBuffer 0011  
                            ?_INIT_SMART_LIGHT 0070                __size_of_PIN_MANAGER_Initialize 001A  
                                ??_EUSART_Read 0070   EUSART_SetRxInterruptHandler@interruptHandler 0074  
 EUSART_SetTxInterruptHandler@interruptHandler 0074                             ??_INIT_SMART_LIGHT 0076  
                                 ??_SendString 004A                 ?_EUSART_SetOverrunErrorHandler 0074  
                   _EUSART_FramingErrorHandler 005D                         _EUSART_SetErrorHandler 047E  
                                  __pdataBANK0 0064                                    __pdataBANK1 00E0  
                                     ??_memset 0074                                     memset@dest 004E  
                                     ??_strchr 0076                                       ??_strcpy 004C  
                                     ??_strlen 0048                             __end_of_SendString 0348  
                                     ??_strstr 0052                    __end_of_EUSART_Transmit_ISR 0365  
                                  __pbssCOMMON 0076                                      ___latbits 0002  
                                __pcstackBANK0 0048                                  __pcstackBANK2 0160  
                         __size_of_GetResponse 0002                     ReadyReceiveBuffer@position 0075  
                   __end_of_EUSART_Receive_ISR 02A2                     __size_of_EUSART_Initialize 003E  
             _EUSART_RxDefaultInterruptHandler 005F                            __end_of_EUSART_Read 02EC  
                                _ResponseIndex 0039                                      __pnvBANK0 0059  
                 __end_of_EUSART_RxDataHandler 03C9                         _PIN_MANAGER_Initialize 037F  
                         EUSART_Read@readValue 0071                                   _eusartRxHead 0077  
                                 _eusartTxHead 0079                                   _eusartRxTail 0076  
                                 _eusartTxTail 0078                       __size_of_ReceivedMessage 0035  
                 ??_INTERRUPT_InterruptManager 0074                        _eusartTxBufferRemaining 0063  
                                     ?_strncmp 0048                                 _eusartRxBuffer 0028  
                               _eusartTxBuffer 0030         EUSART_SetErrorHandler@interruptHandler 0074  
                                    clear_ram0 0460                                       _PIE1bits 0091  
                            _eusartRxLastError 003A                            blockingWait@counter 0049  
          __size_of_INTERRUPT_InterruptManager 001D                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 0076                              _EUSART_is_tx_done 0000  
    __end_of_EUSART_DefaultOverrunErrorHandler 0492     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 048E                                    _EUSART_Read 02C7  
                                     _Num_Char 0045                        ??_OSCILLATOR_Initialize 0074  
                          _EUSART_ErrorHandler 0059                    ?_EUSART_DefaultErrorHandler 0070  
                                     _Storage2 003C                              ??_ReceivedMessage 0072  
                         _EUSART_RxDataHandler 03B2                                       __ptext10 037F  
                                     __ptext11 0466                                       __ptext20 02EC  
                                     __ptext12 01FD                                       __ptext21 0484  
                                     __ptext13 046C                                       __ptext30 03B2  
                                     __ptext22 0495                                       __ptext14 0472  
                                     __ptext31 02C7                                       __ptext15 0478  
                                     __ptext32 0348                                       __ptext24 0270  
                                     __ptext16 047E                                       __ptext25 023B  
                                     __ptext17 0416                                       __ptext26 044C  
                                     __ptext18 030E                                       __ptext27 048E  
                                     __ptext19 032B                                       __ptext28 0497  
                                     __ptext29 0492                                     strcpy@dest 0048  
                             __size_of_strncmp 0052                    __size_of_EUSART_is_rx_ready 0008  
                                __size_of_main 006D                        ?_EUSART_SetErrorHandler 0074  
                    __size_of_INIT_SMART_LIGHT 001D  EUSART_SetOverrunErrorHandler@interruptHandler 0074  
                                     int$flags 007E             __end_of_INTERRUPT_InterruptManager 0021  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 047E  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0478  
                   __end_of_ReadyReceiveBuffer 0427                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                        __size_of_WDT_Initialize 0004  
                                     intlevel1 0000                                  ?_blockingWait 0074  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 0484  
                            __CFG_CLKOUTEN$OFF 0000                                      strcpy@src 004A  
                                    strncmp@_l 004C                                      strncmp@_r 0048  
         __end_of_EUSART_SetRxInterruptHandler 048A          __size_of_EUSART_SetRxInterruptHandler 0006  
                 _EUSART_SetRxInterruptHandler 0484                              blockingWait@limit 0074  
                           _EUSART_Receive_ISR 0270  EUSART_SetFramingErrorHandler@interruptHandler 0074  
                                __pstringtext1 03DF                                  __pstringtext2 03F3  
                                __pstringtext3 0405                                  __pstringtext4 0454  
                                __pstringtext5 0000                            ?_EUSART_Receive_ISR 0070  
                                ??_GetResponse 0074                                       strncmp@l 004F  
                                     strncmp@n 004A                                       strncmp@r 004D  
                                     strstr@nl 0055                             EUSART_Write@txData 0074  
                 __size_of_EUSART_Transmit_ISR 001D                                 ??_blockingWait 0048  
               __end_of_PIN_MANAGER_Initialize 0399                           ??_EUSART_Receive_ISR 0071  
