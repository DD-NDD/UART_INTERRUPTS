

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Nov 05 15:36:48 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext1,global,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    19                           	psect	inittext,global,class=CODE,delta=2
    20                           	psect	clrtext,global,class=CODE,delta=2
    21                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    23                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    24                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    25                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text6,local,class=CODE,merge=1,delta=2
    31                           	psect	text7,local,class=CODE,merge=1,delta=2
    32                           	psect	text8,local,class=CODE,merge=1,delta=2
    33                           	psect	text9,local,class=CODE,merge=1,delta=2
    34                           	psect	text10,local,class=CODE,merge=1,delta=2
    35                           	psect	text11,local,class=CODE,merge=1,delta=2
    36                           	psect	text12,local,class=CODE,merge=1,delta=2
    37                           	psect	text13,local,class=CODE,merge=1,delta=2
    38                           	psect	text14,local,class=CODE,merge=1,delta=2
    39                           	psect	text15,local,class=CODE,merge=1,delta=2
    40                           	psect	text16,local,class=CODE,merge=1,delta=2
    41                           	psect	text17,local,class=CODE,merge=1,delta=2
    42                           	psect	text18,local,class=CODE,merge=1,delta=2
    43                           	psect	text19,local,class=CODE,merge=1,delta=2
    44                           	psect	text20,local,class=CODE,merge=1,delta=2
    45                           	psect	text21,local,class=CODE,merge=1,delta=2
    46                           	psect	text22,local,class=CODE,merge=1,delta=2
    47                           	psect	intentry,global,class=CODE,delta=2
    48                           	psect	text24,local,class=CODE,merge=1,delta=2
    49                           	psect	text25,local,class=CODE,merge=1,delta=2
    50                           	psect	text26,local,class=CODE,merge=1,delta=2
    51                           	psect	text27,local,class=CODE,merge=1,delta=2
    52                           	psect	text28,local,class=CODE,merge=1,delta=2
    53                           	psect	text29,local,class=CODE,merge=1,delta=2
    54                           	psect	text30,local,class=CODE,merge=1,delta=2
    55                           	psect	text31,local,class=CODE,merge=1,delta=2
    56                           	psect	text32,local,class=CODE,merge=1,delta=2
    57                           	dabs	1,0x7E,2
    58  0000                     
    59                           ; Version 2.05
    60                           ; Generated 20/12/2018 GMT
    61                           ; 
    62                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC16LF1559 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000D                     	;# 
   107  000E                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0015                     	;# 
   111  0016                     	;# 
   112  0016                     	;# 
   113  0017                     	;# 
   114  0018                     	;# 
   115  0019                     	;# 
   116  001A                     	;# 
   117  001B                     	;# 
   118  001C                     	;# 
   119  008C                     	;# 
   120  008D                     	;# 
   121  008E                     	;# 
   122  0091                     	;# 
   123  0092                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  009F                     	;# 
   135  010C                     	;# 
   136  010D                     	;# 
   137  010E                     	;# 
   138  0116                     	;# 
   139  0117                     	;# 
   140  011D                     	;# 
   141  018C                     	;# 
   142  018D                     	;# 
   143  018E                     	;# 
   144  0191                     	;# 
   145  0191                     	;# 
   146  0192                     	;# 
   147  0193                     	;# 
   148  0193                     	;# 
   149  0194                     	;# 
   150  0195                     	;# 
   151  0196                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019C                     	;# 
   157  019D                     	;# 
   158  019E                     	;# 
   159  019F                     	;# 
   160  020C                     	;# 
   161  020D                     	;# 
   162  0211                     	;# 
   163  0211                     	;# 
   164  0212                     	;# 
   165  0212                     	;# 
   166  0213                     	;# 
   167  0213                     	;# 
   168  0214                     	;# 
   169  0214                     	;# 
   170  0215                     	;# 
   171  0215                     	;# 
   172  0215                     	;# 
   173  0216                     	;# 
   174  0216                     	;# 
   175  0217                     	;# 
   176  0217                     	;# 
   177  0391                     	;# 
   178  0392                     	;# 
   179  0393                     	;# 
   180  0394                     	;# 
   181  0395                     	;# 
   182  0396                     	;# 
   183  0611                     	;# 
   184  0612                     	;# 
   185  0613                     	;# 
   186  0613                     	;# 
   187  0614                     	;# 
   188  0615                     	;# 
   189  0616                     	;# 
   190  0616                     	;# 
   191  0711                     	;# 
   192  0711                     	;# 
   193  0711                     	;# 
   194  0712                     	;# 
   195  0712                     	;# 
   196  0713                     	;# 
   197  0713                     	;# 
   198  0713                     	;# 
   199  0714                     	;# 
   200  0714                     	;# 
   201  0714                     	;# 
   202  0715                     	;# 
   203  0715                     	;# 
   204  0716                     	;# 
   205  0716                     	;# 
   206  0716                     	;# 
   207  0716                     	;# 
   208  0717                     	;# 
   209  0717                     	;# 
   210  0717                     	;# 
   211  0717                     	;# 
   212  0718                     	;# 
   213  0718                     	;# 
   214  0718                     	;# 
   215  0719                     	;# 
   216  0719                     	;# 
   217  0719                     	;# 
   218  0719                     	;# 
   219  071A                     	;# 
   220  071A                     	;# 
   221  071A                     	;# 
   222  071A                     	;# 
   223  071A                     	;# 
   224  071B                     	;# 
   225  071B                     	;# 
   226  071C                     	;# 
   227  071C                     	;# 
   228  071C                     	;# 
   229  071C                     	;# 
   230  071C                     	;# 
   231  071D                     	;# 
   232  071D                     	;# 
   233  071E                     	;# 
   234  071E                     	;# 
   235  0791                     	;# 
   236  0791                     	;# 
   237  0793                     	;# 
   238  0793                     	;# 
   239  0794                     	;# 
   240  0794                     	;# 
   241  0796                     	;# 
   242  0796                     	;# 
   243  0796                     	;# 
   244  0797                     	;# 
   245  0797                     	;# 
   246  0797                     	;# 
   247  0798                     	;# 
   248  0798                     	;# 
   249  0799                     	;# 
   250  0799                     	;# 
   251  0799                     	;# 
   252  079A                     	;# 
   253  079A                     	;# 
   254  079A                     	;# 
   255  079B                     	;# 
   256  079C                     	;# 
   257  079C                     	;# 
   258  079C                     	;# 
   259  079D                     	;# 
   260  079E                     	;# 
   261  079E                     	;# 
   262  0F8C                     	;# 
   263  0F8D                     	;# 
   264  0F91                     	;# 
   265  0F96                     	;# 
   266  0F97                     	;# 
   267  0F9C                     	;# 
   268  0F9D                     	;# 
   269  0F9E                     	;# 
   270  0FE3                     	;# 
   271  0FE4                     	;# 
   272  0FE5                     	;# 
   273  0FE6                     	;# 
   274  0FE7                     	;# 
   275  0FE8                     	;# 
   276  0FE9                     	;# 
   277  0FEA                     	;# 
   278  0FEB                     	;# 
   279  0FED                     	;# 
   280  0FEE                     	;# 
   281  0FEF                     	;# 
   282  0000                     	;# 
   283  0001                     	;# 
   284  0002                     	;# 
   285  0003                     	;# 
   286  0004                     	;# 
   287  0005                     	;# 
   288  0006                     	;# 
   289  0007                     	;# 
   290  0008                     	;# 
   291  0009                     	;# 
   292  000A                     	;# 
   293  000B                     	;# 
   294  000C                     	;# 
   295  000D                     	;# 
   296  000E                     	;# 
   297  0011                     	;# 
   298  0012                     	;# 
   299  0015                     	;# 
   300  0016                     	;# 
   301  0016                     	;# 
   302  0017                     	;# 
   303  0018                     	;# 
   304  0019                     	;# 
   305  001A                     	;# 
   306  001B                     	;# 
   307  001C                     	;# 
   308  008C                     	;# 
   309  008D                     	;# 
   310  008E                     	;# 
   311  0091                     	;# 
   312  0092                     	;# 
   313  0095                     	;# 
   314  0096                     	;# 
   315  0097                     	;# 
   316  0099                     	;# 
   317  009A                     	;# 
   318  009B                     	;# 
   319  009B                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  009F                     	;# 
   324  010C                     	;# 
   325  010D                     	;# 
   326  010E                     	;# 
   327  0116                     	;# 
   328  0117                     	;# 
   329  011D                     	;# 
   330  018C                     	;# 
   331  018D                     	;# 
   332  018E                     	;# 
   333  0191                     	;# 
   334  0191                     	;# 
   335  0192                     	;# 
   336  0193                     	;# 
   337  0193                     	;# 
   338  0194                     	;# 
   339  0195                     	;# 
   340  0196                     	;# 
   341  0199                     	;# 
   342  019A                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019D                     	;# 
   347  019E                     	;# 
   348  019F                     	;# 
   349  020C                     	;# 
   350  020D                     	;# 
   351  0211                     	;# 
   352  0211                     	;# 
   353  0212                     	;# 
   354  0212                     	;# 
   355  0213                     	;# 
   356  0213                     	;# 
   357  0214                     	;# 
   358  0214                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0216                     	;# 
   363  0216                     	;# 
   364  0217                     	;# 
   365  0217                     	;# 
   366  0391                     	;# 
   367  0392                     	;# 
   368  0393                     	;# 
   369  0394                     	;# 
   370  0395                     	;# 
   371  0396                     	;# 
   372  0611                     	;# 
   373  0612                     	;# 
   374  0613                     	;# 
   375  0613                     	;# 
   376  0614                     	;# 
   377  0615                     	;# 
   378  0616                     	;# 
   379  0616                     	;# 
   380  0711                     	;# 
   381  0711                     	;# 
   382  0711                     	;# 
   383  0712                     	;# 
   384  0712                     	;# 
   385  0713                     	;# 
   386  0713                     	;# 
   387  0713                     	;# 
   388  0714                     	;# 
   389  0714                     	;# 
   390  0714                     	;# 
   391  0715                     	;# 
   392  0715                     	;# 
   393  0716                     	;# 
   394  0716                     	;# 
   395  0716                     	;# 
   396  0716                     	;# 
   397  0717                     	;# 
   398  0717                     	;# 
   399  0717                     	;# 
   400  0717                     	;# 
   401  0718                     	;# 
   402  0718                     	;# 
   403  0718                     	;# 
   404  0719                     	;# 
   405  0719                     	;# 
   406  0719                     	;# 
   407  0719                     	;# 
   408  071A                     	;# 
   409  071A                     	;# 
   410  071A                     	;# 
   411  071A                     	;# 
   412  071A                     	;# 
   413  071B                     	;# 
   414  071B                     	;# 
   415  071C                     	;# 
   416  071C                     	;# 
   417  071C                     	;# 
   418  071C                     	;# 
   419  071C                     	;# 
   420  071D                     	;# 
   421  071D                     	;# 
   422  071E                     	;# 
   423  071E                     	;# 
   424  0791                     	;# 
   425  0791                     	;# 
   426  0793                     	;# 
   427  0793                     	;# 
   428  0794                     	;# 
   429  0794                     	;# 
   430  0796                     	;# 
   431  0796                     	;# 
   432  0796                     	;# 
   433  0797                     	;# 
   434  0797                     	;# 
   435  0797                     	;# 
   436  0798                     	;# 
   437  0798                     	;# 
   438  0799                     	;# 
   439  0799                     	;# 
   440  0799                     	;# 
   441  079A                     	;# 
   442  079A                     	;# 
   443  079A                     	;# 
   444  079B                     	;# 
   445  079C                     	;# 
   446  079C                     	;# 
   447  079C                     	;# 
   448  079D                     	;# 
   449  079E                     	;# 
   450  079E                     	;# 
   451  0F8C                     	;# 
   452  0F8D                     	;# 
   453  0F91                     	;# 
   454  0F96                     	;# 
   455  0F97                     	;# 
   456  0F9C                     	;# 
   457  0F9D                     	;# 
   458  0F9E                     	;# 
   459  0FE3                     	;# 
   460  0FE4                     	;# 
   461  0FE5                     	;# 
   462  0FE6                     	;# 
   463  0FE7                     	;# 
   464  0FE8                     	;# 
   465  0FE9                     	;# 
   466  0FEA                     	;# 
   467  0FEB                     	;# 
   468  0FED                     	;# 
   469  0FEE                     	;# 
   470  0FEF                     	;# 
   471  0000                     	;# 
   472  0001                     	;# 
   473  0002                     	;# 
   474  0003                     	;# 
   475  0004                     	;# 
   476  0005                     	;# 
   477  0006                     	;# 
   478  0007                     	;# 
   479  0008                     	;# 
   480  0009                     	;# 
   481  000A                     	;# 
   482  000B                     	;# 
   483  000C                     	;# 
   484  000D                     	;# 
   485  000E                     	;# 
   486  0011                     	;# 
   487  0012                     	;# 
   488  0015                     	;# 
   489  0016                     	;# 
   490  0016                     	;# 
   491  0017                     	;# 
   492  0018                     	;# 
   493  0019                     	;# 
   494  001A                     	;# 
   495  001B                     	;# 
   496  001C                     	;# 
   497  008C                     	;# 
   498  008D                     	;# 
   499  008E                     	;# 
   500  0091                     	;# 
   501  0092                     	;# 
   502  0095                     	;# 
   503  0096                     	;# 
   504  0097                     	;# 
   505  0099                     	;# 
   506  009A                     	;# 
   507  009B                     	;# 
   508  009B                     	;# 
   509  009C                     	;# 
   510  009D                     	;# 
   511  009E                     	;# 
   512  009F                     	;# 
   513  010C                     	;# 
   514  010D                     	;# 
   515  010E                     	;# 
   516  0116                     	;# 
   517  0117                     	;# 
   518  011D                     	;# 
   519  018C                     	;# 
   520  018D                     	;# 
   521  018E                     	;# 
   522  0191                     	;# 
   523  0191                     	;# 
   524  0192                     	;# 
   525  0193                     	;# 
   526  0193                     	;# 
   527  0194                     	;# 
   528  0195                     	;# 
   529  0196                     	;# 
   530  0199                     	;# 
   531  019A                     	;# 
   532  019B                     	;# 
   533  019B                     	;# 
   534  019C                     	;# 
   535  019D                     	;# 
   536  019E                     	;# 
   537  019F                     	;# 
   538  020C                     	;# 
   539  020D                     	;# 
   540  0211                     	;# 
   541  0211                     	;# 
   542  0212                     	;# 
   543  0212                     	;# 
   544  0213                     	;# 
   545  0213                     	;# 
   546  0214                     	;# 
   547  0214                     	;# 
   548  0215                     	;# 
   549  0215                     	;# 
   550  0215                     	;# 
   551  0216                     	;# 
   552  0216                     	;# 
   553  0217                     	;# 
   554  0217                     	;# 
   555  0391                     	;# 
   556  0392                     	;# 
   557  0393                     	;# 
   558  0394                     	;# 
   559  0395                     	;# 
   560  0396                     	;# 
   561  0611                     	;# 
   562  0612                     	;# 
   563  0613                     	;# 
   564  0613                     	;# 
   565  0614                     	;# 
   566  0615                     	;# 
   567  0616                     	;# 
   568  0616                     	;# 
   569  0711                     	;# 
   570  0711                     	;# 
   571  0711                     	;# 
   572  0712                     	;# 
   573  0712                     	;# 
   574  0713                     	;# 
   575  0713                     	;# 
   576  0713                     	;# 
   577  0714                     	;# 
   578  0714                     	;# 
   579  0714                     	;# 
   580  0715                     	;# 
   581  0715                     	;# 
   582  0716                     	;# 
   583  0716                     	;# 
   584  0716                     	;# 
   585  0716                     	;# 
   586  0717                     	;# 
   587  0717                     	;# 
   588  0717                     	;# 
   589  0717                     	;# 
   590  0718                     	;# 
   591  0718                     	;# 
   592  0718                     	;# 
   593  0719                     	;# 
   594  0719                     	;# 
   595  0719                     	;# 
   596  0719                     	;# 
   597  071A                     	;# 
   598  071A                     	;# 
   599  071A                     	;# 
   600  071A                     	;# 
   601  071A                     	;# 
   602  071B                     	;# 
   603  071B                     	;# 
   604  071C                     	;# 
   605  071C                     	;# 
   606  071C                     	;# 
   607  071C                     	;# 
   608  071C                     	;# 
   609  071D                     	;# 
   610  071D                     	;# 
   611  071E                     	;# 
   612  071E                     	;# 
   613  0791                     	;# 
   614  0791                     	;# 
   615  0793                     	;# 
   616  0793                     	;# 
   617  0794                     	;# 
   618  0794                     	;# 
   619  0796                     	;# 
   620  0796                     	;# 
   621  0796                     	;# 
   622  0797                     	;# 
   623  0797                     	;# 
   624  0797                     	;# 
   625  0798                     	;# 
   626  0798                     	;# 
   627  0799                     	;# 
   628  0799                     	;# 
   629  0799                     	;# 
   630  079A                     	;# 
   631  079A                     	;# 
   632  079A                     	;# 
   633  079B                     	;# 
   634  079C                     	;# 
   635  079C                     	;# 
   636  079C                     	;# 
   637  079D                     	;# 
   638  079E                     	;# 
   639  079E                     	;# 
   640  0F8C                     	;# 
   641  0F8D                     	;# 
   642  0F91                     	;# 
   643  0F96                     	;# 
   644  0F97                     	;# 
   645  0F9C                     	;# 
   646  0F9D                     	;# 
   647  0F9E                     	;# 
   648  0FE3                     	;# 
   649  0FE4                     	;# 
   650  0FE5                     	;# 
   651  0FE6                     	;# 
   652  0FE7                     	;# 
   653  0FE8                     	;# 
   654  0FE9                     	;# 
   655  0FEA                     	;# 
   656  0FEB                     	;# 
   657  0FED                     	;# 
   658  0FEE                     	;# 
   659  0FEF                     	;# 
   660  0000                     	;# 
   661  0001                     	;# 
   662  0002                     	;# 
   663  0003                     	;# 
   664  0004                     	;# 
   665  0005                     	;# 
   666  0006                     	;# 
   667  0007                     	;# 
   668  0008                     	;# 
   669  0009                     	;# 
   670  000A                     	;# 
   671  000B                     	;# 
   672  000C                     	;# 
   673  000D                     	;# 
   674  000E                     	;# 
   675  0011                     	;# 
   676  0012                     	;# 
   677  0015                     	;# 
   678  0016                     	;# 
   679  0016                     	;# 
   680  0017                     	;# 
   681  0018                     	;# 
   682  0019                     	;# 
   683  001A                     	;# 
   684  001B                     	;# 
   685  001C                     	;# 
   686  008C                     	;# 
   687  008D                     	;# 
   688  008E                     	;# 
   689  0091                     	;# 
   690  0092                     	;# 
   691  0095                     	;# 
   692  0096                     	;# 
   693  0097                     	;# 
   694  0099                     	;# 
   695  009A                     	;# 
   696  009B                     	;# 
   697  009B                     	;# 
   698  009C                     	;# 
   699  009D                     	;# 
   700  009E                     	;# 
   701  009F                     	;# 
   702  010C                     	;# 
   703  010D                     	;# 
   704  010E                     	;# 
   705  0116                     	;# 
   706  0117                     	;# 
   707  011D                     	;# 
   708  018C                     	;# 
   709  018D                     	;# 
   710  018E                     	;# 
   711  0191                     	;# 
   712  0191                     	;# 
   713  0192                     	;# 
   714  0193                     	;# 
   715  0193                     	;# 
   716  0194                     	;# 
   717  0195                     	;# 
   718  0196                     	;# 
   719  0199                     	;# 
   720  019A                     	;# 
   721  019B                     	;# 
   722  019B                     	;# 
   723  019C                     	;# 
   724  019D                     	;# 
   725  019E                     	;# 
   726  019F                     	;# 
   727  020C                     	;# 
   728  020D                     	;# 
   729  0211                     	;# 
   730  0211                     	;# 
   731  0212                     	;# 
   732  0212                     	;# 
   733  0213                     	;# 
   734  0213                     	;# 
   735  0214                     	;# 
   736  0214                     	;# 
   737  0215                     	;# 
   738  0215                     	;# 
   739  0215                     	;# 
   740  0216                     	;# 
   741  0216                     	;# 
   742  0217                     	;# 
   743  0217                     	;# 
   744  0391                     	;# 
   745  0392                     	;# 
   746  0393                     	;# 
   747  0394                     	;# 
   748  0395                     	;# 
   749  0396                     	;# 
   750  0611                     	;# 
   751  0612                     	;# 
   752  0613                     	;# 
   753  0613                     	;# 
   754  0614                     	;# 
   755  0615                     	;# 
   756  0616                     	;# 
   757  0616                     	;# 
   758  0711                     	;# 
   759  0711                     	;# 
   760  0711                     	;# 
   761  0712                     	;# 
   762  0712                     	;# 
   763  0713                     	;# 
   764  0713                     	;# 
   765  0713                     	;# 
   766  0714                     	;# 
   767  0714                     	;# 
   768  0714                     	;# 
   769  0715                     	;# 
   770  0715                     	;# 
   771  0716                     	;# 
   772  0716                     	;# 
   773  0716                     	;# 
   774  0716                     	;# 
   775  0717                     	;# 
   776  0717                     	;# 
   777  0717                     	;# 
   778  0717                     	;# 
   779  0718                     	;# 
   780  0718                     	;# 
   781  0718                     	;# 
   782  0719                     	;# 
   783  0719                     	;# 
   784  0719                     	;# 
   785  0719                     	;# 
   786  071A                     	;# 
   787  071A                     	;# 
   788  071A                     	;# 
   789  071A                     	;# 
   790  071A                     	;# 
   791  071B                     	;# 
   792  071B                     	;# 
   793  071C                     	;# 
   794  071C                     	;# 
   795  071C                     	;# 
   796  071C                     	;# 
   797  071C                     	;# 
   798  071D                     	;# 
   799  071D                     	;# 
   800  071E                     	;# 
   801  071E                     	;# 
   802  0791                     	;# 
   803  0791                     	;# 
   804  0793                     	;# 
   805  0793                     	;# 
   806  0794                     	;# 
   807  0794                     	;# 
   808  0796                     	;# 
   809  0796                     	;# 
   810  0796                     	;# 
   811  0797                     	;# 
   812  0797                     	;# 
   813  0797                     	;# 
   814  0798                     	;# 
   815  0798                     	;# 
   816  0799                     	;# 
   817  0799                     	;# 
   818  0799                     	;# 
   819  079A                     	;# 
   820  079A                     	;# 
   821  079A                     	;# 
   822  079B                     	;# 
   823  079C                     	;# 
   824  079C                     	;# 
   825  079C                     	;# 
   826  079D                     	;# 
   827  079E                     	;# 
   828  079E                     	;# 
   829  0F8C                     	;# 
   830  0F8D                     	;# 
   831  0F91                     	;# 
   832  0F96                     	;# 
   833  0F97                     	;# 
   834  0F9C                     	;# 
   835  0F9D                     	;# 
   836  0F9E                     	;# 
   837  0FE3                     	;# 
   838  0FE4                     	;# 
   839  0FE5                     	;# 
   840  0FE6                     	;# 
   841  0FE7                     	;# 
   842  0FE8                     	;# 
   843  0FE9                     	;# 
   844  0FEA                     	;# 
   845  0FEB                     	;# 
   846  0FED                     	;# 
   847  0FEE                     	;# 
   848  0FEF                     	;# 
   849  0000                     	;# 
   850  0001                     	;# 
   851  0002                     	;# 
   852  0003                     	;# 
   853  0004                     	;# 
   854  0005                     	;# 
   855  0006                     	;# 
   856  0007                     	;# 
   857  0008                     	;# 
   858  0009                     	;# 
   859  000A                     	;# 
   860  000B                     	;# 
   861  000C                     	;# 
   862  000D                     	;# 
   863  000E                     	;# 
   864  0011                     	;# 
   865  0012                     	;# 
   866  0015                     	;# 
   867  0016                     	;# 
   868  0016                     	;# 
   869  0017                     	;# 
   870  0018                     	;# 
   871  0019                     	;# 
   872  001A                     	;# 
   873  001B                     	;# 
   874  001C                     	;# 
   875  008C                     	;# 
   876  008D                     	;# 
   877  008E                     	;# 
   878  0091                     	;# 
   879  0092                     	;# 
   880  0095                     	;# 
   881  0096                     	;# 
   882  0097                     	;# 
   883  0099                     	;# 
   884  009A                     	;# 
   885  009B                     	;# 
   886  009B                     	;# 
   887  009C                     	;# 
   888  009D                     	;# 
   889  009E                     	;# 
   890  009F                     	;# 
   891  010C                     	;# 
   892  010D                     	;# 
   893  010E                     	;# 
   894  0116                     	;# 
   895  0117                     	;# 
   896  011D                     	;# 
   897  018C                     	;# 
   898  018D                     	;# 
   899  018E                     	;# 
   900  0191                     	;# 
   901  0191                     	;# 
   902  0192                     	;# 
   903  0193                     	;# 
   904  0193                     	;# 
   905  0194                     	;# 
   906  0195                     	;# 
   907  0196                     	;# 
   908  0199                     	;# 
   909  019A                     	;# 
   910  019B                     	;# 
   911  019B                     	;# 
   912  019C                     	;# 
   913  019D                     	;# 
   914  019E                     	;# 
   915  019F                     	;# 
   916  020C                     	;# 
   917  020D                     	;# 
   918  0211                     	;# 
   919  0211                     	;# 
   920  0212                     	;# 
   921  0212                     	;# 
   922  0213                     	;# 
   923  0213                     	;# 
   924  0214                     	;# 
   925  0214                     	;# 
   926  0215                     	;# 
   927  0215                     	;# 
   928  0215                     	;# 
   929  0216                     	;# 
   930  0216                     	;# 
   931  0217                     	;# 
   932  0217                     	;# 
   933  0391                     	;# 
   934  0392                     	;# 
   935  0393                     	;# 
   936  0394                     	;# 
   937  0395                     	;# 
   938  0396                     	;# 
   939  0611                     	;# 
   940  0612                     	;# 
   941  0613                     	;# 
   942  0613                     	;# 
   943  0614                     	;# 
   944  0615                     	;# 
   945  0616                     	;# 
   946  0616                     	;# 
   947  0711                     	;# 
   948  0711                     	;# 
   949  0711                     	;# 
   950  0712                     	;# 
   951  0712                     	;# 
   952  0713                     	;# 
   953  0713                     	;# 
   954  0713                     	;# 
   955  0714                     	;# 
   956  0714                     	;# 
   957  0714                     	;# 
   958  0715                     	;# 
   959  0715                     	;# 
   960  0716                     	;# 
   961  0716                     	;# 
   962  0716                     	;# 
   963  0716                     	;# 
   964  0717                     	;# 
   965  0717                     	;# 
   966  0717                     	;# 
   967  0717                     	;# 
   968  0718                     	;# 
   969  0718                     	;# 
   970  0718                     	;# 
   971  0719                     	;# 
   972  0719                     	;# 
   973  0719                     	;# 
   974  0719                     	;# 
   975  071A                     	;# 
   976  071A                     	;# 
   977  071A                     	;# 
   978  071A                     	;# 
   979  071A                     	;# 
   980  071B                     	;# 
   981  071B                     	;# 
   982  071C                     	;# 
   983  071C                     	;# 
   984  071C                     	;# 
   985  071C                     	;# 
   986  071C                     	;# 
   987  071D                     	;# 
   988  071D                     	;# 
   989  071E                     	;# 
   990  071E                     	;# 
   991  0791                     	;# 
   992  0791                     	;# 
   993  0793                     	;# 
   994  0793                     	;# 
   995  0794                     	;# 
   996  0794                     	;# 
   997  0796                     	;# 
   998  0796                     	;# 
   999  0796                     	;# 
  1000  0797                     	;# 
  1001  0797                     	;# 
  1002  0797                     	;# 
  1003  0798                     	;# 
  1004  0798                     	;# 
  1005  0799                     	;# 
  1006  0799                     	;# 
  1007  0799                     	;# 
  1008  079A                     	;# 
  1009  079A                     	;# 
  1010  079A                     	;# 
  1011  079B                     	;# 
  1012  079C                     	;# 
  1013  079C                     	;# 
  1014  079C                     	;# 
  1015  079D                     	;# 
  1016  079E                     	;# 
  1017  079E                     	;# 
  1018  0F8C                     	;# 
  1019  0F8D                     	;# 
  1020  0F91                     	;# 
  1021  0F96                     	;# 
  1022  0F97                     	;# 
  1023  0F9C                     	;# 
  1024  0F9D                     	;# 
  1025  0F9E                     	;# 
  1026  0FE3                     	;# 
  1027  0FE4                     	;# 
  1028  0FE5                     	;# 
  1029  0FE6                     	;# 
  1030  0FE7                     	;# 
  1031  0FE8                     	;# 
  1032  0FE9                     	;# 
  1033  0FEA                     	;# 
  1034  0FEB                     	;# 
  1035  0FED                     	;# 
  1036  0FEE                     	;# 
  1037  0FEF                     	;# 
  1038  0000                     	;# 
  1039  0001                     	;# 
  1040  0002                     	;# 
  1041  0003                     	;# 
  1042  0004                     	;# 
  1043  0005                     	;# 
  1044  0006                     	;# 
  1045  0007                     	;# 
  1046  0008                     	;# 
  1047  0009                     	;# 
  1048  000A                     	;# 
  1049  000B                     	;# 
  1050  000C                     	;# 
  1051  000D                     	;# 
  1052  000E                     	;# 
  1053  0011                     	;# 
  1054  0012                     	;# 
  1055  0015                     	;# 
  1056  0016                     	;# 
  1057  0016                     	;# 
  1058  0017                     	;# 
  1059  0018                     	;# 
  1060  0019                     	;# 
  1061  001A                     	;# 
  1062  001B                     	;# 
  1063  001C                     	;# 
  1064  008C                     	;# 
  1065  008D                     	;# 
  1066  008E                     	;# 
  1067  0091                     	;# 
  1068  0092                     	;# 
  1069  0095                     	;# 
  1070  0096                     	;# 
  1071  0097                     	;# 
  1072  0099                     	;# 
  1073  009A                     	;# 
  1074  009B                     	;# 
  1075  009B                     	;# 
  1076  009C                     	;# 
  1077  009D                     	;# 
  1078  009E                     	;# 
  1079  009F                     	;# 
  1080  010C                     	;# 
  1081  010D                     	;# 
  1082  010E                     	;# 
  1083  0116                     	;# 
  1084  0117                     	;# 
  1085  011D                     	;# 
  1086  018C                     	;# 
  1087  018D                     	;# 
  1088  018E                     	;# 
  1089  0191                     	;# 
  1090  0191                     	;# 
  1091  0192                     	;# 
  1092  0193                     	;# 
  1093  0193                     	;# 
  1094  0194                     	;# 
  1095  0195                     	;# 
  1096  0196                     	;# 
  1097  0199                     	;# 
  1098  019A                     	;# 
  1099  019B                     	;# 
  1100  019B                     	;# 
  1101  019C                     	;# 
  1102  019D                     	;# 
  1103  019E                     	;# 
  1104  019F                     	;# 
  1105  020C                     	;# 
  1106  020D                     	;# 
  1107  0211                     	;# 
  1108  0211                     	;# 
  1109  0212                     	;# 
  1110  0212                     	;# 
  1111  0213                     	;# 
  1112  0213                     	;# 
  1113  0214                     	;# 
  1114  0214                     	;# 
  1115  0215                     	;# 
  1116  0215                     	;# 
  1117  0215                     	;# 
  1118  0216                     	;# 
  1119  0216                     	;# 
  1120  0217                     	;# 
  1121  0217                     	;# 
  1122  0391                     	;# 
  1123  0392                     	;# 
  1124  0393                     	;# 
  1125  0394                     	;# 
  1126  0395                     	;# 
  1127  0396                     	;# 
  1128  0611                     	;# 
  1129  0612                     	;# 
  1130  0613                     	;# 
  1131  0613                     	;# 
  1132  0614                     	;# 
  1133  0615                     	;# 
  1134  0616                     	;# 
  1135  0616                     	;# 
  1136  0711                     	;# 
  1137  0711                     	;# 
  1138  0711                     	;# 
  1139  0712                     	;# 
  1140  0712                     	;# 
  1141  0713                     	;# 
  1142  0713                     	;# 
  1143  0713                     	;# 
  1144  0714                     	;# 
  1145  0714                     	;# 
  1146  0714                     	;# 
  1147  0715                     	;# 
  1148  0715                     	;# 
  1149  0716                     	;# 
  1150  0716                     	;# 
  1151  0716                     	;# 
  1152  0716                     	;# 
  1153  0717                     	;# 
  1154  0717                     	;# 
  1155  0717                     	;# 
  1156  0717                     	;# 
  1157  0718                     	;# 
  1158  0718                     	;# 
  1159  0718                     	;# 
  1160  0719                     	;# 
  1161  0719                     	;# 
  1162  0719                     	;# 
  1163  0719                     	;# 
  1164  071A                     	;# 
  1165  071A                     	;# 
  1166  071A                     	;# 
  1167  071A                     	;# 
  1168  071A                     	;# 
  1169  071B                     	;# 
  1170  071B                     	;# 
  1171  071C                     	;# 
  1172  071C                     	;# 
  1173  071C                     	;# 
  1174  071C                     	;# 
  1175  071C                     	;# 
  1176  071D                     	;# 
  1177  071D                     	;# 
  1178  071E                     	;# 
  1179  071E                     	;# 
  1180  0791                     	;# 
  1181  0791                     	;# 
  1182  0793                     	;# 
  1183  0793                     	;# 
  1184  0794                     	;# 
  1185  0794                     	;# 
  1186  0796                     	;# 
  1187  0796                     	;# 
  1188  0796                     	;# 
  1189  0797                     	;# 
  1190  0797                     	;# 
  1191  0797                     	;# 
  1192  0798                     	;# 
  1193  0798                     	;# 
  1194  0799                     	;# 
  1195  0799                     	;# 
  1196  0799                     	;# 
  1197  079A                     	;# 
  1198  079A                     	;# 
  1199  079A                     	;# 
  1200  079B                     	;# 
  1201  079C                     	;# 
  1202  079C                     	;# 
  1203  079C                     	;# 
  1204  079D                     	;# 
  1205  079E                     	;# 
  1206  079E                     	;# 
  1207  0F8C                     	;# 
  1208  0F8D                     	;# 
  1209  0F91                     	;# 
  1210  0F96                     	;# 
  1211  0F97                     	;# 
  1212  0F9C                     	;# 
  1213  0F9D                     	;# 
  1214  0F9E                     	;# 
  1215  0FE3                     	;# 
  1216  0FE4                     	;# 
  1217  0FE5                     	;# 
  1218  0FE6                     	;# 
  1219  0FE7                     	;# 
  1220  0FE8                     	;# 
  1221  0FE9                     	;# 
  1222  0FEA                     	;# 
  1223  0FEB                     	;# 
  1224  0FED                     	;# 
  1225  0FEE                     	;# 
  1226  0FEF                     	;# 
  1227                           
  1228 ;; Function _EUSART_is_tx_ready is unused but had its address taken
  1229  0000                     
  1230 ;; Function _EUSART_is_tx_done is unused but had its address taken
  1231  0000                     
  1232                           	psect	idataBANK0
  1233  0314                     __pidataBANK0:	
  1234                           
  1235                           ;initializer for _KEY3
  1236  0314  34FE               	retlw	254
  1237  0315  3402               	retlw	2
  1238  0316  3427               	retlw	39
  1239  0317  3407               	retlw	7
  1240  0318  3404               	retlw	4
  1241  0319  3401               	retlw	1
  1242  031A  3427               	retlw	39
  1243                           
  1244                           ;initializer for _KEY5
  1245  031B  34FE               	retlw	254
  1246  031C  3402               	retlw	2
  1247  031D  3427               	retlw	39
  1248  031E  3407               	retlw	7
  1249  031F  3410               	retlw	16
  1250  0320  3401               	retlw	1
  1251  0321  3433               	retlw	51
  1252                           
  1253                           ;initializer for _RESET
  1254  0322  34FE               	retlw	254
  1255  0323  3401               	retlw	1
  1256  0324  3441               	retlw	65
  1257  0325  3400               	retlw	0
  1258  0326  3400               	retlw	0
  1259  0327  3440               	retlw	64
  1260                           
  1261                           ;initializer for _LVL
  1262  0328  344C               	retlw	76
  1263  0329  3445               	retlw	69
  1264  032A  3456               	retlw	86
  1265  032B  3445               	retlw	69
  1266  032C  344C               	retlw	76
  1267                           
  1268                           	psect	stringtext1
  1269  0373                     __pstringtext1:	
  1270  0373                     _uart:	
  1271  0373  3422               	retlw	low _EUSART_Read
  1272  0374  3402               	retlw	high _EUSART_Read
  1273  0375  3447               	retlw	low _EUSART_Write
  1274  0376  3402               	retlw	high _EUSART_Write
  1275  0377  3400               	retlw	0
  1276  0378  3400               	retlw	0
  1277  0379  34C7               	retlw	low _EUSART_is_rx_ready
  1278  037A  3403               	retlw	high _EUSART_is_rx_ready
  1279  037B  34E7               	retlw	low _EUSART_SetTxInterruptHandler
  1280  037C  3403               	retlw	high _EUSART_SetTxInterruptHandler
  1281  037D  34F0               	retlw	low _EUSART_Receive_ISR
  1282  037E  3401               	retlw	high _EUSART_Receive_ISR
  1283  037F  34FF               	retlw	low _EUSART_SetRxInterruptHandler
  1284  0380  3403               	retlw	high _EUSART_SetRxInterruptHandler
  1285  0381  3400               	retlw	0
  1286  0382  3400               	retlw	0
  1287  0383  34C3               	retlw	low _EUSART_Transmit_ISR
  1288  0384  3402               	retlw	high _EUSART_Transmit_ISR
  1289  0385  343F               	retlw	low _EUSART_Initialize
  1290  0386  3401               	retlw	high _EUSART_Initialize
  1291  0387                     __end_of_uart:	
  1292                           
  1293                           	psect	nvBANK0
  1294  0065                     __pnvBANK0:	
  1295  0065                     _EUSART_ErrorHandler:	
  1296  0065                     	ds	2
  1297  0067                     _EUSART_OverrunErrorHandler:	
  1298  0067                     	ds	2
  1299  0069                     _EUSART_FramingErrorHandler:	
  1300  0069                     	ds	2
  1301  006B                     _EUSART_RxDefaultInterruptHandler:	
  1302  006B                     	ds	2
  1303  006D                     _EUSART_TxDefaultInterruptHandler:	
  1304  006D                     	ds	2
  1305  006F                     _eusartTxBufferRemaining:	
  1306  006F                     	ds	1
  1307  0011                     _PIR1bits	set	17
  1308  000B                     _INTCONbits	set	11
  1309  0095                     _OPTION_REGbits	set	149
  1310  008E                     _TRISC	set	142
  1311  008D                     _TRISB	set	141
  1312  008C                     _TRISA	set	140
  1313  0097                     _WDTCON	set	151
  1314  0099                     _OSCCON	set	153
  1315  0091                     _PIE1bits	set	145
  1316  011D                     _APFCON	set	285
  1317  010E                     _LATC	set	270
  1318  010D                     _LATB	set	269
  1319  010C                     _LATA	set	268
  1320  0116                     _BORCON	set	278
  1321  018C                     _ANSELA	set	396
  1322  018D                     _ANSELB	set	397
  1323  018E                     _ANSELC	set	398
  1324  0199                     _RCREG	set	409
  1325  019D                     _RCSTAbits	set	413
  1326  019A                     _TXREG	set	410
  1327  019E                     _TXSTAbits	set	414
  1328  019C                     _SPBRGH	set	412
  1329  019B                     _SPBRGL	set	411
  1330  019E                     _TXSTA	set	414
  1331  019D                     _RCSTA	set	413
  1332  019F                     _BAUDCON	set	415
  1333  020C                     _WPUA	set	524
  1334  020D                     _WPUB	set	525
  1335                           
  1336                           	psect	stringtext2
  1337  0387                     __pstringtext2:	
  1338  0387                     STR_2:	
  1339  0387  3453               	retlw	83	;'S'
  1340  0388  3459               	retlw	89	;'Y'
  1341  0389  3453               	retlw	83	;'S'
  1342  038A  3420               	retlw	32	;' '
  1343  038B  3446               	retlw	70	;'F'
  1344  038C  3441               	retlw	65	;'A'
  1345  038D  3443               	retlw	67	;'C'
  1346  038E  3454               	retlw	84	;'T'
  1347  038F  344F               	retlw	79	;'O'
  1348  0390  3452               	retlw	82	;'R'
  1349  0391  3459               	retlw	89	;'Y'
  1350  0392  3420               	retlw	32	;' '
  1351  0393  3452               	retlw	82	;'R'
  1352  0394  3445               	retlw	69	;'E'
  1353  0395  3453               	retlw	83	;'S'
  1354  0396  3445               	retlw	69	;'E'
  1355  0397  3454               	retlw	84	;'T'
  1356  0398  3400               	retlw	0
  1357                           
  1358                           	psect	stringtext3
  1359  0399                     __pstringtext3:	
  1360  0399                     STR_3:	
  1361  0399  3453               	retlw	83	;'S'
  1362  039A  344D               	retlw	77	;'M'
  1363  039B  3441               	retlw	65	;'A'
  1364  039C  3452               	retlw	82	;'R'
  1365  039D  3454               	retlw	84	;'T'
  1366  039E  3420               	retlw	32	;' '
  1367  039F  344C               	retlw	76	;'L'
  1368  03A0  3449               	retlw	73	;'I'
  1369  03A1  3447               	retlw	71	;'G'
  1370  03A2  3448               	retlw	72	;'H'
  1371  03A3  3454               	retlw	84	;'T'
  1372  03A4  3420               	retlw	32	;' '
  1373  03A5  3449               	retlw	73	;'I'
  1374  03A6  344E               	retlw	78	;'N'
  1375  03A7  3449               	retlw	73	;'I'
  1376  03A8  3454               	retlw	84	;'T'
  1377  03A9  3400               	retlw	0
  1378                           
  1379                           	psect	stringtext4
  1380  03CF                     __pstringtext4:	
  1381  03CF                     STR_1:	
  1382  03CF  344C               	retlw	76	;'L'
  1383  03D0  3445               	retlw	69	;'E'
  1384  03D1  3456               	retlw	86	;'V'
  1385  03D2  3445               	retlw	69	;'E'
  1386  03D3  344C               	retlw	76	;'L'
  1387  03D4  3400               	retlw	0
  1388                           
  1389                           	psect	stringtext5
  1390  0000                     __pstringtext5:	
  1391                           
  1392                           ; #config settings
  1393  0000                     
  1394                           	psect	cinit
  1395  0023                     start_initialization:	
  1396  0023                     __initialization:	
  1397                           
  1398                           ; Initialize objects allocated to BANK0
  1399  0023  3014               	movlw	low __pidataBANK0
  1400  0024  0084               	movwf	4
  1401  0025  3083               	movlw	(high __pidataBANK0)| (0+128)
  1402  0026  0085               	movwf	5
  1403  0027  303C               	movlw	low __pdataBANK0
  1404  0028  0086               	movwf	6
  1405  0029  3000               	movlw	high __pdataBANK0
  1406  002A  0087               	movwf	7
  1407  002B  3019               	movlw	25
  1408  002C  3183  23D5  3180   	fcall	init_ram
  1409                           
  1410                           ; Clear objects allocated to COMMON
  1411  002F  01F6               	clrf	__pbssCOMMON& (0+127)
  1412  0030  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1413  0031  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1414  0032  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1415                           
  1416                           ; Clear objects allocated to BANK0
  1417  0033  3020               	movlw	low __pbssBANK0
  1418  0034  0084               	movwf	4
  1419  0035  3000               	movlw	high __pbssBANK0
  1420  0036  0085               	movwf	5
  1421  0037  301C               	movlw	28
  1422  0038  3183  23DB  3180   	fcall	clear_ram0
  1423                           
  1424                           ; Clear objects allocated to BANK1
  1425  003B  30A0               	movlw	low __pbssBANK1
  1426  003C  0084               	movwf	4
  1427  003D  3000               	movlw	high __pbssBANK1
  1428  003E  0085               	movwf	5
  1429  003F  3040               	movlw	64
  1430  0040  3183  23DB  3180   	fcall	clear_ram0
  1431                           
  1432                           ; Clear objects allocated to BANK2
  1433  0043  3020               	movlw	low __pbssBANK2
  1434  0044  0084               	movwf	4
  1435  0045  3001               	movlw	high __pbssBANK2
  1436  0046  0085               	movwf	5
  1437  0047  3040               	movlw	64
  1438  0048  3183  23DB  3180   	fcall	clear_ram0
  1439                           
  1440                           ; Clear objects allocated to BANK3
  1441  004B  30A0               	movlw	low __pbssBANK3
  1442  004C  0084               	movwf	4
  1443  004D  3001               	movlw	high __pbssBANK3
  1444  004E  0085               	movwf	5
  1445  004F  3040               	movlw	64
  1446  0050  3183  23DB  3180   	fcall	clear_ram0
  1447                           
  1448                           ; Clear objects allocated to BANK4
  1449  0053  3020               	movlw	low __pbssBANK4
  1450  0054  0084               	movwf	4
  1451  0055  3002               	movlw	high __pbssBANK4
  1452  0056  0085               	movwf	5
  1453  0057  3040               	movlw	64
  1454  0058  3183  23DB         	fcall	clear_ram0
  1455  005A                     end_of_initialization:	
  1456                           ;End of C runtime variable initialization code
  1457                           
  1458  005A                     __end_of__initialization:	
  1459  005A  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1460  005B  0020               	movlb	0
  1461  005C  3180  28B0         	ljmp	_main	;jump to C main() function
  1462                           
  1463                           	psect	bssCOMMON
  1464  0076                     __pbssCOMMON:	
  1465  0076                     _eusartRxTail:	
  1466  0076                     	ds	1
  1467  0077                     _eusartRxHead:	
  1468  0077                     	ds	1
  1469  0078                     _eusartTxTail:	
  1470  0078                     	ds	1
  1471  0079                     _eusartTxHead:	
  1472  0079                     	ds	1
  1473                           
  1474                           	psect	bssBANK0
  1475  0020                     __pbssBANK0:	
  1476  0020                     _eusartRxStatusBuffer:	
  1477  0020                     	ds	8
  1478  0028                     _eusartRxBuffer:	
  1479  0028                     	ds	8
  1480  0030                     _eusartTxBuffer:	
  1481  0030                     	ds	8
  1482  0038                     _rxData:	
  1483  0038                     	ds	1
  1484  0039                     _ResponseIndex:	
  1485  0039                     	ds	1
  1486  003A                     _eusartRxLastError:	
  1487  003A                     	ds	1
  1488  003B                     _eusartRxCount:	
  1489  003B                     	ds	1
  1490                           
  1491                           	psect	dataBANK0
  1492  003C                     __pdataBANK0:	
  1493  003C                     _KEY3:	
  1494  003C                     	ds	7
  1495  0043                     _KEY5:	
  1496  0043                     	ds	7
  1497  004A                     _RESET:	
  1498  004A                     	ds	6
  1499  0050                     _LVL:	
  1500  0050                     	ds	5
  1501                           
  1502                           	psect	bssBANK1
  1503  00A0                     __pbssBANK1:	
  1504  00A0                     _ResponseBuffer:	
  1505  00A0                     	ds	64
  1506                           
  1507                           	psect	bssBANK2
  1508  0120                     __pbssBANK2:	
  1509  0120                     _Storage:	
  1510  0120                     	ds	64
  1511                           
  1512                           	psect	bssBANK3
  1513  01A0                     __pbssBANK3:	
  1514  01A0                     _Storage2:	
  1515  01A0                     	ds	64
  1516                           
  1517                           	psect	bssBANK4
  1518  0220                     __pbssBANK4:	
  1519  0220                     _ReadStorage:	
  1520  0220                     	ds	64
  1521                           
  1522                           	psect	inittext
  1523  03D5                     init_ram:	
  1524  03D5  00FE               	movwf	126
  1525  03D6                     initloop:	
  1526  03D6  0012               	moviw fsr0++
  1527  03D7  001E               	movwi fsr1++
  1528  03D8  0BFE               	decfsz	126,f
  1529  03D9  2BD6               	goto	initloop
  1530  03DA  3400               	retlw	0
  1531                           
  1532                           	psect	clrtext
  1533  03DB                     clear_ram0:	
  1534                           ;	Called with FSR0 containing the base address, and
  1535                           ;	WREG with the size to clear
  1536                           
  1537  03DB  0064               	clrwdt	;clear the watchdog before getting into this loop
  1538  03DC                     clrloop0:	
  1539  03DC  0180               	clrf	0	;clear RAM location pointed to by FSR
  1540  03DD  3101               	addfsr 0,1
  1541  03DE  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1542  03DF  2BDC               	goto	clrloop0	;have we reached the end yet?
  1543  03E0  3400               	retlw	0	;all done for this memory range, return
  1544                           
  1545                           	psect	cstackBANK1
  1546  00E0                     __pcstackBANK1:	
  1547  00E0                     ??_main:	
  1548                           
  1549                           ; 1 bytes @ 0x0
  1550  00E0                     	ds	3
  1551  00E3                     main@s:	
  1552                           
  1553                           ; 1 bytes @ 0x3
  1554  00E3                     	ds	1
  1555                           
  1556                           	psect	cstackCOMMON
  1557  0070                     __pcstackCOMMON:	
  1558  0070                     ?_EUSART_Receive_ISR:	
  1559  0070                     ?_EUSART_Transmit_ISR:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0070                     ??_EUSART_Transmit_ISR:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  1569                           ; 1 bytes @ 0x0
  1570                           
  1571  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  1572                           ; 1 bytes @ 0x0
  1573                           
  1574  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  1575                           ; 1 bytes @ 0x0
  1576                           
  1577  0070                     ?_EUSART_DefaultErrorHandler:	
  1578                           ; 1 bytes @ 0x0
  1579                           
  1580  0070                     ?_EUSART_RxDataHandler:	
  1581                           ; 1 bytes @ 0x0
  1582                           
  1583  0070                     ??_EUSART_RxDataHandler:	
  1584                           ; 1 bytes @ 0x0
  1585                           
  1586  0070                     ?_PIN_MANAGER_Initialize:	
  1587                           ; 1 bytes @ 0x0
  1588                           
  1589  0070                     ?_OSCILLATOR_Initialize:	
  1590                           ; 1 bytes @ 0x0
  1591                           
  1592  0070                     ?_WDT_Initialize:	
  1593                           ; 1 bytes @ 0x0
  1594                           
  1595  0070                     ?_INIT_SMART_LIGHT:	
  1596                           ; 1 bytes @ 0x0
  1597                           
  1598  0070                     ?_ReadyReceiveBuffer:	
  1599                           ; 1 bytes @ 0x0
  1600                           
  1601  0070                     ?_GetResponse:	
  1602                           ; 1 bytes @ 0x0
  1603                           
  1604  0070                     ?_ReceivedMessage:	
  1605                           ; 1 bytes @ 0x0
  1606                           
  1607  0070                     ?_EUSART_Initialize:	
  1608                           ; 1 bytes @ 0x0
  1609                           
  1610  0070                     ?_EUSART_is_rx_ready:	
  1611                           ; 1 bytes @ 0x0
  1612                           
  1613  0070                     ??_EUSART_is_rx_ready:	
  1614                           ; 1 bytes @ 0x0
  1615                           
  1616  0070                     ?_EUSART_Read:	
  1617                           ; 1 bytes @ 0x0
  1618                           
  1619  0070                     ??_EUSART_Read:	
  1620                           ; 1 bytes @ 0x0
  1621                           
  1622  0070                     ?_INTERRUPT_InterruptManager:	
  1623                           ; 1 bytes @ 0x0
  1624                           
  1625  0070                     ?_SYSTEM_Initialize:	
  1626                           ; 1 bytes @ 0x0
  1627                           
  1628  0070                     ?_main:	
  1629                           ; 1 bytes @ 0x0
  1630                           
  1631                           
  1632                           ; 1 bytes @ 0x0
  1633  0070                     	ds	1
  1634  0071                     ??_EUSART_Receive_ISR:	
  1635  0071                     ??_EUSART_DefaultErrorHandler:	
  1636                           ; 1 bytes @ 0x1
  1637                           
  1638  0071                     EUSART_Read@readValue:	
  1639                           ; 1 bytes @ 0x1
  1640                           
  1641                           
  1642                           ; 1 bytes @ 0x1
  1643  0071                     	ds	1
  1644  0072                     ??_ReceivedMessage:	
  1645                           
  1646                           ; 1 bytes @ 0x2
  1647  0072                     	ds	1
  1648  0073                     ReceivedMessage@readByte:	
  1649                           
  1650                           ; 1 bytes @ 0x3
  1651  0073                     	ds	1
  1652  0074                     ?_EUSART_SetRxInterruptHandler:	
  1653  0074                     ?_EUSART_SetTxInterruptHandler:	
  1654                           ; 1 bytes @ 0x4
  1655                           
  1656  0074                     ?_EUSART_SetFramingErrorHandler:	
  1657                           ; 1 bytes @ 0x4
  1658                           
  1659  0074                     ?_EUSART_SetOverrunErrorHandler:	
  1660                           ; 1 bytes @ 0x4
  1661                           
  1662  0074                     ?_EUSART_SetErrorHandler:	
  1663                           ; 1 bytes @ 0x4
  1664                           
  1665  0074                     ??_PIN_MANAGER_Initialize:	
  1666                           ; 1 bytes @ 0x4
  1667                           
  1668  0074                     ??_OSCILLATOR_Initialize:	
  1669                           ; 1 bytes @ 0x4
  1670                           
  1671  0074                     ??_WDT_Initialize:	
  1672                           ; 1 bytes @ 0x4
  1673                           
  1674  0074                     ??_ReadyReceiveBuffer:	
  1675                           ; 1 bytes @ 0x4
  1676                           
  1677  0074                     ?_blockingWait:	
  1678                           ; 1 bytes @ 0x4
  1679                           
  1680  0074                     ??_GetResponse:	
  1681                           ; 1 bytes @ 0x4
  1682                           
  1683  0074                     ?_strcpy:	
  1684                           ; 1 bytes @ 0x4
  1685                           
  1686  0074                     ??_strncmp:	
  1687                           ; 1 bytes @ 0x4
  1688                           
  1689  0074                     ?_strchr:	
  1690                           ; 1 bytes @ 0x4
  1691                           
  1692  0074                     ?_EUSART_Write:	
  1693                           ; 1 bytes @ 0x4
  1694                           
  1695  0074                     ??_INTERRUPT_InterruptManager:	
  1696                           ; 1 bytes @ 0x4
  1697                           
  1698  0074                     ?_strlen:	
  1699                           ; 1 bytes @ 0x4
  1700                           
  1701  0074                     EUSART_Write@txData:	
  1702                           ; 2 bytes @ 0x4
  1703                           
  1704  0074                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1705                           ; 1 bytes @ 0x4
  1706                           
  1707  0074                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1708                           ; 2 bytes @ 0x4
  1709                           
  1710  0074                     EUSART_SetErrorHandler@interruptHandler:	
  1711                           ; 2 bytes @ 0x4
  1712                           
  1713  0074                     EUSART_SetTxInterruptHandler@interruptHandler:	
  1714                           ; 2 bytes @ 0x4
  1715                           
  1716  0074                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1717                           ; 2 bytes @ 0x4
  1718                           
  1719  0074                     blockingWait@limit:	
  1720                           ; 2 bytes @ 0x4
  1721                           
  1722  0074                     strcpy@src:	
  1723                           ; 2 bytes @ 0x4
  1724                           
  1725  0074                     strchr@c:	
  1726                           ; 2 bytes @ 0x4
  1727                           
  1728  0074                     strlen@s:	
  1729                           ; 2 bytes @ 0x4
  1730                           
  1731                           
  1732                           ; 2 bytes @ 0x4
  1733  0074                     	ds	1
  1734  0075                     ??_EUSART_Write:	
  1735  0075                     ReadyReceiveBuffer@position:	
  1736                           ; 1 bytes @ 0x5
  1737                           
  1738                           
  1739                           ; 1 bytes @ 0x5
  1740  0075                     	ds	1
  1741  0076                     ??_EUSART_SetRxInterruptHandler:	
  1742  0076                     ??_EUSART_SetTxInterruptHandler:	
  1743                           ; 1 bytes @ 0x6
  1744                           
  1745  0076                     ??_EUSART_SetFramingErrorHandler:	
  1746                           ; 1 bytes @ 0x6
  1747                           
  1748  0076                     ??_EUSART_SetOverrunErrorHandler:	
  1749                           ; 1 bytes @ 0x6
  1750                           
  1751  0076                     ??_EUSART_SetErrorHandler:	
  1752                           ; 1 bytes @ 0x6
  1753                           
  1754  0076                     ??_INIT_SMART_LIGHT:	
  1755                           ; 1 bytes @ 0x6
  1756                           
  1757  0076                     ??_strchr:	
  1758                           ; 1 bytes @ 0x6
  1759                           
  1760  0076                     ??_SYSTEM_Initialize:	
  1761                           ; 1 bytes @ 0x6
  1762                           
  1763                           
  1764                           	psect	cstackBANK0
  1765  0055                     __pcstackBANK0:	
  1766                           ; 1 bytes @ 0x6
  1767                           
  1768  0055                     ??_blockingWait:	
  1769  0055                     ??_strcpy:	
  1770                           ; 1 bytes @ 0x0
  1771                           
  1772  0055                     ?_SML_SendString:	
  1773                           ; 1 bytes @ 0x0
  1774                           
  1775  0055                     ??_strlen:	
  1776                           ; 1 bytes @ 0x0
  1777                           
  1778  0055                     ??_EUSART_Initialize:	
  1779                           ; 1 bytes @ 0x0
  1780                           
  1781  0055                     ?_SendString:	
  1782                           ; 1 bytes @ 0x0
  1783                           
  1784  0055                     ?_strncmp:	
  1785                           ; 1 bytes @ 0x0
  1786                           
  1787  0055                     strchr@s:	
  1788                           ; 2 bytes @ 0x0
  1789                           
  1790  0055                     SendString@command:	
  1791                           ; 1 bytes @ 0x0
  1792                           
  1793  0055                     SML_SendString@len:	
  1794                           ; 2 bytes @ 0x0
  1795                           
  1796  0055                     strncmp@_r:	
  1797                           ; 2 bytes @ 0x0
  1798                           
  1799                           
  1800                           ; 2 bytes @ 0x0
  1801  0055                     	ds	1
  1802  0056                     blockingWait@counter:	
  1803  0056                     strlen@a:	
  1804                           ; 2 bytes @ 0x1
  1805                           
  1806                           
  1807                           ; 2 bytes @ 0x1
  1808  0056                     	ds	1
  1809  0057                     ??_SML_SendString:	
  1810  0057                     ??_SendString:	
  1811                           ; 1 bytes @ 0x2
  1812                           
  1813  0057                     strcpy@s:	
  1814                           ; 1 bytes @ 0x2
  1815                           
  1816  0057                     strncmp@n:	
  1817                           ; 2 bytes @ 0x2
  1818                           
  1819                           
  1820                           ; 2 bytes @ 0x2
  1821  0057                     	ds	1
  1822  0058                     SML_SendString@command:	
  1823                           
  1824                           ; 1 bytes @ 0x3
  1825  0058                     	ds	1
  1826  0059                     strcpy@d:	
  1827  0059                     strncmp@_l:	
  1828                           ; 1 bytes @ 0x4
  1829                           
  1830                           
  1831                           ; 1 bytes @ 0x4
  1832  0059                     	ds	1
  1833  005A                     strcpy@dest:	
  1834  005A                     strncmp@r:	
  1835                           ; 1 bytes @ 0x5
  1836                           
  1837                           
  1838                           ; 2 bytes @ 0x5
  1839  005A                     	ds	2
  1840  005C                     strncmp@l:	
  1841                           
  1842                           ; 1 bytes @ 0x7
  1843  005C                     	ds	1
  1844  005D                     ?_strstr:	
  1845  005D                     strstr@n:	
  1846                           ; 1 bytes @ 0x8
  1847                           
  1848                           
  1849                           ; 2 bytes @ 0x8
  1850  005D                     	ds	2
  1851  005F                     ??_strstr:	
  1852                           
  1853                           ; 1 bytes @ 0xA
  1854  005F                     	ds	3
  1855  0062                     strstr@nl:	
  1856                           
  1857                           ; 2 bytes @ 0xD
  1858  0062                     	ds	2
  1859  0064                     strstr@h:	
  1860                           
  1861                           ; 1 bytes @ 0xF
  1862  0064                     	ds	1
  1863                           
  1864                           	psect	maintext
  1865  00B0                     __pmaintext:	
  1866 ;;
  1867 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1868 ;;
  1869 ;; *************** function _main *****************
  1870 ;; Defined at:
  1871 ;;		line 17 in file "main.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;		None
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;  s               1    3[BANK1 ] PTR unsigned char 
  1876 ;;		 -> NULL(0), Storage(64), 
  1877 ;;  test            2    0        int 
  1878 ;; Return value:  Size  Location     Type
  1879 ;;                  1    wreg      void 
  1880 ;; Registers used:
  1881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1882 ;; Tracked objects:
  1883 ;;		On entry : B1F/0
  1884 ;;		On exit  : 0/0
  1885 ;;		Unchanged: 0/0
  1886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1887 ;;      Params:         0       0       0       0       0       0       0       0
  1888 ;;      Locals:         0       0       3       0       0       0       0       0
  1889 ;;      Temps:          0       0       1       0       0       0       0       0
  1890 ;;      Totals:         0       0       4       0       0       0       0       0
  1891 ;;Total ram usage:        4 bytes
  1892 ;; Hardware stack levels required when called:    8
  1893 ;; This function calls:
  1894 ;;		_GetResponse
  1895 ;;		_INIT_SMART_LIGHT
  1896 ;;		_ReadyReceiveBuffer
  1897 ;;		_SML_SendString
  1898 ;;		_SYSTEM_Initialize
  1899 ;;		_blockingWait
  1900 ;;		_strcpy
  1901 ;;		_strstr
  1902 ;; This function is called by:
  1903 ;;		Startup code after reset
  1904 ;; This function uses a non-reentrant model
  1905 ;;
  1906                           
  1907                           
  1908                           ;psect for function _main
  1909  00B0                     _main:	
  1910                           
  1911                           ;main.c: 19:     SYSTEM_Initialize();
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1915  00B0  3183  23BB  3180   	fcall	_SYSTEM_Initialize
  1916                           
  1917                           ;main.c: 20:     (INTCONbits.GIE = 1);
  1918  00B3  178B               	bsf	11,7	;volatile
  1919                           
  1920                           ;main.c: 21:     (INTCONbits.PEIE = 1);
  1921  00B4  170B               	bsf	11,6	;volatile
  1922                           
  1923                           ;main.c: 22:     INIT_SMART_LIGHT ();
  1924  00B5  3182  2289  3180   	fcall	_INIT_SMART_LIGHT
  1925  00B8                     L1:	
  1926                           
  1927                           ;main.c: 23:     ReadyReceiveBuffer();
  1928  00B8  3183  23AA  3180   	fcall	_ReadyReceiveBuffer
  1929  00BB                     l1774:	
  1930                           
  1931                           ;main.c: 26:     {;main.c: 27:         if(ResponseIndex != 0)
  1932  00BB  0020               	movlb	0	; select bank0
  1933  00BC  0839               	movf	_ResponseIndex,w
  1934  00BD  1903               	btfsc	3,2
  1935  00BE  28BB               	goto	l1774
  1936                           
  1937                           ;main.c: 28:         {;main.c: 29:             blockingWait(2);
  1938  00BF  3002               	movlw	2
  1939  00C0  00F4               	movwf	blockingWait@limit
  1940  00C1  3000               	movlw	0
  1941  00C2  00F5               	movwf	blockingWait@limit+1
  1942  00C3  3182  22E0  3180   	fcall	_blockingWait
  1943                           
  1944                           ;main.c: 30:             rxData = GetResponse();
  1945  00C6  3184  2410  3180   	fcall	_GetResponse
  1946  00C9  0021               	movlb	1	; select bank1
  1947  00CA  00E0               	movwf	??_main^(0+128)
  1948  00CB  0860               	movf	??_main^(0+128),w
  1949  00CC  0020               	movlb	0	; select bank0
  1950  00CD  00B8               	movwf	_rxData
  1951                           
  1952                           ;main.c: 33:             strcpy(Storage, rxData);
  1953  00CE  0838               	movf	_rxData,w
  1954  00CF  00F4               	movwf	strcpy@src
  1955  00D0  39FF               	andlw	255
  1956  00D1  1D03               	skipz
  1957  00D2  3000               	movlw	0
  1958  00D3  00F5               	movwf	strcpy@src+1
  1959  00D4  3020               	movlw	(low (_Storage| (0+256)))& (0+255)
  1960  00D5  3182  2269  3180   	fcall	_strcpy
  1961                           
  1962                           ;main.c: 35:             char *s;;main.c: 36:             s = strstr(Storage,"LEVEL");
  1963  00D8  30CF               	movlw	low (STR_1| (0+32768))
  1964  00D9  0020               	movlb	0	; select bank0
  1965  00DA  00DD               	movwf	strstr@n
  1966  00DB  3083               	movlw	high (STR_1| (0+32768))
  1967  00DC  00DE               	movwf	strstr@n+1
  1968  00DD  3020               	movlw	(low (_Storage| (0+256)))& (0+255)
  1969  00DE  3180  20F9  3180   	fcall	_strstr
  1970  00E1  0021               	movlb	1	; select bank1
  1971  00E2  00E0               	movwf	??_main^(0+128)
  1972  00E3  0860               	movf	??_main^(0+128),w
  1973  00E4  00E3               	movwf	main@s^(0+128)
  1974                           
  1975                           ;main.c: 37:             strcpy(Storage2, s);
  1976  00E5  0863               	movf	main@s^(0+128),w
  1977  00E6  00F4               	movwf	strcpy@src
  1978  00E7  39FF               	andlw	255
  1979  00E8  1D03               	skipz
  1980  00E9  3001               	movlw	1
  1981  00EA  00F5               	movwf	strcpy@src+1
  1982  00EB  30A0               	movlw	(low (_Storage2| (0+256)))& (0+255)
  1983  00EC  3182  2269  3180   	fcall	_strcpy
  1984                           
  1985                           ;main.c: 38:             SML_SendString(Storage2,64);
  1986  00EF  3040               	movlw	64
  1987  00F0  0020               	movlb	0	; select bank0
  1988  00F1  00D5               	movwf	SML_SendString@len
  1989  00F2  3000               	movlw	0
  1990  00F3  00D6               	movwf	SML_SendString@len+1
  1991  00F4  30A0               	movlw	(low (_Storage2| (0+256)))& (0+255)
  1992  00F5  3181  217D  3180   	fcall	_SML_SendString
  1993  00F8  28B8               	goto	L1
  1994  00F9                     __end_of_main:	
  1995                           ;main.c: 39:             ReadyReceiveBuffer();
  1996                           
  1997                           
  1998                           	psect	text1
  1999  00F9                     __ptext1:	
  2000 ;; *************** function _strstr *****************
  2001 ;; Defined at:
  2002 ;;		line 143 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strstr.c"
  2003 ;; Parameters:    Size  Location     Type
  2004 ;;  h               1    wreg     PTR const unsigned char 
  2005 ;;		 -> NULL(0), Storage(64), 
  2006 ;;  n               2    8[BANK0 ] PTR const unsigned char 
  2007 ;;		 -> STR_1(6), 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  h               1   15[BANK0 ] PTR const unsigned char 
  2010 ;;		 -> NULL(0), Storage(64), 
  2011 ;;  nl              2   13[BANK0 ] unsigned int 
  2012 ;; Return value:  Size  Location     Type
  2013 ;;                  1    wreg      PTR unsigned char 
  2014 ;; Registers used:
  2015 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2016 ;; Tracked objects:
  2017 ;;		On entry : 0/0
  2018 ;;		On exit  : 0/0
  2019 ;;		Unchanged: 0/0
  2020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2021 ;;      Params:         0       2       0       0       0       0       0       0
  2022 ;;      Locals:         0       3       0       0       0       0       0       0
  2023 ;;      Temps:          0       3       0       0       0       0       0       0
  2024 ;;      Totals:         0       8       0       0       0       0       0       0
  2025 ;;Total ram usage:        8 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    6
  2028 ;; This function calls:
  2029 ;;		_strchr
  2030 ;;		_strlen
  2031 ;;		_strncmp
  2032 ;; This function is called by:
  2033 ;;		_main
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           
  2038                           ;psect for function _strstr
  2039  00F9                     _strstr:	
  2040                           
  2041                           ;incstack = 0
  2042                           ; Regs used in _strstr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2043                           ;strstr@h stored from wreg
  2044  00F9  0020               	movlb	0	; select bank0
  2045  00FA  00E4               	movwf	strstr@h
  2046  00FB  085D               	movf	strstr@n,w
  2047  00FC  045E               	iorwf	strstr@n+1,w
  2048  00FD  1903               	btfsc	3,2
  2049  00FE  293D               	goto	l1748
  2050  00FF  085E               	movf	strstr@n+1,w
  2051  0100  00F5               	movwf	strlen@s+1
  2052  0101  085D               	movf	strstr@n,w
  2053  0102  00F4               	movwf	strlen@s
  2054  0103  3183  232D  3180   	fcall	_strlen
  2055  0106  0875               	movf	?_strlen+1,w
  2056  0107  0020               	movlb	0	; select bank0
  2057  0108  00E3               	movwf	strstr@nl+1
  2058  0109  0874               	movf	?_strlen,w
  2059  010A  00E2               	movwf	strstr@nl
  2060  010B  2933               	goto	l1744
  2061  010C                     l1736:	
  2062  010C  085E               	movf	strstr@n+1,w
  2063  010D  00D6               	movwf	strncmp@_r+1
  2064  010E  085D               	movf	strstr@n,w
  2065  010F  00D5               	movwf	strncmp@_r
  2066  0110  0863               	movf	strstr@nl+1,w
  2067  0111  00D8               	movwf	strncmp@n+1
  2068  0112  0862               	movf	strstr@nl,w
  2069  0113  00D7               	movwf	strncmp@n
  2070  0114  0864               	movf	strstr@h,w
  2071  0115  3180  205E  3180   	fcall	_strncmp
  2072  0118  0020               	movlb	0	; select bank0
  2073  0119  0855               	movf	?_strncmp,w
  2074  011A  0456               	iorwf	?_strncmp+1,w
  2075  011B  1D03               	btfss	3,2
  2076  011C  291F               	goto	l1742
  2077  011D  0864               	movf	strstr@h,w
  2078  011E  0008               	return
  2079  011F                     l1742:	
  2080  011F  085D               	movf	strstr@n,w
  2081  0120  0084               	movwf	4
  2082  0121  085E               	movf	strstr@n+1,w
  2083  0122  0085               	movwf	5
  2084  0123  0800               	movf	0,w	;code access
  2085  0124  00DF               	movwf	??_strstr
  2086  0125  01E0               	clrf	??_strstr+1
  2087  0126  085F               	movf	??_strstr,w
  2088  0127  00F4               	movwf	strchr@c
  2089  0128  0860               	movf	??_strstr+1,w
  2090  0129  00F5               	movwf	strchr@c+1
  2091  012A  0864               	movf	strstr@h,w
  2092  012B  3E01               	addlw	1
  2093  012C  3183  235D  3180   	fcall	_strchr
  2094  012F  0020               	movlb	0	; select bank0
  2095  0130  00E1               	movwf	??_strstr+2
  2096  0131  0861               	movf	??_strstr+2,w
  2097  0132  00E4               	movwf	strstr@h
  2098  0133                     l1744:	
  2099  0133  0864               	movf	strstr@h,w
  2100  0134  1903               	btfsc	3,2
  2101  0135  293D               	goto	l1748
  2102  0136  0864               	movf	strstr@h,w
  2103  0137  0086               	movwf	6
  2104  0138  3001               	movlw	1	; select bank2/3
  2105  0139  0087               	movwf	7
  2106  013A  0801               	movf	1,w
  2107  013B  1D03               	btfss	3,2
  2108  013C  290C               	goto	l1736
  2109  013D                     l1748:	
  2110  013D  3000               	movlw	0
  2111  013E  0008               	return
  2112  013F                     __end_of_strstr:	
  2113                           
  2114                           	psect	text2
  2115  005E                     __ptext2:	
  2116 ;; *************** function _strncmp *****************
  2117 ;; Defined at:
  2118 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strncmp.c"
  2119 ;; Parameters:    Size  Location     Type
  2120 ;;  _l              1    wreg     PTR const unsigned char 
  2121 ;;		 -> NULL(0), Storage(64), 
  2122 ;;  _r              2    0[BANK0 ] PTR const unsigned char 
  2123 ;;		 -> STR_1(6), 
  2124 ;;  n               2    2[BANK0 ] unsigned int 
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;  _l              1    4[BANK0 ] PTR const unsigned char 
  2127 ;;		 -> NULL(0), Storage(64), 
  2128 ;;  r               2    5[BANK0 ] PTR const unsigned char 
  2129 ;;		 -> STR_1(6), 
  2130 ;;  l               1    7[BANK0 ] PTR const unsigned char 
  2131 ;;		 -> NULL(0), Storage(64), 
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  2    0[BANK0 ] int 
  2134 ;; Registers used:
  2135 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : 0/0
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2141 ;;      Params:         0       4       0       0       0       0       0       0
  2142 ;;      Locals:         0       4       0       0       0       0       0       0
  2143 ;;      Temps:          1       0       0       0       0       0       0       0
  2144 ;;      Totals:         1       8       0       0       0       0       0       0
  2145 ;;Total ram usage:        9 bytes
  2146 ;; Hardware stack levels used:    1
  2147 ;; Hardware stack levels required when called:    5
  2148 ;; This function calls:
  2149 ;;		Nothing
  2150 ;; This function is called by:
  2151 ;;		_strstr
  2152 ;; This function uses a non-reentrant model
  2153 ;;
  2154                           
  2155                           
  2156                           ;psect for function _strncmp
  2157  005E                     _strncmp:	
  2158                           
  2159                           ;incstack = 0
  2160                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
  2161                           ;strncmp@_l stored from wreg
  2162  005E  0020               	movlb	0	; select bank0
  2163  005F  00D9               	movwf	strncmp@_l
  2164  0060  0859               	movf	strncmp@_l,w
  2165  0061  00F4               	movwf	??_strncmp
  2166  0062  0874               	movf	??_strncmp,w
  2167  0063  00DC               	movwf	strncmp@l
  2168  0064  0856               	movf	strncmp@_r+1,w
  2169  0065  00DB               	movwf	strncmp@r+1
  2170  0066  0855               	movf	strncmp@_r,w
  2171  0067  00DA               	movwf	strncmp@r
  2172  0068  3001               	movlw	1
  2173  0069  02D7               	subwf	strncmp@n,f
  2174  006A  3000               	movlw	0
  2175  006B  3BD8               	subwfb	strncmp@n+1,f
  2176  006C  0A57               	incf	strncmp@n,w
  2177  006D  1D03               	skipz
  2178  006E  289A               	goto	l1676
  2179  006F  0A58               	incf	strncmp@n+1,w
  2180  0070  1D03               	btfss	3,2
  2181  0071  289A               	goto	l1676
  2182  0072  01D5               	clrf	?_strncmp
  2183  0073  01D6               	clrf	?_strncmp+1
  2184  0074  0008               	return
  2185  0075                     l1678:	
  2186  0075  085A               	movf	strncmp@r,w
  2187  0076  0084               	movwf	4
  2188  0077  085B               	movf	strncmp@r+1,w
  2189  0078  0085               	movwf	5
  2190  0079  0012               	moviw fsr0++
  2191  007A  1903               	btfsc	3,2
  2192  007B  28A1               	goto	l1684
  2193  007C  0857               	movf	strncmp@n,w
  2194  007D  0458               	iorwf	strncmp@n+1,w
  2195  007E  1903               	btfsc	3,2
  2196  007F  28A1               	goto	l1684
  2197  0080  085A               	movf	strncmp@r,w
  2198  0081  0084               	movwf	4
  2199  0082  085B               	movf	strncmp@r+1,w
  2200  0083  0085               	movwf	5
  2201  0084  0800               	movf	0,w	;code access
  2202  0085  00F4               	movwf	??_strncmp
  2203  0086  085C               	movf	strncmp@l,w
  2204  0087  0086               	movwf	6
  2205  0088  3001               	movlw	1	; select bank2/3
  2206  0089  0087               	movwf	7
  2207  008A  0801               	movf	1,w
  2208  008B  0674               	xorwf	??_strncmp,w
  2209  008C  1D03               	btfss	3,2
  2210  008D  28A1               	goto	l1684
  2211  008E  3001               	movlw	1
  2212  008F  00F4               	movwf	??_strncmp
  2213  0090  0874               	movf	??_strncmp,w
  2214  0091  07DC               	addwf	strncmp@l,f
  2215  0092  3001               	movlw	1
  2216  0093  07DA               	addwf	strncmp@r,f
  2217  0094  3000               	movlw	0
  2218  0095  3DDB               	addwfc	strncmp@r+1,f
  2219  0096  3001               	movlw	1
  2220  0097  02D7               	subwf	strncmp@n,f
  2221  0098  3000               	movlw	0
  2222  0099  3BD8               	subwfb	strncmp@n+1,f
  2223  009A                     l1676:	
  2224  009A  085C               	movf	strncmp@l,w
  2225  009B  0086               	movwf	6
  2226  009C  3001               	movlw	1	; select bank2/3
  2227  009D  0087               	movwf	7
  2228  009E  0801               	movf	1,w
  2229  009F  1D03               	btfss	3,2
  2230  00A0  2875               	goto	l1678
  2231  00A1                     l1684:	
  2232  00A1  085C               	movf	strncmp@l,w
  2233  00A2  0086               	movwf	6
  2234  00A3  3001               	movlw	1	; select bank2/3
  2235  00A4  0087               	movwf	7
  2236  00A5  085A               	movf	strncmp@r,w
  2237  00A6  0084               	movwf	4
  2238  00A7  085B               	movf	strncmp@r+1,w
  2239  00A8  0085               	movwf	5
  2240  00A9  0800               	movf	0,w	;code access
  2241  00AA  0201               	subwf	1,w
  2242  00AB  00D5               	movwf	?_strncmp
  2243  00AC  01D6               	clrf	?_strncmp+1
  2244  00AD  1C03               	skipc
  2245  00AE  03D6               	decf	?_strncmp+1,f
  2246  00AF  0008               	return
  2247  00B0                     __end_of_strncmp:	
  2248                           
  2249                           	psect	text3
  2250  032D                     __ptext3:	
  2251 ;; *************** function _strlen *****************
  2252 ;; Defined at:
  2253 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strlen.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  s               2    4[COMMON] PTR const unsigned char 
  2256 ;;		 -> STR_1(6), 
  2257 ;; Auto vars:     Size  Location     Type
  2258 ;;  a               2    1[BANK0 ] PTR const unsigned char 
  2259 ;;		 -> STR_1(6), 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  2    4[COMMON] unsigned int 
  2262 ;; Registers used:
  2263 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2269 ;;      Params:         2       0       0       0       0       0       0       0
  2270 ;;      Locals:         0       2       0       0       0       0       0       0
  2271 ;;      Temps:          0       1       0       0       0       0       0       0
  2272 ;;      Totals:         2       3       0       0       0       0       0       0
  2273 ;;Total ram usage:        5 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    5
  2276 ;; This function calls:
  2277 ;;		Nothing
  2278 ;; This function is called by:
  2279 ;;		_strstr
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           
  2284                           ;psect for function _strlen
  2285  032D                     _strlen:	
  2286                           
  2287                           ;incstack = 0
  2288                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
  2289  032D  0875               	movf	strlen@s+1,w
  2290  032E  0020               	movlb	0	; select bank0
  2291  032F  00D7               	movwf	strlen@a+1
  2292  0330  0874               	movf	strlen@s,w
  2293  0331  00D6               	movwf	strlen@a
  2294  0332                     l1656:	
  2295  0332  0874               	movf	strlen@s,w
  2296  0333  0084               	movwf	4
  2297  0334  0875               	movf	strlen@s+1,w
  2298  0335  0085               	movwf	5
  2299  0336  0012               	moviw fsr0++
  2300  0337  1903               	btfsc	3,2
  2301  0338  2B3E               	goto	l1658
  2302  0339  3001               	movlw	1
  2303  033A  07F4               	addwf	strlen@s,f
  2304  033B  3000               	movlw	0
  2305  033C  3DF5               	addwfc	strlen@s+1,f
  2306  033D  2B32               	goto	l1656
  2307  033E                     l1658:	
  2308  033E  0020               	movlb	0	; select bank0
  2309  033F  0856               	movf	strlen@a,w
  2310  0340  0274               	subwf	strlen@s,w
  2311  0341  00F4               	movwf	?_strlen
  2312  0342  0857               	movf	strlen@a+1,w
  2313  0343  3B75               	subwfb	strlen@s+1,w
  2314  0344  00F5               	movwf	?_strlen+1
  2315  0345  0008               	return
  2316  0346                     __end_of_strlen:	
  2317                           
  2318                           	psect	text4
  2319  035D                     __ptext4:	
  2320 ;; *************** function _strchr *****************
  2321 ;; Defined at:
  2322 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strchr.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  s               1    wreg     PTR const unsigned char 
  2325 ;;		 -> NULL(0), Storage(64), 
  2326 ;;  c               2    4[COMMON] int 
  2327 ;; Auto vars:     Size  Location     Type
  2328 ;;  s               1    0[BANK0 ] PTR const unsigned char 
  2329 ;;		 -> NULL(0), Storage(64), 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      PTR unsigned char 
  2332 ;; Registers used:
  2333 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2339 ;;      Params:         2       0       0       0       0       0       0       0
  2340 ;;      Locals:         0       1       0       0       0       0       0       0
  2341 ;;      Temps:          0       0       0       0       0       0       0       0
  2342 ;;      Totals:         2       1       0       0       0       0       0       0
  2343 ;;Total ram usage:        3 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    5
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		_strstr
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352                           
  2353                           
  2354                           ;psect for function _strchr
  2355  035D                     _strchr:	
  2356                           
  2357                           ;incstack = 0
  2358                           ; Regs used in _strchr: [wreg+fsr1l+fsr1h+status,2+status,0]
  2359                           ;strchr@s stored from wreg
  2360  035D  0020               	movlb	0	; select bank0
  2361  035E  00D5               	movwf	strchr@s
  2362  035F                     l886:	
  2363  035F  0855               	movf	strchr@s,w
  2364  0360  0086               	movwf	6
  2365  0361  3001               	movlw	1	; select bank2/3
  2366  0362  0087               	movwf	7
  2367  0363  0801               	movf	1,w
  2368  0364  0674               	xorwf	strchr@c,w
  2369  0365  1D03               	skipz
  2370  0366  2B69               	goto	l1694
  2371  0367  0855               	movf	strchr@s,w
  2372  0368  0008               	return
  2373  0369                     l1694:	
  2374  0369  0855               	movf	strchr@s,w
  2375  036A  0086               	movwf	6
  2376  036B  3001               	movlw	1	; select bank2/3
  2377  036C  0087               	movwf	7
  2378  036D  0AD5               	incf	strchr@s,f
  2379  036E  0801               	movf	1,w
  2380  036F  1D03               	btfss	3,2
  2381  0370  2B5F               	goto	l886
  2382  0371  3000               	movlw	0
  2383  0372  0008               	return
  2384  0373                     __end_of_strchr:	
  2385                           
  2386                           	psect	text5
  2387  0269                     __ptext5:	
  2388 ;; *************** function _strcpy *****************
  2389 ;; Defined at:
  2390 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strcpy.c"
  2391 ;; Parameters:    Size  Location     Type
  2392 ;;  dest            1    wreg     PTR unsigned char 
  2393 ;;		 -> Storage2(64), Storage(64), 
  2394 ;;  src             2    4[COMMON] PTR const unsigned char 
  2395 ;;		 -> NULL(0), ResponseBuffer(64), Storage(64), 
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;  dest            1    5[BANK0 ] PTR unsigned char 
  2398 ;;		 -> Storage2(64), Storage(64), 
  2399 ;;  s               2    2[BANK0 ] PTR const unsigned char 
  2400 ;;		 -> NULL(0), ResponseBuffer(64), Storage(64), 
  2401 ;;  d               1    4[BANK0 ] PTR unsigned char 
  2402 ;;		 -> Storage2(64), Storage(64), 
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  1    wreg      PTR unsigned char 
  2405 ;; Registers used:
  2406 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2412 ;;      Params:         2       0       0       0       0       0       0       0
  2413 ;;      Locals:         0       4       0       0       0       0       0       0
  2414 ;;      Temps:          0       2       0       0       0       0       0       0
  2415 ;;      Totals:         2       6       0       0       0       0       0       0
  2416 ;;Total ram usage:        8 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    5
  2419 ;; This function calls:
  2420 ;;		Nothing
  2421 ;; This function is called by:
  2422 ;;		_main
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425                           
  2426                           
  2427                           ;psect for function _strcpy
  2428  0269                     _strcpy:	
  2429                           
  2430                           ;incstack = 0
  2431                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0]
  2432                           ;strcpy@dest stored from wreg
  2433  0269  0020               	movlb	0	; select bank0
  2434  026A  00DA               	movwf	strcpy@dest
  2435  026B  0875               	movf	strcpy@src+1,w
  2436  026C  00D8               	movwf	strcpy@s+1
  2437  026D  0874               	movf	strcpy@src,w
  2438  026E  00D7               	movwf	strcpy@s
  2439  026F  085A               	movf	strcpy@dest,w
  2440  0270  00D5               	movwf	??_strcpy
  2441  0271  0855               	movf	??_strcpy,w
  2442  0272  00D9               	movwf	strcpy@d
  2443  0273                     l1730:	
  2444  0273  0859               	movf	strcpy@d,w
  2445  0274  0086               	movwf	6
  2446  0275  3001               	movlw	1	; select bank2/3
  2447  0276  0087               	movwf	7
  2448  0277  0AD9               	incf	strcpy@d,f
  2449  0278  0858               	movf	strcpy@s+1,w
  2450  0279  00D6               	movwf	??_strcpy+1
  2451  027A  0857               	movf	strcpy@s,w
  2452  027B  00D5               	movwf	??_strcpy
  2453  027C  0AD7               	incf	strcpy@s,f
  2454  027D  1903               	skipnz
  2455  027E  0AD8               	incf	strcpy@s+1,f
  2456  027F  0855               	movf	??_strcpy,w
  2457  0280  0084               	movwf	4
  2458  0281  0856               	movf	??_strcpy+1,w
  2459  0282  0085               	movwf	5
  2460  0283  0800               	movf	0,w
  2461  0284  3FC0               	movwi [0]fsr1
  2462  0285  0889               	movf	9,f
  2463  0286  1903               	btfsc	3,2
  2464  0287  0008               	return
  2465  0288  2A73               	goto	l1730
  2466  0289                     __end_of_strcpy:	
  2467                           
  2468                           	psect	text6
  2469  02E0                     __ptext6:	
  2470 ;; *************** function _blockingWait *****************
  2471 ;; Defined at:
  2472 ;;		line 53 in file "uart.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;  limit           2    4[COMMON] unsigned short 
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;  counter         2    1[BANK0 ] unsigned short 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  1    wreg      void 
  2479 ;; Registers used:
  2480 ;;		wreg, status,2
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2486 ;;      Params:         2       0       0       0       0       0       0       0
  2487 ;;      Locals:         0       2       0       0       0       0       0       0
  2488 ;;      Temps:          0       1       0       0       0       0       0       0
  2489 ;;      Totals:         2       3       0       0       0       0       0       0
  2490 ;;Total ram usage:        5 bytes
  2491 ;; Hardware stack levels used:    1
  2492 ;; Hardware stack levels required when called:    5
  2493 ;; This function calls:
  2494 ;;		Nothing
  2495 ;; This function is called by:
  2496 ;;		_main
  2497 ;; This function uses a non-reentrant model
  2498 ;;
  2499                           
  2500                           
  2501                           ;psect for function _blockingWait
  2502  02E0                     _blockingWait:	
  2503                           
  2504                           ;uart.c: 53: void blockingWait (uint16_t limit);uart.c: 54: {;uart.c: 55:     for (uint1
      +                          6_t counter = 0; counter < limit; counter++)
  2505                           
  2506                           ;incstack = 0
  2507                           ; Regs used in _blockingWait: [wreg+status,2]
  2508  02E0  0020               	movlb	0	; select bank0
  2509  02E1  01D6               	clrf	blockingWait@counter
  2510  02E2  01D7               	clrf	blockingWait@counter+1
  2511  02E3                     l334:	
  2512  02E3  0875               	movf	blockingWait@limit+1,w
  2513  02E4  0257               	subwf	blockingWait@counter+1,w
  2514  02E5  1D03               	skipz
  2515  02E6  2AE9               	goto	u905
  2516  02E7  0874               	movf	blockingWait@limit,w
  2517  02E8  0256               	subwf	blockingWait@counter,w
  2518  02E9                     u905:	
  2519  02E9  1803               	btfsc	3,0
  2520  02EA  0008               	return
  2521                           
  2522                           ;uart.c: 56:   _delay((unsigned long)((10)*(32000000/4000.0)));
  2523  02EB  3068               	movlw	104
  2524  02EC  0020               	movlb	0	; select bank0
  2525  02ED  00D5               	movwf	??_blockingWait
  2526  02EE  30E4               	movlw	228
  2527  02EF                     u987:	
  2528  02EF  0B89               	decfsz	9,f
  2529  02F0  2AEF               	goto	u987
  2530  02F1  0BD5               	decfsz	??_blockingWait,f
  2531  02F2  2AEF               	goto	u987
  2532  02F3  0000               	nop
  2533  02F4  3001               	movlw	1
  2534  02F5  0020               	movlb	0	; select bank0
  2535  02F6  07D6               	addwf	blockingWait@counter,f
  2536  02F7  3000               	movlw	0
  2537  02F8  3DD7               	addwfc	blockingWait@counter+1,f
  2538  02F9  2AE3               	goto	l334
  2539  02FA                     __end_of_blockingWait:	
  2540                           
  2541                           	psect	text7
  2542  03BB                     __ptext7:	
  2543 ;; *************** function _SYSTEM_Initialize *****************
  2544 ;; Defined at:
  2545 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2546 ;; Parameters:    Size  Location     Type
  2547 ;;		None
  2548 ;; Auto vars:     Size  Location     Type
  2549 ;;		None
  2550 ;; Return value:  Size  Location     Type
  2551 ;;                  1    wreg      void 
  2552 ;; Registers used:
  2553 ;;		wreg, status,2, status,0, pclath, cstack
  2554 ;; Tracked objects:
  2555 ;;		On entry : 0/0
  2556 ;;		On exit  : 0/0
  2557 ;;		Unchanged: 0/0
  2558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2559 ;;      Params:         0       0       0       0       0       0       0       0
  2560 ;;      Locals:         0       0       0       0       0       0       0       0
  2561 ;;      Temps:          0       0       0       0       0       0       0       0
  2562 ;;      Totals:         0       0       0       0       0       0       0       0
  2563 ;;Total ram usage:        0 bytes
  2564 ;; Hardware stack levels used:    1
  2565 ;; Hardware stack levels required when called:    7
  2566 ;; This function calls:
  2567 ;;		_EUSART_Initialize
  2568 ;;		_OSCILLATOR_Initialize
  2569 ;;		_PIN_MANAGER_Initialize
  2570 ;;		_WDT_Initialize
  2571 ;; This function is called by:
  2572 ;;		_main
  2573 ;; This function uses a non-reentrant model
  2574 ;;
  2575                           
  2576                           
  2577                           ;psect for function _SYSTEM_Initialize
  2578  03BB                     _SYSTEM_Initialize:	
  2579                           
  2580                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  2581                           
  2582                           ;incstack = 0
  2583                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2584  03BB  3182  22FA  3183   	fcall	_PIN_MANAGER_Initialize
  2585                           
  2586                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  2587  03BE  3183  23E1  3183   	fcall	_OSCILLATOR_Initialize
  2588                           
  2589                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  2590  03C1  3184  2405  3183   	fcall	_WDT_Initialize
  2591                           
  2592                           ;mcc_generated_files/mcc.c: 56:     EUSART_Initialize();
  2593  03C4  3181  213F         	fcall	_EUSART_Initialize
  2594  03C6  0008               	return
  2595  03C7                     __end_of_SYSTEM_Initialize:	
  2596                           
  2597                           	psect	text8
  2598  0405                     __ptext8:	
  2599 ;; *************** function _WDT_Initialize *****************
  2600 ;; Defined at:
  2601 ;;		line 67 in file "mcc_generated_files/mcc.c"
  2602 ;; Parameters:    Size  Location     Type
  2603 ;;		None
  2604 ;; Auto vars:     Size  Location     Type
  2605 ;;		None
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  1    wreg      void 
  2608 ;; Registers used:
  2609 ;;		wreg
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2615 ;;      Params:         0       0       0       0       0       0       0       0
  2616 ;;      Locals:         0       0       0       0       0       0       0       0
  2617 ;;      Temps:          0       0       0       0       0       0       0       0
  2618 ;;      Totals:         0       0       0       0       0       0       0       0
  2619 ;;Total ram usage:        0 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    5
  2622 ;; This function calls:
  2623 ;;		Nothing
  2624 ;; This function is called by:
  2625 ;;		_SYSTEM_Initialize
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           
  2630                           ;psect for function _WDT_Initialize
  2631  0405                     _WDT_Initialize:	
  2632                           
  2633                           ;mcc_generated_files/mcc.c: 70:     WDTCON = 0x16;
  2634                           
  2635                           ;incstack = 0
  2636                           ; Regs used in _WDT_Initialize: [wreg]
  2637  0405  3016               	movlw	22
  2638  0406  0021               	movlb	1	; select bank1
  2639  0407  0097               	movwf	23	;volatile
  2640  0408  0008               	return
  2641  0409                     __end_of_WDT_Initialize:	
  2642                           
  2643                           	psect	text9
  2644  02FA                     __ptext9:	
  2645 ;; *************** function _PIN_MANAGER_Initialize *****************
  2646 ;; Defined at:
  2647 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  2648 ;; Parameters:    Size  Location     Type
  2649 ;;		None
  2650 ;; Auto vars:     Size  Location     Type
  2651 ;;		None
  2652 ;; Return value:  Size  Location     Type
  2653 ;;                  1    wreg      void 
  2654 ;; Registers used:
  2655 ;;		wreg, status,2
  2656 ;; Tracked objects:
  2657 ;;		On entry : 0/0
  2658 ;;		On exit  : 0/0
  2659 ;;		Unchanged: 0/0
  2660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2661 ;;      Params:         0       0       0       0       0       0       0       0
  2662 ;;      Locals:         0       0       0       0       0       0       0       0
  2663 ;;      Temps:          0       0       0       0       0       0       0       0
  2664 ;;      Totals:         0       0       0       0       0       0       0       0
  2665 ;;Total ram usage:        0 bytes
  2666 ;; Hardware stack levels used:    1
  2667 ;; Hardware stack levels required when called:    5
  2668 ;; This function calls:
  2669 ;;		Nothing
  2670 ;; This function is called by:
  2671 ;;		_SYSTEM_Initialize
  2672 ;; This function uses a non-reentrant model
  2673 ;;
  2674                           
  2675                           
  2676                           ;psect for function _PIN_MANAGER_Initialize
  2677  02FA                     _PIN_MANAGER_Initialize:	
  2678                           
  2679                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  2680                           
  2681                           ;incstack = 0
  2682                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2683  02FA  0022               	movlb	2	; select bank2
  2684  02FB  018C               	clrf	12	;volatile
  2685                           
  2686                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  2687  02FC  018D               	clrf	13	;volatile
  2688                           
  2689                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  2690  02FD  018E               	clrf	14	;volatile
  2691                           
  2692                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3F;
  2693  02FE  303F               	movlw	63
  2694  02FF  0021               	movlb	1	; select bank1
  2695  0300  008C               	movwf	12	;volatile
  2696                           
  2697                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x70;
  2698  0301  3070               	movlw	112
  2699  0302  008D               	movwf	13	;volatile
  2700                           
  2701                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xFF;
  2702  0303  30FF               	movlw	255
  2703  0304  008E               	movwf	14	;volatile
  2704                           
  2705                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xFF;
  2706  0305  30FF               	movlw	255
  2707  0306  0023               	movlb	3	; select bank3
  2708  0307  008E               	movwf	14	;volatile
  2709                           
  2710                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x50;
  2711  0308  3050               	movlw	80
  2712  0309  008D               	movwf	13	;volatile
  2713                           
  2714                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  2715  030A  3037               	movlw	55
  2716  030B  008C               	movwf	12	;volatile
  2717                           
  2718                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  2719  030C  0024               	movlb	4	; select bank4
  2720  030D  018D               	clrf	13	;volatile
  2721                           
  2722                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  2723  030E  018C               	clrf	12	;volatile
  2724                           
  2725                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  2726  030F  0021               	movlb	1	; select bank1
  2727  0310  1795               	bsf	21,7	;volatile
  2728                           
  2729                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  2730  0311  0022               	movlb	2	; select bank2
  2731  0312  019D               	clrf	29	;volatile
  2732  0313  0008               	return
  2733  0314                     __end_of_PIN_MANAGER_Initialize:	
  2734                           
  2735                           	psect	text10
  2736  03E1                     __ptext10:	
  2737 ;; *************** function _OSCILLATOR_Initialize *****************
  2738 ;; Defined at:
  2739 ;;		line 59 in file "mcc_generated_files/mcc.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;		None
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;		None
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  1    wreg      void 
  2746 ;; Registers used:
  2747 ;;		wreg, status,2
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2753 ;;      Params:         0       0       0       0       0       0       0       0
  2754 ;;      Locals:         0       0       0       0       0       0       0       0
  2755 ;;      Temps:          0       0       0       0       0       0       0       0
  2756 ;;      Totals:         0       0       0       0       0       0       0       0
  2757 ;;Total ram usage:        0 bytes
  2758 ;; Hardware stack levels used:    1
  2759 ;; Hardware stack levels required when called:    5
  2760 ;; This function calls:
  2761 ;;		Nothing
  2762 ;; This function is called by:
  2763 ;;		_SYSTEM_Initialize
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           
  2768                           ;psect for function _OSCILLATOR_Initialize
  2769  03E1                     _OSCILLATOR_Initialize:	
  2770                           
  2771                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0xF0;
  2772                           
  2773                           ;incstack = 0
  2774                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2775  03E1  30F0               	movlw	240
  2776  03E2  0021               	movlb	1	; select bank1
  2777  03E3  0099               	movwf	25	;volatile
  2778                           
  2779                           ;mcc_generated_files/mcc.c: 64:     BORCON = 0x00;
  2780  03E4  0022               	movlb	2	; select bank2
  2781  03E5  0196               	clrf	22	;volatile
  2782  03E6  0008               	return
  2783  03E7                     __end_of_OSCILLATOR_Initialize:	
  2784                           
  2785                           	psect	text11
  2786  013F                     __ptext11:	
  2787 ;; *************** function _EUSART_Initialize *****************
  2788 ;; Defined at:
  2789 ;;		line 88 in file "mcc_generated_files/eusart.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;		None
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;		None
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  1    wreg      void 
  2796 ;; Registers used:
  2797 ;;		wreg, status,2, status,0, pclath, cstack
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2803 ;;      Params:         0       0       0       0       0       0       0       0
  2804 ;;      Locals:         0       0       0       0       0       0       0       0
  2805 ;;      Temps:          0       1       0       0       0       0       0       0
  2806 ;;      Totals:         0       1       0       0       0       0       0       0
  2807 ;;Total ram usage:        1 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    6
  2810 ;; This function calls:
  2811 ;;		_EUSART_SetErrorHandler
  2812 ;;		_EUSART_SetFramingErrorHandler
  2813 ;;		_EUSART_SetOverrunErrorHandler
  2814 ;;		_EUSART_SetRxInterruptHandler
  2815 ;;		_EUSART_SetTxInterruptHandler
  2816 ;; This function is called by:
  2817 ;;		_SYSTEM_Initialize
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function _EUSART_Initialize
  2823  013F                     _EUSART_Initialize:	
  2824                           
  2825                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  2826                           
  2827                           ;incstack = 0
  2828                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2829  013F  0021               	movlb	1	; select bank1
  2830  0140  1291               	bcf	17,5	;volatile
  2831                           
  2832                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  2833  0141  30F0               	movlw	low _EUSART_Receive_ISR
  2834  0142  00F4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  2835  0143  3001               	movlw	high _EUSART_Receive_ISR
  2836  0144  00F5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  2837  0145  3183  23FF  3181   	fcall	_EUSART_SetRxInterruptHandler
  2838                           
  2839                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  2840  0148  0021               	movlb	1	; select bank1
  2841  0149  1211               	bcf	17,4	;volatile
  2842                           
  2843                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  2844  014A  30C3               	movlw	low _EUSART_Transmit_ISR
  2845  014B  00F4               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  2846  014C  3002               	movlw	high _EUSART_Transmit_ISR
  2847  014D  00F5               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  2848  014E  3183  23E7  3181   	fcall	_EUSART_SetTxInterruptHandler
  2849                           
  2850                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  2851  0151  3008               	movlw	8
  2852  0152  0023               	movlb	3	; select bank3
  2853  0153  009F               	movwf	31	;volatile
  2854                           
  2855                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  2856  0154  3090               	movlw	144
  2857  0155  009D               	movwf	29	;volatile
  2858                           
  2859                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  2860  0156  3024               	movlw	36
  2861  0157  009E               	movwf	30	;volatile
  2862                           
  2863                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0x44;
  2864  0158  3044               	movlw	68
  2865  0159  009B               	movwf	27	;volatile
  2866                           
  2867                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;
  2868  015A  019C               	clrf	28	;volatile
  2869                           
  2870                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  2871  015B  3012               	movlw	low _EUSART_DefaultFramingErrorHandler
  2872  015C  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  2873  015D  3004               	movlw	high _EUSART_DefaultFramingErrorHandler
  2874  015E  00F5               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  2875  015F  3183  23F3  3181   	fcall	_EUSART_SetFramingErrorHandler
  2876                           
  2877                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  2878  0162  3009               	movlw	low _EUSART_DefaultOverrunErrorHandler
  2879  0163  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  2880  0164  3004               	movlw	high _EUSART_DefaultOverrunErrorHandler
  2881  0165  00F5               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  2882  0166  3183  23ED  3181   	fcall	_EUSART_SetOverrunErrorHandler
  2883                           
  2884                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  2885  0169  300D               	movlw	low _EUSART_DefaultErrorHandler
  2886  016A  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler
  2887  016B  3004               	movlw	high _EUSART_DefaultErrorHandler
  2888  016C  00F5               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  2889  016D  3183  23F9         	fcall	_EUSART_SetErrorHandler
  2890                           
  2891                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  2892  016F  0020               	movlb	0	; select bank0
  2893  0170  01BA               	clrf	_eusartRxLastError	;volatile
  2894                           
  2895                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  2896  0171  01F9               	clrf	_eusartTxHead	;volatile
  2897                           
  2898                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  2899  0172  01F8               	clrf	_eusartTxTail	;volatile
  2900                           
  2901                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  2902  0173  3008               	movlw	8
  2903  0174  00D5               	movwf	??_EUSART_Initialize
  2904  0175  0855               	movf	??_EUSART_Initialize,w
  2905  0176  00EF               	movwf	_eusartTxBufferRemaining	;volatile
  2906                           
  2907                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  2908  0177  01F7               	clrf	_eusartRxHead	;volatile
  2909                           
  2910                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  2911  0178  01F6               	clrf	_eusartRxTail	;volatile
  2912                           
  2913                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  2914  0179  01BB               	clrf	_eusartRxCount	;volatile
  2915                           
  2916                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  2917  017A  0021               	movlb	1	; select bank1
  2918  017B  1691               	bsf	17,5	;volatile
  2919  017C  0008               	return
  2920  017D                     __end_of_EUSART_Initialize:	
  2921                           
  2922                           	psect	text12
  2923  03E7                     __ptext12:	
  2924 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  2925 ;; Defined at:
  2926 ;;		line 276 in file "mcc_generated_files/eusart.c"
  2927 ;; Parameters:    Size  Location     Type
  2928 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  2929 ;;		 -> EUSART_Transmit_ISR(1), 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;		None
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  1    wreg      void 
  2934 ;; Registers used:
  2935 ;;		wreg
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2941 ;;      Params:         2       0       0       0       0       0       0       0
  2942 ;;      Locals:         0       0       0       0       0       0       0       0
  2943 ;;      Temps:          0       0       0       0       0       0       0       0
  2944 ;;      Totals:         2       0       0       0       0       0       0       0
  2945 ;;Total ram usage:        2 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    5
  2948 ;; This function calls:
  2949 ;;		Nothing
  2950 ;; This function is called by:
  2951 ;;		_EUSART_Initialize
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           
  2956                           ;psect for function _EUSART_SetTxInterruptHandler
  2957  03E7                     _EUSART_SetTxInterruptHandler:	
  2958                           
  2959                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  2960                           
  2961                           ;incstack = 0
  2962                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  2963  03E7  0875               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  2964  03E8  0020               	movlb	0	; select bank0
  2965  03E9  00EE               	movwf	_EUSART_TxDefaultInterruptHandler+1
  2966  03EA  0874               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  2967  03EB  00ED               	movwf	_EUSART_TxDefaultInterruptHandler
  2968  03EC  0008               	return
  2969  03ED                     __end_of_EUSART_SetTxInterruptHandler:	
  2970                           
  2971                           	psect	text13
  2972  03ED                     __ptext13:	
  2973 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  2974 ;; Defined at:
  2975 ;;		line 268 in file "mcc_generated_files/eusart.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  2978 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;		None
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  1    wreg      void 
  2983 ;; Registers used:
  2984 ;;		wreg
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2990 ;;      Params:         2       0       0       0       0       0       0       0
  2991 ;;      Locals:         0       0       0       0       0       0       0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0
  2993 ;;      Totals:         2       0       0       0       0       0       0       0
  2994 ;;Total ram usage:        2 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    5
  2997 ;; This function calls:
  2998 ;;		Nothing
  2999 ;; This function is called by:
  3000 ;;		_EUSART_Initialize
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           
  3005                           ;psect for function _EUSART_SetOverrunErrorHandler
  3006  03ED                     _EUSART_SetOverrunErrorHandler:	
  3007                           
  3008                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  3009                           
  3010                           ;incstack = 0
  3011                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  3012  03ED  0875               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  3013  03EE  0020               	movlb	0	; select bank0
  3014  03EF  00E8               	movwf	_EUSART_OverrunErrorHandler+1
  3015  03F0  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  3016  03F1  00E7               	movwf	_EUSART_OverrunErrorHandler
  3017  03F2  0008               	return
  3018  03F3                     __end_of_EUSART_SetOverrunErrorHandler:	
  3019                           
  3020                           	psect	text14
  3021  03F3                     __ptext14:	
  3022 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  3023 ;; Defined at:
  3024 ;;		line 264 in file "mcc_generated_files/eusart.c"
  3025 ;; Parameters:    Size  Location     Type
  3026 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  3027 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  3028 ;; Auto vars:     Size  Location     Type
  3029 ;;		None
  3030 ;; Return value:  Size  Location     Type
  3031 ;;                  1    wreg      void 
  3032 ;; Registers used:
  3033 ;;		wreg
  3034 ;; Tracked objects:
  3035 ;;		On entry : 0/0
  3036 ;;		On exit  : 0/0
  3037 ;;		Unchanged: 0/0
  3038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3039 ;;      Params:         2       0       0       0       0       0       0       0
  3040 ;;      Locals:         0       0       0       0       0       0       0       0
  3041 ;;      Temps:          0       0       0       0       0       0       0       0
  3042 ;;      Totals:         2       0       0       0       0       0       0       0
  3043 ;;Total ram usage:        2 bytes
  3044 ;; Hardware stack levels used:    1
  3045 ;; Hardware stack levels required when called:    5
  3046 ;; This function calls:
  3047 ;;		Nothing
  3048 ;; This function is called by:
  3049 ;;		_EUSART_Initialize
  3050 ;; This function uses a non-reentrant model
  3051 ;;
  3052                           
  3053                           
  3054                           ;psect for function _EUSART_SetFramingErrorHandler
  3055  03F3                     _EUSART_SetFramingErrorHandler:	
  3056                           
  3057                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  3058                           
  3059                           ;incstack = 0
  3060                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  3061  03F3  0875               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  3062  03F4  0020               	movlb	0	; select bank0
  3063  03F5  00EA               	movwf	_EUSART_FramingErrorHandler+1
  3064  03F6  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  3065  03F7  00E9               	movwf	_EUSART_FramingErrorHandler
  3066  03F8  0008               	return
  3067  03F9                     __end_of_EUSART_SetFramingErrorHandler:	
  3068                           
  3069                           	psect	text15
  3070  03F9                     __ptext15:	
  3071 ;; *************** function _EUSART_SetErrorHandler *****************
  3072 ;; Defined at:
  3073 ;;		line 272 in file "mcc_generated_files/eusart.c"
  3074 ;; Parameters:    Size  Location     Type
  3075 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  3076 ;;		 -> EUSART_DefaultErrorHandler(1), 
  3077 ;; Auto vars:     Size  Location     Type
  3078 ;;		None
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  1    wreg      void 
  3081 ;; Registers used:
  3082 ;;		wreg
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3088 ;;      Params:         2       0       0       0       0       0       0       0
  3089 ;;      Locals:         0       0       0       0       0       0       0       0
  3090 ;;      Temps:          0       0       0       0       0       0       0       0
  3091 ;;      Totals:         2       0       0       0       0       0       0       0
  3092 ;;Total ram usage:        2 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    5
  3095 ;; This function calls:
  3096 ;;		Nothing
  3097 ;; This function is called by:
  3098 ;;		_EUSART_Initialize
  3099 ;; This function uses a non-reentrant model
  3100 ;;
  3101                           
  3102                           
  3103                           ;psect for function _EUSART_SetErrorHandler
  3104  03F9                     _EUSART_SetErrorHandler:	
  3105                           
  3106                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  3107                           
  3108                           ;incstack = 0
  3109                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  3110  03F9  0875               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  3111  03FA  0020               	movlb	0	; select bank0
  3112  03FB  00E6               	movwf	_EUSART_ErrorHandler+1
  3113  03FC  0874               	movf	EUSART_SetErrorHandler@interruptHandler,w
  3114  03FD  00E5               	movwf	_EUSART_ErrorHandler
  3115  03FE  0008               	return
  3116  03FF                     __end_of_EUSART_SetErrorHandler:	
  3117                           
  3118                           	psect	text16
  3119  017D                     __ptext16:	
  3120 ;; *************** function _SML_SendString *****************
  3121 ;; Defined at:
  3122 ;;		line 14 in file "uart.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  command         1    wreg     PTR const unsigned char 
  3125 ;;		 -> Storage2(64), 
  3126 ;;  len             2    0[BANK0 ] int 
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;  command         1    3[BANK0 ] PTR const unsigned char 
  3129 ;;		 -> Storage2(64), 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  1    wreg      void 
  3132 ;; Registers used:
  3133 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3139 ;;      Params:         0       2       0       0       0       0       0       0
  3140 ;;      Locals:         0       1       0       0       0       0       0       0
  3141 ;;      Temps:          0       1       0       0       0       0       0       0
  3142 ;;      Totals:         0       4       0       0       0       0       0       0
  3143 ;;Total ram usage:        4 bytes
  3144 ;; Hardware stack levels used:    1
  3145 ;; Hardware stack levels required when called:    6
  3146 ;; This function calls:
  3147 ;;		_EUSART_Write
  3148 ;; This function is called by:
  3149 ;;		_main
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           
  3154                           ;psect for function _SML_SendString
  3155  017D                     _SML_SendString:	
  3156                           
  3157                           ;incstack = 0
  3158                           ; Regs used in _SML_SendString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3159                           ;SML_SendString@command stored from wreg
  3160  017D  0020               	movlb	0	; select bank0
  3161  017E  00D8               	movwf	SML_SendString@command
  3162  017F                     l1758:	
  3163                           ;uart.c: 14: void SML_SendString(const char* command,int len);uart.c: 15: {;uart.c: 16: 
      +                              while (len-- !=0)
  3164                           
  3165                           
  3166                           ;uart.c: 16:     while (len-- !=0)
  3167  017F  30FF               	movlw	255
  3168  0180  07D5               	addwf	SML_SendString@len,f
  3169  0181  30FF               	movlw	255
  3170  0182  3DD6               	addwfc	SML_SendString@len+1,f
  3171  0183  0A55               	incf	SML_SendString@len,w
  3172  0184  1903               	btfsc	3,2
  3173  0185  0A56               	incf	SML_SendString@len+1,w
  3174  0186  1903               	btfsc	3,2
  3175  0187  299F               	goto	l1760
  3176                           
  3177                           ;uart.c: 17:         uart[SML].Write(*command++);
  3178  0188  0858               	movf	SML_SendString@command,w
  3179  0189  0086               	movwf	6
  3180  018A  3001               	movlw	1	; select bank2/3
  3181  018B  0087               	movwf	7
  3182  018C  0801               	movf	1,w
  3183  018D  00D7               	movwf	??_SML_SendString
  3184  018E  0857               	movf	??_SML_SendString,w
  3185  018F  00F4               	movwf	EUSART_Write@txData
  3186  0190  3075               	movlw	low ((_uart+2)| (0+32768))
  3187  0191  0084               	movwf	4
  3188  0192  3083               	movlw	high ((_uart+2)| (0+32768))
  3189  0193  0085               	movwf	5
  3190  0194  3F01               	moviw [1]fsr0
  3191  0195  008A               	movwf	10
  3192  0196  3F00               	moviw [0]fsr0
  3193  0197  000A               	callw
  3194  0198  3181               	pagesel	$
  3195  0199  3001               	movlw	1
  3196  019A  0020               	movlb	0	; select bank0
  3197  019B  00D7               	movwf	??_SML_SendString
  3198  019C  0857               	movf	??_SML_SendString,w
  3199  019D  07D8               	addwf	SML_SendString@command,f
  3200  019E  297F               	goto	l1758
  3201  019F                     l1760:	
  3202                           
  3203                           ;uart.c: 18:     uart[SML].Write('\r');
  3204  019F  300D               	movlw	13
  3205  01A0  00D7               	movwf	??_SML_SendString
  3206  01A1  0857               	movf	??_SML_SendString,w
  3207  01A2  00F4               	movwf	EUSART_Write@txData
  3208  01A3  3075               	movlw	low ((_uart+2)| (0+32768))
  3209  01A4  0084               	movwf	4
  3210  01A5  3083               	movlw	high ((_uart+2)| (0+32768))
  3211  01A6  0085               	movwf	5
  3212  01A7  3F01               	moviw [1]fsr0
  3213  01A8  008A               	movwf	10
  3214  01A9  3F00               	moviw [0]fsr0
  3215  01AA  000A               	callw
  3216  01AB  3181               	pagesel	$
  3217                           
  3218                           ;uart.c: 19:     uart[SML].Write('\n');
  3219  01AC  300A               	movlw	10
  3220  01AD  0020               	movlb	0	; select bank0
  3221  01AE  00D7               	movwf	??_SML_SendString
  3222  01AF  0857               	movf	??_SML_SendString,w
  3223  01B0  00F4               	movwf	EUSART_Write@txData
  3224  01B1  3075               	movlw	low ((_uart+2)| (0+32768))
  3225  01B2  0084               	movwf	4
  3226  01B3  3083               	movlw	high ((_uart+2)| (0+32768))
  3227  01B4  0085               	movwf	5
  3228  01B5  3F01               	moviw [1]fsr0
  3229  01B6  008A               	movwf	10
  3230  01B7  3F00               	moviw [0]fsr0
  3231  01B8  000A               	callw
  3232  01B9  3181               	pagesel	$
  3233  01BA  0008               	return
  3234  01BB                     __end_of_SML_SendString:	
  3235                           
  3236                           	psect	text17
  3237  03AA                     __ptext17:	
  3238 ;; *************** function _ReadyReceiveBuffer *****************
  3239 ;; Defined at:
  3240 ;;		line 43 in file "uart.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;		None
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  position        1    5[COMMON] unsigned char 
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      void 
  3247 ;; Registers used:
  3248 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3254 ;;      Params:         0       0       0       0       0       0       0       0
  3255 ;;      Locals:         1       0       0       0       0       0       0       0
  3256 ;;      Temps:          1       0       0       0       0       0       0       0
  3257 ;;      Totals:         2       0       0       0       0       0       0       0
  3258 ;;Total ram usage:        2 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; Hardware stack levels required when called:    5
  3261 ;; This function calls:
  3262 ;;		Nothing
  3263 ;; This function is called by:
  3264 ;;		_main
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           
  3269                           ;psect for function _ReadyReceiveBuffer
  3270  03AA                     _ReadyReceiveBuffer:	
  3271                           
  3272                           ;uart.c: 45:     ResponseIndex = 0;
  3273                           
  3274                           ;incstack = 0
  3275                           ; Regs used in _ReadyReceiveBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  3276  03AA  0020               	movlb	0	; select bank0
  3277  03AB  01B9               	clrf	_ResponseIndex
  3278                           
  3279                           ;uart.c: 46:     for (uint8_t position = 0; position < 64; position++)
  3280  03AC  01F5               	clrf	ReadyReceiveBuffer@position
  3281  03AD                     l1714:	
  3282                           
  3283                           ;uart.c: 47:         ResponseBuffer[position] = 0;
  3284  03AD  0875               	movf	ReadyReceiveBuffer@position,w
  3285  03AE  3EA0               	addlw	(low (_ResponseBuffer| 0))& (0+255)
  3286  03AF  0086               	movwf	6
  3287  03B0  0187               	clrf	7
  3288  03B1  0181               	clrf	1
  3289  03B2  3001               	movlw	1
  3290  03B3  00F4               	movwf	??_ReadyReceiveBuffer
  3291  03B4  0874               	movf	??_ReadyReceiveBuffer,w
  3292  03B5  07F5               	addwf	ReadyReceiveBuffer@position,f
  3293  03B6  3040               	movlw	64
  3294  03B7  0275               	subwf	ReadyReceiveBuffer@position,w
  3295  03B8  1803               	btfsc	3,0
  3296  03B9  0008               	return
  3297  03BA  2BAD               	goto	l1714
  3298  03BB                     __end_of_ReadyReceiveBuffer:	
  3299                           
  3300                           	psect	text18
  3301  0289                     __ptext18:	
  3302 ;; *************** function _INIT_SMART_LIGHT *****************
  3303 ;; Defined at:
  3304 ;;		line 24 in file "uart.c"
  3305 ;; Parameters:    Size  Location     Type
  3306 ;;		None
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;                  1    wreg      void 
  3311 ;; Registers used:
  3312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3318 ;;      Params:         0       0       0       0       0       0       0       0
  3319 ;;      Locals:         0       0       0       0       0       0       0       0
  3320 ;;      Temps:          0       0       0       0       0       0       0       0
  3321 ;;      Totals:         0       0       0       0       0       0       0       0
  3322 ;;Total ram usage:        0 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    7
  3325 ;; This function calls:
  3326 ;;		_EUSART_SetRxInterruptHandler
  3327 ;;		_SendString
  3328 ;; This function is called by:
  3329 ;;		_main
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           
  3334                           ;psect for function _INIT_SMART_LIGHT
  3335  0289                     _INIT_SMART_LIGHT:	
  3336                           
  3337                           ;uart.c: 26:     uart[SML].SetRxISR(ReceivedMessage);
  3338                           
  3339                           ;incstack = 0
  3340                           ; Regs used in _INIT_SMART_LIGHT: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3341  0289  30BB               	movlw	low _ReceivedMessage
  3342  028A  00F4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  3343  028B  3001               	movlw	high _ReceivedMessage
  3344  028C  00F5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  3345  028D  307F               	movlw	low ((_uart+12)| (0+32768))
  3346  028E  0084               	movwf	4
  3347  028F  3083               	movlw	high ((_uart+12)| (0+32768))
  3348  0290  0085               	movwf	5
  3349  0291  3F01               	moviw [1]fsr0
  3350  0292  008A               	movwf	10
  3351  0293  3F00               	moviw [0]fsr0
  3352  0294  000A               	callw
  3353  0295  3182               	pagesel	$
  3354                           
  3355                           ;uart.c: 27:     SendString("SYS FACTORY RESET");
  3356  0296  3087               	movlw	low (STR_2| (0+32768))
  3357  0297  0020               	movlb	0	; select bank0
  3358  0298  00D5               	movwf	SendString@command
  3359  0299  3083               	movlw	high (STR_2| (0+32768))
  3360  029A  00D6               	movwf	SendString@command+1
  3361  029B  3182  22A6  3182   	fcall	_SendString
  3362                           
  3363                           ;uart.c: 28:     SendString("SMART LIGHT INIT");
  3364  029E  3099               	movlw	low (STR_3| (0+32768))
  3365  029F  0020               	movlb	0	; select bank0
  3366  02A0  00D5               	movwf	SendString@command
  3367  02A1  3083               	movlw	high (STR_3| (0+32768))
  3368  02A2  00D6               	movwf	SendString@command+1
  3369  02A3  3182  22A6         	fcall	_SendString
  3370  02A5  0008               	return
  3371  02A6                     __end_of_INIT_SMART_LIGHT:	
  3372                           
  3373                           	psect	text19
  3374  02A6                     __ptext19:	
  3375 ;; *************** function _SendString *****************
  3376 ;; Defined at:
  3377 ;;		line 7 in file "uart.c"
  3378 ;; Parameters:    Size  Location     Type
  3379 ;;  command         2    0[BANK0 ] PTR const unsigned char 
  3380 ;;		 -> STR_3(17), STR_2(18), 
  3381 ;; Auto vars:     Size  Location     Type
  3382 ;;		None
  3383 ;; Return value:  Size  Location     Type
  3384 ;;                  1    wreg      void 
  3385 ;; Registers used:
  3386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3387 ;; Tracked objects:
  3388 ;;		On entry : 0/0
  3389 ;;		On exit  : 0/0
  3390 ;;		Unchanged: 0/0
  3391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3392 ;;      Params:         0       2       0       0       0       0       0       0
  3393 ;;      Locals:         0       0       0       0       0       0       0       0
  3394 ;;      Temps:          0       1       0       0       0       0       0       0
  3395 ;;      Totals:         0       3       0       0       0       0       0       0
  3396 ;;Total ram usage:        3 bytes
  3397 ;; Hardware stack levels used:    1
  3398 ;; Hardware stack levels required when called:    6
  3399 ;; This function calls:
  3400 ;;		_EUSART_Write
  3401 ;; This function is called by:
  3402 ;;		_INIT_SMART_LIGHT
  3403 ;; This function uses a non-reentrant model
  3404 ;;
  3405                           
  3406                           
  3407                           ;psect for function _SendString
  3408  02A6                     _SendString:	
  3409  02A6                     l1650:	
  3410                           ;uart.c: 7: void SendString(const char* command);uart.c: 8: {;uart.c: 9:     while (Resp
      +                          onseIndex-- != 0)
  3411                           
  3412                           ;incstack = 0
  3413                           ; Regs used in _SendString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3414                           
  3415                           
  3416                           ;uart.c: 9:     while (ResponseIndex-- != 0)
  3417  02A6  3001               	movlw	1
  3418  02A7  0020               	movlb	0	; select bank0
  3419  02A8  02B9               	subwf	_ResponseIndex,f
  3420  02A9  0A39               	incf	_ResponseIndex,w
  3421  02AA  1903               	btfsc	3,2
  3422  02AB  0008               	return
  3423                           
  3424                           ;uart.c: 10:         uart[SML].Write(*command++);
  3425  02AC  0855               	movf	SendString@command,w
  3426  02AD  0084               	movwf	4
  3427  02AE  0856               	movf	SendString@command+1,w
  3428  02AF  0085               	movwf	5
  3429  02B0  0800               	movf	0,w	;code access
  3430  02B1  00D7               	movwf	??_SendString
  3431  02B2  0857               	movf	??_SendString,w
  3432  02B3  00F4               	movwf	EUSART_Write@txData
  3433  02B4  3075               	movlw	low ((_uart+2)| (0+32768))
  3434  02B5  0084               	movwf	4
  3435  02B6  3083               	movlw	high ((_uart+2)| (0+32768))
  3436  02B7  0085               	movwf	5
  3437  02B8  3F01               	moviw [1]fsr0
  3438  02B9  008A               	movwf	10
  3439  02BA  3F00               	moviw [0]fsr0
  3440  02BB  000A               	callw
  3441  02BC  3182               	pagesel	$
  3442  02BD  3001               	movlw	1
  3443  02BE  0020               	movlb	0	; select bank0
  3444  02BF  07D5               	addwf	SendString@command,f
  3445  02C0  3000               	movlw	0
  3446  02C1  3DD6               	addwfc	SendString@command+1,f
  3447  02C2  2AA6               	goto	l1650
  3448  02C3                     __end_of_SendString:	
  3449                           
  3450                           	psect	text20
  3451  0247                     __ptext20:	
  3452 ;; *************** function _EUSART_Write *****************
  3453 ;; Defined at:
  3454 ;;		line 173 in file "mcc_generated_files/eusart.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;  txData          1    4[COMMON] unsigned char 
  3457 ;; Auto vars:     Size  Location     Type
  3458 ;;		None
  3459 ;; Return value:  Size  Location     Type
  3460 ;;                  1    wreg      void 
  3461 ;; Registers used:
  3462 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3463 ;; Tracked objects:
  3464 ;;		On entry : 0/0
  3465 ;;		On exit  : 0/0
  3466 ;;		Unchanged: 0/0
  3467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3468 ;;      Params:         1       0       0       0       0       0       0       0
  3469 ;;      Locals:         0       0       0       0       0       0       0       0
  3470 ;;      Temps:          1       0       0       0       0       0       0       0
  3471 ;;      Totals:         2       0       0       0       0       0       0       0
  3472 ;;Total ram usage:        2 bytes
  3473 ;; Hardware stack levels used:    1
  3474 ;; Hardware stack levels required when called:    5
  3475 ;; This function calls:
  3476 ;;		Nothing
  3477 ;; This function is called by:
  3478 ;;		_SendString
  3479 ;;		_SML_SendString
  3480 ;; This function uses a non-reentrant model
  3481 ;;
  3482                           
  3483                           
  3484                           ;psect for function _EUSART_Write
  3485  0247                     _EUSART_Write:	
  3486  0247                     l1574:	
  3487                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  3488                           
  3489                           ;incstack = 0
  3490                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  3491                           
  3492                           
  3493                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  3494  0247  0020               	movlb	0	; select bank0
  3495  0248  086F               	movf	_eusartTxBufferRemaining,w	;volatile
  3496  0249  1903               	btfsc	3,2
  3497  024A  2A47               	goto	l1574
  3498                           
  3499                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  3500  024B  0021               	movlb	1	; select bank1
  3501  024C  1A11               	btfsc	17,4	;volatile
  3502  024D  2A52               	goto	l100
  3503                           
  3504                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  3505  024E  0874               	movf	EUSART_Write@txData,w
  3506  024F  0023               	movlb	3	; select bank3
  3507  0250  009A               	movwf	26	;volatile
  3508                           
  3509                           ;mcc_generated_files/eusart.c: 182:     }
  3510  0251  2A66               	goto	l1588
  3511  0252                     l100:	
  3512                           ;mcc_generated_files/eusart.c: 183:     else
  3513                           
  3514                           
  3515                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  3516  0252  1211               	bcf	17,4	;volatile
  3517                           
  3518                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  3519  0253  0874               	movf	EUSART_Write@txData,w
  3520  0254  00F5               	movwf	??_EUSART_Write
  3521  0255  0879               	movf	_eusartTxHead,w
  3522  0256  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  3523  0257  0086               	movwf	6
  3524  0258  0187               	clrf	7
  3525  0259  0875               	movf	??_EUSART_Write,w
  3526  025A  0081               	movwf	1
  3527  025B  3001               	movlw	1
  3528  025C  00F5               	movwf	??_EUSART_Write
  3529  025D  0875               	movf	??_EUSART_Write,w
  3530  025E  07F9               	addwf	_eusartTxHead,f	;volatile
  3531                           
  3532                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  3533  025F  3008               	movlw	8
  3534  0260  0279               	subwf	_eusartTxHead,w	;volatile
  3535  0261  1803               	btfsc	3,0
  3536                           
  3537                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  3538  0262  01F9               	clrf	_eusartTxHead	;volatile
  3539                           
  3540                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  3541  0263  3001               	movlw	1
  3542  0264  0020               	movlb	0	; select bank0
  3543  0265  02EF               	subwf	_eusartTxBufferRemaining,f	;volatile
  3544  0266                     l1588:	
  3545                           
  3546                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  3547  0266  0021               	movlb	1	; select bank1
  3548  0267  1611               	bsf	17,4	;volatile
  3549  0268  0008               	return
  3550  0269                     __end_of_EUSART_Write:	
  3551                           
  3552                           	psect	text21
  3553  03FF                     __ptext21:	
  3554 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  3555 ;; Defined at:
  3556 ;;		line 280 in file "mcc_generated_files/eusart.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  3559 ;;		 -> ReceivedMessage(1), EUSART_Receive_ISR(1), 
  3560 ;; Auto vars:     Size  Location     Type
  3561 ;;		None
  3562 ;; Return value:  Size  Location     Type
  3563 ;;                  1    wreg      void 
  3564 ;; Registers used:
  3565 ;;		wreg
  3566 ;; Tracked objects:
  3567 ;;		On entry : 0/0
  3568 ;;		On exit  : 0/0
  3569 ;;		Unchanged: 0/0
  3570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3571 ;;      Params:         2       0       0       0       0       0       0       0
  3572 ;;      Locals:         0       0       0       0       0       0       0       0
  3573 ;;      Temps:          0       0       0       0       0       0       0       0
  3574 ;;      Totals:         2       0       0       0       0       0       0       0
  3575 ;;Total ram usage:        2 bytes
  3576 ;; Hardware stack levels used:    1
  3577 ;; Hardware stack levels required when called:    5
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_EUSART_Initialize
  3582 ;;		_INIT_SMART_LIGHT
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           
  3587                           ;psect for function _EUSART_SetRxInterruptHandler
  3588  03FF                     _EUSART_SetRxInterruptHandler:	
  3589                           
  3590                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  3591                           
  3592                           ;incstack = 0
  3593                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  3594  03FF  0875               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  3595  0400  0020               	movlb	0	; select bank0
  3596  0401  00EC               	movwf	_EUSART_RxDefaultInterruptHandler+1
  3597  0402  0874               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  3598  0403  00EB               	movwf	_EUSART_RxDefaultInterruptHandler
  3599  0404  0008               	return
  3600  0405                     __end_of_EUSART_SetRxInterruptHandler:	
  3601                           
  3602                           	psect	text22
  3603  0410                     __ptext22:	
  3604 ;; *************** function _GetResponse *****************
  3605 ;; Defined at:
  3606 ;;		line 49 in file "uart.c"
  3607 ;; Parameters:    Size  Location     Type
  3608 ;;		None
  3609 ;; Auto vars:     Size  Location     Type
  3610 ;;		None
  3611 ;; Return value:  Size  Location     Type
  3612 ;;                  1    wreg      PTR unsigned char 
  3613 ;; Registers used:
  3614 ;;		wreg
  3615 ;; Tracked objects:
  3616 ;;		On entry : 0/0
  3617 ;;		On exit  : 0/0
  3618 ;;		Unchanged: 0/0
  3619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3620 ;;      Params:         0       0       0       0       0       0       0       0
  3621 ;;      Locals:         0       0       0       0       0       0       0       0
  3622 ;;      Temps:          0       0       0       0       0       0       0       0
  3623 ;;      Totals:         0       0       0       0       0       0       0       0
  3624 ;;Total ram usage:        0 bytes
  3625 ;; Hardware stack levels used:    1
  3626 ;; Hardware stack levels required when called:    5
  3627 ;; This function calls:
  3628 ;;		Nothing
  3629 ;; This function is called by:
  3630 ;;		_main
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634                           
  3635                           ;psect for function _GetResponse
  3636  0410                     _GetResponse:	
  3637                           
  3638                           ;uart.c: 51:     return ResponseBuffer;
  3639                           
  3640                           ;incstack = 0
  3641                           ; Regs used in _GetResponse: [wreg]
  3642  0410  30A0               	movlw	(low (_ResponseBuffer| 0))& (0+255)
  3643  0411  0008               	return
  3644  0412                     __end_of_GetResponse:	
  3645                           
  3646                           	psect	intentry
  3647  0004                     __pintentry:	
  3648 ;; *************** function _INTERRUPT_InterruptManager *****************
  3649 ;; Defined at:
  3650 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;		None
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;		None
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  1    wreg      void 
  3657 ;; Registers used:
  3658 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3664 ;;      Params:         0       0       0       0       0       0       0       0
  3665 ;;      Locals:         0       0       0       0       0       0       0       0
  3666 ;;      Temps:          0       0       0       0       0       0       0       0
  3667 ;;      Totals:         0       0       0       0       0       0       0       0
  3668 ;;Total ram usage:        0 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    4
  3671 ;; This function calls:
  3672 ;;		Absolute function
  3673 ;;		_EUSART_Receive_ISR
  3674 ;;		_EUSART_Transmit_ISR
  3675 ;;		_ReceivedMessage
  3676 ;; This function is called by:
  3677 ;;		Interrupt level 1
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681  0004                     _INTERRUPT_InterruptManager:	
  3682                           
  3683                           ;incstack = 0
  3684  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  3685                           
  3686                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3687  0005  3180               	pagesel	$
  3688                           
  3689                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  3690  0006  1F0B               	btfss	11,6	;volatile
  3691  0007  281F               	goto	i1l165
  3692                           
  3693                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  3694  0008  0021               	movlb	1	; select bank1
  3695  0009  1E11               	btfss	17,4	;volatile
  3696  000A  2814               	goto	i1l160
  3697  000B  0020               	movlb	0	; select bank0
  3698  000C  1E11               	btfss	17,4	;volatile
  3699  000D  2814               	goto	i1l160
  3700                           
  3701                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
  3702  000E  086E               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  3703  000F  008A               	movwf	10
  3704  0010  086D               	movf	_EUSART_TxDefaultInterruptHandler,w
  3705  0011  000A               	callw
  3706  0012  3180               	pagesel	$
  3707                           
  3708                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  3709  0013  281F               	goto	i1l165
  3710  0014                     i1l160:	
  3711                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  3712                           
  3713  0014  0021               	movlb	1	; select bank1
  3714  0015  1E91               	btfss	17,5	;volatile
  3715  0016  281F               	goto	i1l165
  3716  0017  0020               	movlb	0	; select bank0
  3717  0018  1E91               	btfss	17,5	;volatile
  3718  0019  281F               	goto	i1l165
  3719                           
  3720                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
  3721  001A  086C               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  3722  001B  008A               	movwf	10
  3723  001C  086B               	movf	_EUSART_RxDefaultInterruptHandler,w
  3724  001D  000A               	callw
  3725  001E  3180               	pagesel	$
  3726  001F                     i1l165:	
  3727                           ;mcc_generated_files/interrupt_manager.c: 69:     }
  3728                           
  3729                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  3730                           
  3731  001F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  3732  0020  0009               	retfie
  3733  0021                     __end_of_INTERRUPT_InterruptManager:	
  3734                           
  3735                           	psect	text24
  3736  01F0                     __ptext24:	
  3737 ;; *************** function _EUSART_Receive_ISR *****************
  3738 ;; Defined at:
  3739 ;;		line 216 in file "mcc_generated_files/eusart.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;		None
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;		None
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3753 ;;      Params:         0       0       0       0       0       0       0       0
  3754 ;;      Locals:         0       0       0       0       0       0       0       0
  3755 ;;      Temps:          0       0       0       0       0       0       0       0
  3756 ;;      Totals:         0       0       0       0       0       0       0       0
  3757 ;;Total ram usage:        0 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:    2
  3760 ;; This function calls:
  3761 ;;		Absolute function
  3762 ;;		_EUSART_DefaultErrorHandler
  3763 ;;		_EUSART_DefaultFramingErrorHandler
  3764 ;;		_EUSART_DefaultOverrunErrorHandler
  3765 ;;		_EUSART_RxDataHandler
  3766 ;; This function is called by:
  3767 ;;		_EUSART_Initialize
  3768 ;;		_ReceivedMessage
  3769 ;;		_INTERRUPT_InterruptManager
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773                           
  3774                           ;psect for function _EUSART_Receive_ISR
  3775  01F0                     _EUSART_Receive_ISR:	
  3776                           
  3777                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  3778                           
  3779                           ;incstack = 0
  3780                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3781  01F0  0877               	movf	_eusartRxHead,w	;volatile
  3782  01F1  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3783  01F2  0086               	movwf	6
  3784  01F3  0187               	clrf	7
  3785  01F4  0181               	clrf	1
  3786                           
  3787                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
  3788  01F5  0023               	movlb	3	; select bank3
  3789  01F6  1D1D               	btfss	29,2	;volatile
  3790  01F7  2A03               	goto	i1l1346
  3791                           
  3792                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  3793  01F8  0877               	movf	_eusartRxHead,w	;volatile
  3794  01F9  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3795  01FA  0086               	movwf	6
  3796  01FB  0187               	clrf	7
  3797  01FC  1481               	bsf	1,1
  3798                           
  3799                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
  3800  01FD  0020               	movlb	0	; select bank0
  3801  01FE  086A               	movf	_EUSART_FramingErrorHandler+1,w
  3802  01FF  008A               	movwf	10
  3803  0200  0869               	movf	_EUSART_FramingErrorHandler,w
  3804  0201  000A               	callw
  3805  0202  3181               	pagesel	$
  3806  0203                     i1l1346:	
  3807                           
  3808                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
  3809  0203  0023               	movlb	3	; select bank3
  3810  0204  1C9D               	btfss	29,1	;volatile
  3811  0205  2A11               	goto	i1l1352
  3812                           
  3813                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  3814  0206  0877               	movf	_eusartRxHead,w	;volatile
  3815  0207  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3816  0208  0086               	movwf	6
  3817  0209  0187               	clrf	7
  3818  020A  1501               	bsf	1,2
  3819                           
  3820                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
  3821  020B  0020               	movlb	0	; select bank0
  3822  020C  0868               	movf	_EUSART_OverrunErrorHandler+1,w
  3823  020D  008A               	movwf	10
  3824  020E  0867               	movf	_EUSART_OverrunErrorHandler,w
  3825  020F  000A               	callw
  3826  0210  3181               	pagesel	$
  3827  0211                     i1l1352:	
  3828                           
  3829                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
  3830  0211  0877               	movf	_eusartRxHead,w	;volatile
  3831  0212  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3832  0213  0086               	movwf	6
  3833  0214  0187               	clrf	7
  3834  0215  0801               	movf	1,w
  3835  0216  1903               	btfsc	3,2
  3836  0217  2A1F               	goto	i1l1356
  3837                           
  3838                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
  3839  0218  0020               	movlb	0	; select bank0
  3840  0219  0866               	movf	_EUSART_ErrorHandler+1,w
  3841  021A  008A               	movwf	10
  3842  021B  0865               	movf	_EUSART_ErrorHandler,w
  3843  021C  000A               	callw
  3844  021D  3181               	pagesel	$
  3845                           
  3846                           ;mcc_generated_files/eusart.c: 233:     } else {
  3847  021E  0008               	return
  3848  021F                     i1l1356:	
  3849                           
  3850                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
  3851  021F  3183  2346         	fcall	_EUSART_RxDataHandler
  3852  0221  0008               	return
  3853  0222                     __end_of_EUSART_Receive_ISR:	
  3854                           
  3855                           	psect	text25
  3856  01BB                     __ptext25:	
  3857 ;; *************** function _ReceivedMessage *****************
  3858 ;; Defined at:
  3859 ;;		line 30 in file "uart.c"
  3860 ;; Parameters:    Size  Location     Type
  3861 ;;		None
  3862 ;; Auto vars:     Size  Location     Type
  3863 ;;  readByte        1    3[COMMON] unsigned char 
  3864 ;; Return value:  Size  Location     Type
  3865 ;;                  1    wreg      void 
  3866 ;; Registers used:
  3867 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3868 ;; Tracked objects:
  3869 ;;		On entry : 0/0
  3870 ;;		On exit  : 0/0
  3871 ;;		Unchanged: 0/0
  3872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3873 ;;      Params:         0       0       0       0       0       0       0       0
  3874 ;;      Locals:         1       0       0       0       0       0       0       0
  3875 ;;      Temps:          1       0       0       0       0       0       0       0
  3876 ;;      Totals:         2       0       0       0       0       0       0       0
  3877 ;;Total ram usage:        2 bytes
  3878 ;; Hardware stack levels used:    1
  3879 ;; Hardware stack levels required when called:    3
  3880 ;; This function calls:
  3881 ;;		_EUSART_Read
  3882 ;;		_EUSART_Receive_ISR
  3883 ;;		_EUSART_is_rx_ready
  3884 ;; This function is called by:
  3885 ;;		_INIT_SMART_LIGHT
  3886 ;;		_INTERRUPT_InterruptManager
  3887 ;; This function uses a non-reentrant model
  3888 ;;
  3889                           
  3890                           
  3891                           ;psect for function _ReceivedMessage
  3892  01BB                     _ReceivedMessage:	
  3893                           
  3894                           ;uart.c: 32:     uart[SML].RxDefaultISR();
  3895                           
  3896                           ;incstack = 0
  3897                           ; Regs used in _ReceivedMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3898  01BB  307D               	movlw	low ((_uart+10)| (0+32768))
  3899  01BC  0084               	movwf	4
  3900  01BD  3083               	movlw	high ((_uart+10)| (0+32768))
  3901  01BE  0085               	movwf	5
  3902  01BF  3F01               	moviw [1]fsr0
  3903  01C0  008A               	movwf	10
  3904  01C1  3F00               	moviw [0]fsr0
  3905  01C2  000A               	callw
  3906  01C3  3181               	pagesel	$
  3907  01C4                     i1l1512:	
  3908                           ;uart.c: 33:     while (!uart[SML].DataReady()) {
  3909                           
  3910                           
  3911                           ;uart.c: 33:     while (!uart[SML].DataReady()) {
  3912  01C4  3079               	movlw	low ((_uart+6)| (0+32768))
  3913  01C5  0084               	movwf	4
  3914  01C6  3083               	movlw	high ((_uart+6)| (0+32768))
  3915  01C7  0085               	movwf	5
  3916  01C8  3F01               	moviw [1]fsr0
  3917  01C9  008A               	movwf	10
  3918  01CA  3F00               	moviw [0]fsr0
  3919  01CB  000A               	callw
  3920  01CC  3181               	pagesel	$
  3921  01CD  3A00               	xorlw	0
  3922  01CE  1D03               	btfss	3,2
  3923  01CF  29D2               	goto	i1l1514
  3924                           
  3925                           ;uart.c: 34:         __nop();
  3926  01D0  0000               	nop
  3927  01D1  29C4               	goto	i1l1512
  3928  01D2                     i1l1514:	
  3929                           
  3930                           ;uart.c: 36:     uint8_t readByte = uart[SML].Read();
  3931  01D2  3073               	movlw	low (_uart| (0+32768))
  3932  01D3  0084               	movwf	4
  3933  01D4  3083               	movlw	high (_uart| (0+32768))
  3934  01D5  0085               	movwf	5
  3935  01D6  3F01               	moviw [1]fsr0
  3936  01D7  008A               	movwf	10
  3937  01D8  3F00               	moviw [0]fsr0
  3938  01D9  000A               	callw
  3939  01DA  3181               	pagesel	$
  3940  01DB  00F2               	movwf	??_ReceivedMessage
  3941  01DC  0872               	movf	??_ReceivedMessage,w
  3942  01DD  00F3               	movwf	ReceivedMessage@readByte
  3943                           
  3944                           ;uart.c: 37:     if ((ResponseIndex < 64) )
  3945  01DE  3040               	movlw	64
  3946  01DF  0020               	movlb	0	; select bank0
  3947  01E0  0239               	subwf	_ResponseIndex,w
  3948  01E1  1803               	skipnc
  3949  01E2  0008               	return
  3950                           
  3951                           ;uart.c: 38:         ResponseBuffer[ResponseIndex++] = readByte;
  3952  01E3  0873               	movf	ReceivedMessage@readByte,w
  3953  01E4  00F2               	movwf	??_ReceivedMessage
  3954  01E5  0839               	movf	_ResponseIndex,w
  3955  01E6  3EA0               	addlw	(low (_ResponseBuffer| 0))& (0+255)
  3956  01E7  0086               	movwf	6
  3957  01E8  0187               	clrf	7
  3958  01E9  0872               	movf	??_ReceivedMessage,w
  3959  01EA  0081               	movwf	1
  3960  01EB  3001               	movlw	1
  3961  01EC  00F2               	movwf	??_ReceivedMessage
  3962  01ED  0872               	movf	??_ReceivedMessage,w
  3963  01EE  07B9               	addwf	_ResponseIndex,f
  3964  01EF  0008               	return
  3965  01F0                     __end_of_ReceivedMessage:	
  3966                           
  3967                           	psect	text26
  3968  03C7                     __ptext26:	
  3969 ;; *************** function _EUSART_is_rx_ready *****************
  3970 ;; Defined at:
  3971 ;;		line 137 in file "mcc_generated_files/eusart.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;		None
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;                  1    wreg      _Bool 
  3978 ;; Registers used:
  3979 ;;		wreg, status,2, status,0
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 0/0
  3983 ;;		Unchanged: 0/0
  3984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3985 ;;      Params:         0       0       0       0       0       0       0       0
  3986 ;;      Locals:         0       0       0       0       0       0       0       0
  3987 ;;      Temps:          0       0       0       0       0       0       0       0
  3988 ;;      Totals:         0       0       0       0       0       0       0       0
  3989 ;;Total ram usage:        0 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; This function calls:
  3992 ;;		Nothing
  3993 ;; This function is called by:
  3994 ;;		_ReceivedMessage
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           
  3999                           ;psect for function _EUSART_is_rx_ready
  4000  03C7                     _EUSART_is_rx_ready:	
  4001                           
  4002                           ;mcc_generated_files/eusart.c: 139:     return (eusartRxCount ? 1 : 0);
  4003                           
  4004                           ;incstack = 0
  4005                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
  4006  03C7  0020               	movlb	0	; select bank0
  4007  03C8  083B               	movf	_eusartRxCount,w	;volatile
  4008  03C9  1903               	btfsc	3,2
  4009  03CA  2BCD               	goto	u43_20
  4010  03CB  3001               	movlw	1
  4011  03CC  0008               	return
  4012  03CD                     u43_20:	
  4013  03CD  3000               	movlw	0
  4014  03CE  0008               	return
  4015  03CF                     __end_of_EUSART_is_rx_ready:	
  4016                           
  4017                           	psect	text27
  4018  0409                     __ptext27:	
  4019 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  4020 ;; Defined at:
  4021 ;;		line 252 in file "mcc_generated_files/eusart.c"
  4022 ;; Parameters:    Size  Location     Type
  4023 ;;		None
  4024 ;; Auto vars:     Size  Location     Type
  4025 ;;		None
  4026 ;; Return value:  Size  Location     Type
  4027 ;;                  1    wreg      void 
  4028 ;; Registers used:
  4029 ;;		None
  4030 ;; Tracked objects:
  4031 ;;		On entry : 0/0
  4032 ;;		On exit  : 0/0
  4033 ;;		Unchanged: 0/0
  4034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4035 ;;      Params:         0       0       0       0       0       0       0       0
  4036 ;;      Locals:         0       0       0       0       0       0       0       0
  4037 ;;      Temps:          0       0       0       0       0       0       0       0
  4038 ;;      Totals:         0       0       0       0       0       0       0       0
  4039 ;;Total ram usage:        0 bytes
  4040 ;; Hardware stack levels used:    1
  4041 ;; This function calls:
  4042 ;;		Nothing
  4043 ;; This function is called by:
  4044 ;;		_EUSART_Initialize
  4045 ;;		_EUSART_Receive_ISR
  4046 ;; This function uses a non-reentrant model
  4047 ;;
  4048                           
  4049                           
  4050                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  4051  0409                     _EUSART_DefaultOverrunErrorHandler:	
  4052                           
  4053                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
  4054                           
  4055                           ;incstack = 0
  4056                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  4057  0409  0023               	movlb	3	; select bank3
  4058  040A  121D               	bcf	29,4	;volatile
  4059                           
  4060                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
  4061  040B  161D               	bsf	29,4	;volatile
  4062  040C  0008               	return
  4063  040D                     __end_of_EUSART_DefaultOverrunErrorHandler:	
  4064                           
  4065                           	psect	text28
  4066  0412                     __ptext28:	
  4067 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  4068 ;; Defined at:
  4069 ;;		line 250 in file "mcc_generated_files/eusart.c"
  4070 ;; Parameters:    Size  Location     Type
  4071 ;;		None
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;		None
  4074 ;; Return value:  Size  Location     Type
  4075 ;;                  1    wreg      void 
  4076 ;; Registers used:
  4077 ;;		None
  4078 ;; Tracked objects:
  4079 ;;		On entry : 0/0
  4080 ;;		On exit  : 0/0
  4081 ;;		Unchanged: 0/0
  4082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4083 ;;      Params:         0       0       0       0       0       0       0       0
  4084 ;;      Locals:         0       0       0       0       0       0       0       0
  4085 ;;      Temps:          0       0       0       0       0       0       0       0
  4086 ;;      Totals:         0       0       0       0       0       0       0       0
  4087 ;;Total ram usage:        0 bytes
  4088 ;; Hardware stack levels used:    1
  4089 ;; This function calls:
  4090 ;;		Nothing
  4091 ;; This function is called by:
  4092 ;;		_EUSART_Initialize
  4093 ;;		_EUSART_Receive_ISR
  4094 ;; This function uses a non-reentrant model
  4095 ;;
  4096                           
  4097                           
  4098                           ;psect for function _EUSART_DefaultFramingErrorHandler
  4099  0412                     _EUSART_DefaultFramingErrorHandler:	
  4100                           
  4101                           ;incstack = 0
  4102                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  4103  0412  0008               	return
  4104  0413                     __end_of_EUSART_DefaultFramingErrorHandler:	
  4105                           
  4106                           	psect	text29
  4107  040D                     __ptext29:	
  4108 ;; *************** function _EUSART_DefaultErrorHandler *****************
  4109 ;; Defined at:
  4110 ;;		line 260 in file "mcc_generated_files/eusart.c"
  4111 ;; Parameters:    Size  Location     Type
  4112 ;;		None
  4113 ;; Auto vars:     Size  Location     Type
  4114 ;;		None
  4115 ;; Return value:  Size  Location     Type
  4116 ;;                  1    wreg      void 
  4117 ;; Registers used:
  4118 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4119 ;; Tracked objects:
  4120 ;;		On entry : 0/0
  4121 ;;		On exit  : 0/0
  4122 ;;		Unchanged: 0/0
  4123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4124 ;;      Params:         0       0       0       0       0       0       0       0
  4125 ;;      Locals:         0       0       0       0       0       0       0       0
  4126 ;;      Temps:          0       0       0       0       0       0       0       0
  4127 ;;      Totals:         0       0       0       0       0       0       0       0
  4128 ;;Total ram usage:        0 bytes
  4129 ;; Hardware stack levels used:    1
  4130 ;; Hardware stack levels required when called:    1
  4131 ;; This function calls:
  4132 ;;		_EUSART_RxDataHandler
  4133 ;; This function is called by:
  4134 ;;		_EUSART_Initialize
  4135 ;;		_EUSART_Receive_ISR
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           
  4140                           ;psect for function _EUSART_DefaultErrorHandler
  4141  040D                     _EUSART_DefaultErrorHandler:	
  4142                           
  4143                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
  4144                           
  4145                           ;incstack = 0
  4146                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  4147  040D  3183  2346         	fcall	_EUSART_RxDataHandler
  4148  040F  0008               	return
  4149  0410                     __end_of_EUSART_DefaultErrorHandler:	
  4150                           
  4151                           	psect	text30
  4152  0346                     __ptext30:	
  4153 ;; *************** function _EUSART_RxDataHandler *****************
  4154 ;; Defined at:
  4155 ;;		line 240 in file "mcc_generated_files/eusart.c"
  4156 ;; Parameters:    Size  Location     Type
  4157 ;;		None
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;		None
  4160 ;; Return value:  Size  Location     Type
  4161 ;;                  1    wreg      void 
  4162 ;; Registers used:
  4163 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4164 ;; Tracked objects:
  4165 ;;		On entry : 0/0
  4166 ;;		On exit  : 0/0
  4167 ;;		Unchanged: 0/0
  4168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4169 ;;      Params:         0       0       0       0       0       0       0       0
  4170 ;;      Locals:         0       0       0       0       0       0       0       0
  4171 ;;      Temps:          1       0       0       0       0       0       0       0
  4172 ;;      Totals:         1       0       0       0       0       0       0       0
  4173 ;;Total ram usage:        1 bytes
  4174 ;; Hardware stack levels used:    1
  4175 ;; This function calls:
  4176 ;;		Nothing
  4177 ;; This function is called by:
  4178 ;;		_EUSART_Receive_ISR
  4179 ;;		_EUSART_DefaultErrorHandler
  4180 ;; This function uses a non-reentrant model
  4181 ;;
  4182                           
  4183                           
  4184                           ;psect for function _EUSART_RxDataHandler
  4185  0346                     _EUSART_RxDataHandler:	
  4186                           
  4187                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
  4188                           
  4189                           ;incstack = 0
  4190                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  4191  0346  0023               	movlb	3	; select bank3
  4192  0347  0819               	movf	25,w	;volatile
  4193  0348  00F0               	movwf	??_EUSART_RxDataHandler
  4194  0349  0877               	movf	_eusartRxHead,w
  4195  034A  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4196  034B  0086               	movwf	6
  4197  034C  0187               	clrf	7
  4198  034D  0870               	movf	??_EUSART_RxDataHandler,w
  4199  034E  0081               	movwf	1
  4200  034F  3001               	movlw	1
  4201  0350  00F0               	movwf	??_EUSART_RxDataHandler
  4202  0351  0870               	movf	??_EUSART_RxDataHandler,w
  4203  0352  07F7               	addwf	_eusartRxHead,f	;volatile
  4204                           
  4205                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  4206  0353  3008               	movlw	8
  4207  0354  0277               	subwf	_eusartRxHead,w	;volatile
  4208  0355  1803               	btfsc	3,0
  4209                           
  4210                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
  4211  0356  01F7               	clrf	_eusartRxHead	;volatile
  4212                           
  4213                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
  4214  0357  3001               	movlw	1
  4215  0358  00F0               	movwf	??_EUSART_RxDataHandler
  4216  0359  0870               	movf	??_EUSART_RxDataHandler,w
  4217  035A  0020               	movlb	0	; select bank0
  4218  035B  07BB               	addwf	_eusartRxCount,f	;volatile
  4219  035C  0008               	return
  4220  035D                     __end_of_EUSART_RxDataHandler:	
  4221                           
  4222                           	psect	text31
  4223  0222                     __ptext31:	
  4224 ;; *************** function _EUSART_Read *****************
  4225 ;; Defined at:
  4226 ;;		line 151 in file "mcc_generated_files/eusart.c"
  4227 ;; Parameters:    Size  Location     Type
  4228 ;;		None
  4229 ;; Auto vars:     Size  Location     Type
  4230 ;;  readValue       1    1[COMMON] unsigned char 
  4231 ;; Return value:  Size  Location     Type
  4232 ;;                  1    wreg      unsigned char 
  4233 ;; Registers used:
  4234 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4235 ;; Tracked objects:
  4236 ;;		On entry : 0/0
  4237 ;;		On exit  : 0/0
  4238 ;;		Unchanged: 0/0
  4239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4240 ;;      Params:         0       0       0       0       0       0       0       0
  4241 ;;      Locals:         1       0       0       0       0       0       0       0
  4242 ;;      Temps:          1       0       0       0       0       0       0       0
  4243 ;;      Totals:         2       0       0       0       0       0       0       0
  4244 ;;Total ram usage:        2 bytes
  4245 ;; Hardware stack levels used:    1
  4246 ;; This function calls:
  4247 ;;		Nothing
  4248 ;; This function is called by:
  4249 ;;		_ReceivedMessage
  4250 ;; This function uses a non-reentrant model
  4251 ;;
  4252                           
  4253                           
  4254                           ;psect for function _EUSART_Read
  4255  0222                     _EUSART_Read:	
  4256  0222                     i1l1318:	
  4257                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  4258                           
  4259                           ;incstack = 0
  4260                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  4261                           
  4262                           
  4263                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  4264  0222  0020               	movlb	0	; select bank0
  4265  0223  083B               	movf	_eusartRxCount,w	;volatile
  4266  0224  1903               	btfsc	3,2
  4267  0225  2A22               	goto	i1l1318
  4268                           
  4269                           ;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  4270  0226  0876               	movf	_eusartRxTail,w	;volatile
  4271  0227  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  4272  0228  0086               	movwf	6
  4273  0229  0187               	clrf	7
  4274  022A  0801               	movf	1,w
  4275  022B  00F0               	movwf	??_EUSART_Read
  4276  022C  0870               	movf	??_EUSART_Read,w
  4277  022D  00BA               	movwf	_eusartRxLastError	;volatile
  4278                           
  4279                           ;mcc_generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];
  4280  022E  0876               	movf	_eusartRxTail,w
  4281  022F  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  4282  0230  0086               	movwf	6
  4283  0231  0187               	clrf	7
  4284  0232  0801               	movf	1,w
  4285  0233  00F0               	movwf	??_EUSART_Read
  4286  0234  0870               	movf	??_EUSART_Read,w
  4287  0235  00F1               	movwf	EUSART_Read@readValue
  4288  0236  3001               	movlw	1
  4289  0237  00F0               	movwf	??_EUSART_Read
  4290  0238  0870               	movf	??_EUSART_Read,w
  4291  0239  07F6               	addwf	_eusartRxTail,f	;volatile
  4292                           
  4293                           ;mcc_generated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  4294  023A  3008               	movlw	8
  4295  023B  0276               	subwf	_eusartRxTail,w	;volatile
  4296  023C  1803               	btfsc	3,0
  4297                           
  4298                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:         eus
      +                          artRxTail = 0;
  4299  023D  01F6               	clrf	_eusartRxTail	;volatile
  4300                           
  4301                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 0;
  4302  023E  0021               	movlb	1	; select bank1
  4303  023F  1291               	bcf	17,5	;volatile
  4304                           
  4305                           ;mcc_generated_files/eusart.c: 167:     eusartRxCount--;
  4306  0240  3001               	movlw	1
  4307  0241  0020               	movlb	0	; select bank0
  4308  0242  02BB               	subwf	_eusartRxCount,f	;volatile
  4309                           
  4310                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.RCIE = 1;
  4311  0243  0021               	movlb	1	; select bank1
  4312  0244  1691               	bsf	17,5	;volatile
  4313                           
  4314                           ;mcc_generated_files/eusart.c: 170:     return readValue;
  4315  0245  0871               	movf	EUSART_Read@readValue,w
  4316  0246  0008               	return
  4317  0247                     __end_of_EUSART_Read:	
  4318                           
  4319                           	psect	text32
  4320  02C3                     __ptext32:	
  4321 ;; *************** function _EUSART_Transmit_ISR *****************
  4322 ;; Defined at:
  4323 ;;		line 197 in file "mcc_generated_files/eusart.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;		None
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;		None
  4328 ;; Return value:  Size  Location     Type
  4329 ;;                  1    wreg      void 
  4330 ;; Registers used:
  4331 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4332 ;; Tracked objects:
  4333 ;;		On entry : 0/0
  4334 ;;		On exit  : 0/0
  4335 ;;		Unchanged: 0/0
  4336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4337 ;;      Params:         0       0       0       0       0       0       0       0
  4338 ;;      Locals:         0       0       0       0       0       0       0       0
  4339 ;;      Temps:          1       0       0       0       0       0       0       0
  4340 ;;      Totals:         1       0       0       0       0       0       0       0
  4341 ;;Total ram usage:        1 bytes
  4342 ;; Hardware stack levels used:    1
  4343 ;; This function calls:
  4344 ;;		Nothing
  4345 ;; This function is called by:
  4346 ;;		_EUSART_Initialize
  4347 ;;		_INTERRUPT_InterruptManager
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           
  4352                           ;psect for function _EUSART_Transmit_ISR
  4353  02C3                     _EUSART_Transmit_ISR:	
  4354                           
  4355                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  4356                           
  4357                           ;incstack = 0
  4358                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  4359  02C3  3008               	movlw	8
  4360  02C4  0020               	movlb	0	; select bank0
  4361  02C5  026F               	subwf	_eusartTxBufferRemaining,w	;volatile
  4362  02C6  1803               	skipnc
  4363  02C7  2ADD               	goto	i1l106
  4364                           
  4365                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  4366  02C8  0878               	movf	_eusartTxTail,w
  4367  02C9  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  4368  02CA  0086               	movwf	6
  4369  02CB  0187               	clrf	7
  4370  02CC  0801               	movf	1,w
  4371  02CD  0023               	movlb	3	; select bank3
  4372  02CE  009A               	movwf	26	;volatile
  4373  02CF  3001               	movlw	1
  4374  02D0  00F0               	movwf	??_EUSART_Transmit_ISR
  4375  02D1  0870               	movf	??_EUSART_Transmit_ISR,w
  4376  02D2  07F8               	addwf	_eusartTxTail,f	;volatile
  4377                           
  4378                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  4379  02D3  3008               	movlw	8
  4380  02D4  0278               	subwf	_eusartTxTail,w	;volatile
  4381  02D5  1803               	btfsc	3,0
  4382                           
  4383                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
  4384  02D6  01F8               	clrf	_eusartTxTail	;volatile
  4385                           
  4386                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
  4387  02D7  3001               	movlw	1
  4388  02D8  00F0               	movwf	??_EUSART_Transmit_ISR
  4389  02D9  0870               	movf	??_EUSART_Transmit_ISR,w
  4390  02DA  0020               	movlb	0	; select bank0
  4391  02DB  07EF               	addwf	_eusartTxBufferRemaining,f	;volatile
  4392                           
  4393                           ;mcc_generated_files/eusart.c: 209:     }
  4394  02DC  0008               	return
  4395  02DD                     i1l106:	
  4396                           ;mcc_generated_files/eusart.c: 210:     else
  4397                           
  4398                           
  4399                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
  4400  02DD  0021               	movlb	1	; select bank1
  4401  02DE  1211               	bcf	17,4	;volatile
  4402  02DF  0008               	return
  4403  02E0                     __end_of_EUSART_Transmit_ISR:	
  4404  007E                     btemp	set	126	;btemp
  4405  007E                     int$flags	set	126
  4406  007E                     wtemp0	set	126


Data Sizes:
    Strings     41
    Constant    20
    Data        25
    BSS         288
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     16      80
    BANK1            80      4      68
    BANK2            80      0      64
    BANK3            80      0      64
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    S513$4$0	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S513$6$0	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), EUSART_Receive_ISR(), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strchr@s	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    sp__strchr	PTR unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    strstr@h	PTR const unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    strstr@n	PTR const unsigned char  size(2) Largest target is 6
		 -> STR_1(CODE[6]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 64
		 -> Storage2(BANK3[64]), Storage(BANK2[64]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 64
		 -> Storage2(BANK3[64]), Storage(BANK2[64]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 64
		 -> NULL(NULL[0]), ResponseBuffer(BANK1[64]), Storage(BANK2[64]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 64
		 -> NULL(NULL[0]), ResponseBuffer(BANK1[64]), Storage(BANK2[64]), 

    SML_SendString@command	PTR const unsigned char  size(1) Largest target is 64
		 -> Storage2(BANK3[64]), 

    SendString@command	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_3(CODE[17]), STR_2(CODE[18]), 

    S513$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    uart.Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    S513$TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    uart.TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S513$TransmitDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    uart.TransmitDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    S513$SetRxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    uart.SetRxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    S513$RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    uart.RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    S513$SetTxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    uart.SetTxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    S513$DataReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    uart.DataReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    S513$TransmitReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    uart.TransmitReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    S513$Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    uart.Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    S513$Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    uart.Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    sp__strstr	PTR unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    main@s	PTR unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), Storage(BANK2[64]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 64
		 -> Storage2(BANK3[64]), Storage(BANK2[64]), 

    sp__GetResponse	PTR unsigned char  size(1) Largest target is 64
		 -> ResponseBuffer(BANK1[64]), 

    rxData	PTR unsigned char  size(1) Largest target is 64
		 -> NULL(NULL[0]), ResponseBuffer(BANK1[64]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), ReceivedMessage(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _main->_ReadyReceiveBuffer
    _main->_blockingWait
    _main->_strcpy
    _strstr->_strchr
    _strstr->_strlen
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _SML_SendString->_EUSART_Write
    _INIT_SMART_LIGHT->_EUSART_SetRxInterruptHandler
    _SendString->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_ReceivedMessage
    _ReceivedMessage->_EUSART_Read
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_strstr
    _strstr->_strncmp
    _SYSTEM_Initialize->_EUSART_Initialize
    _INIT_SMART_LIGHT->_SendString

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    4041
                                              0 BANK1      4     4      0
                        _GetResponse
                   _INIT_SMART_LIGHT
                 _ReadyReceiveBuffer
                     _SML_SendString
                  _SYSTEM_Initialize
                       _blockingWait
                             _strcpy
                             _strstr
 ---------------------------------------------------------------------------------
 (1) _strstr                                               8     6      2    1453
                                              8 BANK0      8     6      2
                             _strchr
                             _strlen
                            _strncmp
 ---------------------------------------------------------------------------------
 (2) _strncmp                                              9     5      4     541
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _strlen                                               5     3      2     220
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _strchr                                               3     1      2     250
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               8     6      2     389
                                              4 COMMON     2     0      2
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _blockingWait                                         5     3      2     158
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     670
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     670
                                              0 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _SML_SendString                                       4     2      2     513
                                              0 BANK0      4     2      2
                       _EUSART_Write *
 ---------------------------------------------------------------------------------
 (1) _ReadyReceiveBuffer                                   2     2      0      99
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INIT_SMART_LIGHT                                     0     0      0     722
       _EUSART_SetRxInterruptHandler *
                         _SendString
 ---------------------------------------------------------------------------------
 (2) _SendString                                           3     1      2     536
                                              0 BANK0      3     1      2
                       _EUSART_Write *
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     1      1     322
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     186
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _GetResponse                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0      47
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _ReceivedMessage *
 ---------------------------------------------------------------------------------
 (5) _ReceivedMessage                                      2     2      0      47
                                              2 COMMON     2     2      0
                        _EUSART_Read *
                 _EUSART_Receive_ISR *
                 _EUSART_is_rx_ready *
 ---------------------------------------------------------------------------------
 (6) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Read                                          2     2      0      24
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetResponse
   _INIT_SMART_LIGHT
     _EUSART_SetRxInterruptHandler *
     _SendString *
       _EUSART_Write *
   _ReadyReceiveBuffer
   _SML_SendString
     _EUSART_Write *
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   _blockingWait
   _strcpy
   _strstr
     _strchr
     _strlen
     _strncmp

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _ReceivedMessage *
     _EUSART_Read *
     _EUSART_Receive_ISR *
       Absolute function(Fake) *
       _EUSART_DefaultErrorHandler *
         _EUSART_RxDataHandler
       _EUSART_DefaultFramingErrorHandler *
       _EUSART_DefaultOverrunErrorHandler *
       _EUSART_RxDataHandler *
     _EUSART_is_rx_ready *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     15E       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     10      50       6      100.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      4      44       8       85.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0      40      10       80.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      40      12       80.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      40      14       80.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     15E      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Nov 05 15:36:48 2019

                ?_EUSART_SetRxInterruptHandler 0074                                    __CFG_CP$OFF 0000  
                                  __CFG_LVP$ON 0000                                            l100 0252  
                                          l334 02E3                                            l886 035F  
                                          _LVL 0050                                            u905 02E9  
                                          u987 02EF                         ??_EUSART_RxDataHandler 0070  
               ?_EUSART_SetFramingErrorHandler 0074                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                   ?_EUSART_Read 0070  
                                         l1650 02A6                                           l1714 03AD  
                                         l1730 0273                                           l1574 0247  
                                         l1742 011F                                           l1760 019F  
                                         l1656 0332                                           l1736 010C  
                                         l1744 0133                                           l1658 033E  
                                         l1588 0266                                           l1684 00A1  
                                         l1676 009A                                           l1748 013D  
                                         l1758 017F                                           l1694 0369  
                                         l1678 0075                                           l1774 00BB  
                                         STR_1 03CF                                           STR_2 0387  
                                         STR_3 0399                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         _KEY3 003C                                           _KEY5 0043  
                          __end_of_GetResponse 0412                                           _WPUA 020C  
                                         _WPUB 020D                                   __CFG_WRT$OFF 0000  
                                         _main 00B0                                           _uart 0373  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                                  __CFG_BOREN$ON 0000  
                                         start 0021                               _INIT_SMART_LIGHT 0289  
                              ?_SML_SendString 0055                                  __CFG_MCLRE$ON 0000  
                              _ReceivedMessage 01BB                                  ?_EUSART_Write 0074  
               __size_of_OSCILLATOR_Initialize 0006                  __end_of_OSCILLATOR_Initialize 03E7  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                                        i1l106 02DD                                          i1l160 0014  
                                        i1l165 001F                                          _RCREG 0199  
                                        _RCSTA 019D                                          _RESET 004A  
                                        u43_20 03CD                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _TXREG 019A                                          _TXSTA 019E  
                               _WDT_Initialize 0405                                          main@s 00E3  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                                __end_of_strncmp 00B0  
                              __initialization 0023                                   __end_of_main 00F9  
                                 __end_of_uart 0387                                 ??_EUSART_Write 0075  
                               __CFG_LPBOR$OFF 0000                    ?_INTERRUPT_InterruptManager 0070  
                         __end_of_blockingWait 02FA                 ??_EUSART_SetRxInterruptHandler 0076  
                                       ??_main 00E0                                    _GetResponse 0410  
                       __end_of_WDT_Initialize 0409      __end_of_EUSART_DefaultFramingErrorHandler 0413  
   __size_of_EUSART_DefaultFramingErrorHandler 0001            ??_EUSART_DefaultFramingErrorHandler 0070  
           ?_EUSART_DefaultFramingErrorHandler 0070              _EUSART_DefaultFramingErrorHandler 0412  
                   _EUSART_OverrunErrorHandler 0067                                         _APFCON 011D  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _ANSELC 018E                     __end_of_EUSART_is_rx_ready 03CF  
                                       _BORCON 0116                                         i1l1318 0222  
                                       i1l1512 01C4                                         i1l1352 0211  
                                       i1l1514 01D2                                         i1l1346 0203  
                                       i1l1356 021F                             _ReadyReceiveBuffer 03AA  
                                   _SendString 02A6                                         _OSCCON 0099  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097                                 __CFG_PWRTE$OFF 0000  
                      __end_of_ReceivedMessage 01F0                            ?_ReadyReceiveBuffer 0070  
                               __CFG_STVREN$ON 0000                            _EUSART_Transmit_ISR 02C3  
                                       _rxData 0038                                         _strchr 035D  
                                       _strcpy 0269                                         _strlen 032D  
                                       _strstr 00F9                           ??_ReadyReceiveBuffer 0074  
                              ?_WDT_Initialize 0070                                      ??_strncmp 0074  
                         ?_EUSART_Transmit_ISR 0070                           __size_of_EUSART_Read 0025  
                            _SYSTEM_Initialize 03BB                        __end_of__initialization 005A  
                           ?_SYSTEM_Initialize 0070           __end_of_EUSART_SetTxInterruptHandler 03ED  
        __size_of_EUSART_SetTxInterruptHandler 0006                   _EUSART_SetTxInterruptHandler 03E7  
                      ReceivedMessage@readByte 0073                                 __pcstackCOMMON 0070  
                                 __pidataBANK0 0314                            ??_SYSTEM_Initialize 0076  
                                  _ReadStorage 0220                                 _OPTION_REGbits 0095  
                         _eusartRxStatusBuffer 0020                       __end_of_INIT_SMART_LIGHT 02A6  
              ??_EUSART_SetOverrunErrorHandler 0076                              SML_SendString@len 0055  
                    __end_of_SYSTEM_Initialize 03C7                          ??_EUSART_Transmit_ISR 0070  
                               _ResponseBuffer 00A0                                     __pbssBANK0 0020  
                                   __pbssBANK1 00A0                                     __pbssBANK2 0120  
                                   __pbssBANK3 01A0                                     __pbssBANK4 0220  
                                  ?_SendString 0055                           __end_of_EUSART_Write 0269  
                             ??_SML_SendString 0057                    __size_of_EUSART_Receive_ISR 0032  
                             ?_ReceivedMessage 0070                                     __pmaintext 00B0  
                        __size_of_blockingWait 001A                  ?_EUSART_SetTxInterruptHandler 0074  
             _EUSART_TxDefaultInterruptHandler 006D                                     __pintentry 0004  
                                      _BAUDCON 019F                   ??_EUSART_DefaultErrorHandler 0071  
                                      ?_strchr 0074                                        ?_strcpy 0074  
                                      ?_strlen 0074                                        ?_strstr 005D  
                                _eusartRxCount 003B                  __size_of_EUSART_RxDataHandler 0017  
                     ??_EUSART_SetErrorHandler 0076                              SendString@command 0055  
                                 _blockingWait 02E0            __size_of_EUSART_DefaultErrorHandler 0003  
                                      _Storage 0120                            __size_of_SendString 001D  
                                      __ptext1 00F9                                        __ptext2 005E  
                                      __ptext3 032D                                        __ptext4 035D  
                                      __ptext5 0269                                        __ptext6 02E0  
                                      __ptext7 03BB                                        __ptext8 0405  
                                      __ptext9 02FA                                __size_of_strchr 0016  
                              __size_of_strcpy 0020                                __size_of_strlen 0019  
                              __size_of_strstr 0046                          _OSCILLATOR_Initialize 03E1  
                                 ?_GetResponse 0070                       ??_PIN_MANAGER_Initialize 0074  
                   __size_of_SYSTEM_Initialize 000C                                        clrloop0 03DC  
                                      _strncmp 005E                           end_of_initialization 005A  
        __end_of_EUSART_SetOverrunErrorHandler 03F3         __size_of_EUSART_SetOverrunErrorHandler 0006  
                _EUSART_SetOverrunErrorHandler 03ED                                        init_ram 03D5  
                                      initloop 03D6                              _EUSART_Initialize 013F  
                           ?_EUSART_Initialize 0070                                      _RCSTAbits 019D  
                           _EUSART_is_rx_ready 03C7                             _EUSART_is_tx_ready 0000  
                                      strchr@c 0074                                        strchr@s 0055  
                                      strcpy@d 0059                                        strlen@a 0056  
                                      strcpy@s 0057                                        strlen@s 0074  
                          ??_EUSART_Initialize 0055                               ??_WDT_Initialize 0074  
               ??_EUSART_SetTxInterruptHandler 0076                                        strstr@h 0064  
                                      strstr@n 005D                            ?_EUSART_is_rx_ready 0070  
                             __CFG_FOSC$INTOSC 0000                          __size_of_EUSART_Write 0022  
              __size_of_EUSART_SetErrorHandler 0006                      __end_of_EUSART_Initialize 017D  
                         ??_EUSART_is_rx_ready 0070                                      _TXSTAbits 019E  
           __end_of_EUSART_DefaultErrorHandler 0410                     _EUSART_DefaultErrorHandler 040D  
                                 _EUSART_Write 0247                         ?_OSCILLATOR_Initialize 0070  
                               __end_of_strchr 0373                                 __end_of_strcpy 0289  
                               __end_of_strlen 0346                                 __end_of_strstr 013F  
                          start_initialization 0023                    __size_of_ReadyReceiveBuffer 0011  
                            ?_INIT_SMART_LIGHT 0070                __size_of_PIN_MANAGER_Initialize 001A  
                                ??_EUSART_Read 0070   EUSART_SetRxInterruptHandler@interruptHandler 0074  
 EUSART_SetTxInterruptHandler@interruptHandler 0074                             ??_INIT_SMART_LIGHT 0076  
                                 ??_SendString 0057                 ?_EUSART_SetOverrunErrorHandler 0074  
                   _EUSART_FramingErrorHandler 0069                         _EUSART_SetErrorHandler 03F9  
                                  __pdataBANK0 003C                                       ??_strchr 0076  
                                     ??_strcpy 0055                                       ??_strlen 0055  
                           __end_of_SendString 02C3                                       ??_strstr 005F  
                  __end_of_EUSART_Transmit_ISR 02E0                                    __pbssCOMMON 0076  
                                    ___latbits 0002                                  __pcstackBANK0 0055  
                                __pcstackBANK1 00E0                           __size_of_GetResponse 0002  
                   ReadyReceiveBuffer@position 0075                     __end_of_EUSART_Receive_ISR 0222  
                   __size_of_EUSART_Initialize 003E               _EUSART_RxDefaultInterruptHandler 006B  
                          __end_of_EUSART_Read 0247                                  _ResponseIndex 0039  
                                    __pnvBANK0 0065                   __end_of_EUSART_RxDataHandler 035D  
                       _PIN_MANAGER_Initialize 02FA                           EUSART_Read@readValue 0071  
                                 _eusartRxHead 0077                                   _eusartTxHead 0079  
                                 _eusartRxTail 0076                                   _eusartTxTail 0078  
                     __size_of_ReceivedMessage 0035                   ??_INTERRUPT_InterruptManager 0074  
                      _eusartTxBufferRemaining 006F                                       ?_strncmp 0055  
                               _eusartRxBuffer 0028                                 _eusartTxBuffer 0030  
       EUSART_SetErrorHandler@interruptHandler 0074                                      clear_ram0 03DB  
                                     _PIE1bits 0091                              _eusartRxLastError 003A  
                          blockingWait@counter 0056            __size_of_INTERRUPT_InterruptManager 001D  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0076  
                            _EUSART_is_tx_done 0000                        __size_of_SML_SendString 003E  
    __end_of_EUSART_DefaultOverrunErrorHandler 040D     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0070             ?_EUSART_DefaultOverrunErrorHandler 0070  
            _EUSART_DefaultOverrunErrorHandler 0409                                    _EUSART_Read 0222  
                      ??_OSCILLATOR_Initialize 0074                            _EUSART_ErrorHandler 0065  
                  ?_EUSART_DefaultErrorHandler 0070                                       _Storage2 01A0  
                            ??_ReceivedMessage 0072                           _EUSART_RxDataHandler 0346  
                                     __ptext10 03E1                                       __ptext11 013F  
                                     __ptext20 0247                                       __ptext12 03E7  
                                     __ptext21 03FF                                       __ptext13 03ED  
                                     __ptext30 0346                                       __ptext22 0410  
                                     __ptext14 03F3                                       __ptext31 0222  
                                     __ptext15 03F9                                       __ptext32 02C3  
                                     __ptext24 01F0                                       __ptext16 017D  
                                     __ptext25 01BB                                       __ptext17 03AA  
                                     __ptext26 03C7                                       __ptext18 0289  
                                     __ptext27 0409                                       __ptext19 02A6  
                                     __ptext28 0412                                       __ptext29 040D  
                                   strcpy@dest 005A                               __size_of_strncmp 0052  
                  __size_of_EUSART_is_rx_ready 0008                                  __size_of_main 0049  
                      ?_EUSART_SetErrorHandler 0074                      __size_of_INIT_SMART_LIGHT 001D  
EUSART_SetOverrunErrorHandler@interruptHandler 0074                          SML_SendString@command 0058  
                                     int$flags 007E             __end_of_INTERRUPT_InterruptManager 0021  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 03F9  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 03F3  
                   __end_of_ReadyReceiveBuffer 03BB                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0070                        __size_of_WDT_Initialize 0004  
                                     intlevel1 0000                                  ?_blockingWait 0074  
                      ?_PIN_MANAGER_Initialize 0070                 __end_of_EUSART_SetErrorHandler 03FF  
                            __CFG_CLKOUTEN$OFF 0000                                      strcpy@src 0074  
                                    strncmp@_l 0059                                      strncmp@_r 0055  
         __end_of_EUSART_SetRxInterruptHandler 0405          __size_of_EUSART_SetRxInterruptHandler 0006  
                 _EUSART_SetRxInterruptHandler 03FF                              blockingWait@limit 0074  
                               _SML_SendString 017D                             _EUSART_Receive_ISR 01F0  
EUSART_SetFramingErrorHandler@interruptHandler 0074                                  __pstringtext1 0373  
                                __pstringtext2 0387                                  __pstringtext3 0399  
                                __pstringtext4 03CF                                  __pstringtext5 0000  
                          ?_EUSART_Receive_ISR 0070                                  ??_GetResponse 0074  
                                     strncmp@l 005C                                       strncmp@n 0057  
                                     strncmp@r 005A                                       strstr@nl 0062  
                           EUSART_Write@txData 0074                   __size_of_EUSART_Transmit_ISR 001D  
                               ??_blockingWait 0055                 __end_of_PIN_MANAGER_Initialize 0314  
                         ??_EUSART_Receive_ISR 0071                         __end_of_SML_SendString 01BB  
