

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Mon Nov 04 16:18:13 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	text22,local,class=CODE,merge=1,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	psect	text25,local,class=CODE,merge=1,delta=2
    38                           	psect	text26,local,class=CODE,merge=1,delta=2
    39                           	dabs	1,0x320,16
    40                           	dabs	1,0x2A0,80
    41                           	dabs	1,0x250,32
    42                           	dabs	1,0x220,48
    43                           	dabs	1,0x1A0,80
    44                           	dabs	1,0x20F0,0,_ReadStorage
    45                           	dabs	1,0x2170,0,_ResponseBuffer
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 2.05
    49                           ; Generated 20/12/2018 GMT
    50                           ; 
    51                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16LF1559 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0008                     	;# 
    91  0009                     	;# 
    92  000A                     	;# 
    93  000B                     	;# 
    94  000C                     	;# 
    95  000D                     	;# 
    96  000E                     	;# 
    97  0011                     	;# 
    98  0012                     	;# 
    99  0015                     	;# 
   100  0016                     	;# 
   101  0016                     	;# 
   102  0017                     	;# 
   103  0018                     	;# 
   104  0019                     	;# 
   105  001A                     	;# 
   106  001B                     	;# 
   107  001C                     	;# 
   108  008C                     	;# 
   109  008D                     	;# 
   110  008E                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  009F                     	;# 
   124  010C                     	;# 
   125  010D                     	;# 
   126  010E                     	;# 
   127  0116                     	;# 
   128  0117                     	;# 
   129  011D                     	;# 
   130  018C                     	;# 
   131  018D                     	;# 
   132  018E                     	;# 
   133  0191                     	;# 
   134  0191                     	;# 
   135  0192                     	;# 
   136  0193                     	;# 
   137  0193                     	;# 
   138  0194                     	;# 
   139  0195                     	;# 
   140  0196                     	;# 
   141  0199                     	;# 
   142  019A                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019C                     	;# 
   146  019D                     	;# 
   147  019E                     	;# 
   148  019F                     	;# 
   149  020C                     	;# 
   150  020D                     	;# 
   151  0211                     	;# 
   152  0211                     	;# 
   153  0212                     	;# 
   154  0212                     	;# 
   155  0213                     	;# 
   156  0213                     	;# 
   157  0214                     	;# 
   158  0214                     	;# 
   159  0215                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0216                     	;# 
   163  0216                     	;# 
   164  0217                     	;# 
   165  0217                     	;# 
   166  0391                     	;# 
   167  0392                     	;# 
   168  0393                     	;# 
   169  0394                     	;# 
   170  0395                     	;# 
   171  0396                     	;# 
   172  0611                     	;# 
   173  0612                     	;# 
   174  0613                     	;# 
   175  0613                     	;# 
   176  0614                     	;# 
   177  0615                     	;# 
   178  0616                     	;# 
   179  0616                     	;# 
   180  0711                     	;# 
   181  0711                     	;# 
   182  0711                     	;# 
   183  0712                     	;# 
   184  0712                     	;# 
   185  0713                     	;# 
   186  0713                     	;# 
   187  0713                     	;# 
   188  0714                     	;# 
   189  0714                     	;# 
   190  0714                     	;# 
   191  0715                     	;# 
   192  0715                     	;# 
   193  0716                     	;# 
   194  0716                     	;# 
   195  0716                     	;# 
   196  0716                     	;# 
   197  0717                     	;# 
   198  0717                     	;# 
   199  0717                     	;# 
   200  0717                     	;# 
   201  0718                     	;# 
   202  0718                     	;# 
   203  0718                     	;# 
   204  0719                     	;# 
   205  0719                     	;# 
   206  0719                     	;# 
   207  0719                     	;# 
   208  071A                     	;# 
   209  071A                     	;# 
   210  071A                     	;# 
   211  071A                     	;# 
   212  071A                     	;# 
   213  071B                     	;# 
   214  071B                     	;# 
   215  071C                     	;# 
   216  071C                     	;# 
   217  071C                     	;# 
   218  071C                     	;# 
   219  071C                     	;# 
   220  071D                     	;# 
   221  071D                     	;# 
   222  071E                     	;# 
   223  071E                     	;# 
   224  0791                     	;# 
   225  0791                     	;# 
   226  0793                     	;# 
   227  0793                     	;# 
   228  0794                     	;# 
   229  0794                     	;# 
   230  0796                     	;# 
   231  0796                     	;# 
   232  0796                     	;# 
   233  0797                     	;# 
   234  0797                     	;# 
   235  0797                     	;# 
   236  0798                     	;# 
   237  0798                     	;# 
   238  0799                     	;# 
   239  0799                     	;# 
   240  0799                     	;# 
   241  079A                     	;# 
   242  079A                     	;# 
   243  079A                     	;# 
   244  079B                     	;# 
   245  079C                     	;# 
   246  079C                     	;# 
   247  079C                     	;# 
   248  079D                     	;# 
   249  079E                     	;# 
   250  079E                     	;# 
   251  0F8C                     	;# 
   252  0F8D                     	;# 
   253  0F91                     	;# 
   254  0F96                     	;# 
   255  0F97                     	;# 
   256  0F9C                     	;# 
   257  0F9D                     	;# 
   258  0F9E                     	;# 
   259  0FE3                     	;# 
   260  0FE4                     	;# 
   261  0FE5                     	;# 
   262  0FE6                     	;# 
   263  0FE7                     	;# 
   264  0FE8                     	;# 
   265  0FE9                     	;# 
   266  0FEA                     	;# 
   267  0FEB                     	;# 
   268  0FED                     	;# 
   269  0FEE                     	;# 
   270  0FEF                     	;# 
   271  0000                     	;# 
   272  0001                     	;# 
   273  0002                     	;# 
   274  0003                     	;# 
   275  0004                     	;# 
   276  0005                     	;# 
   277  0006                     	;# 
   278  0007                     	;# 
   279  0008                     	;# 
   280  0009                     	;# 
   281  000A                     	;# 
   282  000B                     	;# 
   283  000C                     	;# 
   284  000D                     	;# 
   285  000E                     	;# 
   286  0011                     	;# 
   287  0012                     	;# 
   288  0015                     	;# 
   289  0016                     	;# 
   290  0016                     	;# 
   291  0017                     	;# 
   292  0018                     	;# 
   293  0019                     	;# 
   294  001A                     	;# 
   295  001B                     	;# 
   296  001C                     	;# 
   297  008C                     	;# 
   298  008D                     	;# 
   299  008E                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0095                     	;# 
   303  0096                     	;# 
   304  0097                     	;# 
   305  0099                     	;# 
   306  009A                     	;# 
   307  009B                     	;# 
   308  009B                     	;# 
   309  009C                     	;# 
   310  009D                     	;# 
   311  009E                     	;# 
   312  009F                     	;# 
   313  010C                     	;# 
   314  010D                     	;# 
   315  010E                     	;# 
   316  0116                     	;# 
   317  0117                     	;# 
   318  011D                     	;# 
   319  018C                     	;# 
   320  018D                     	;# 
   321  018E                     	;# 
   322  0191                     	;# 
   323  0191                     	;# 
   324  0192                     	;# 
   325  0193                     	;# 
   326  0193                     	;# 
   327  0194                     	;# 
   328  0195                     	;# 
   329  0196                     	;# 
   330  0199                     	;# 
   331  019A                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019C                     	;# 
   335  019D                     	;# 
   336  019E                     	;# 
   337  019F                     	;# 
   338  020C                     	;# 
   339  020D                     	;# 
   340  0211                     	;# 
   341  0211                     	;# 
   342  0212                     	;# 
   343  0212                     	;# 
   344  0213                     	;# 
   345  0213                     	;# 
   346  0214                     	;# 
   347  0214                     	;# 
   348  0215                     	;# 
   349  0215                     	;# 
   350  0215                     	;# 
   351  0216                     	;# 
   352  0216                     	;# 
   353  0217                     	;# 
   354  0217                     	;# 
   355  0391                     	;# 
   356  0392                     	;# 
   357  0393                     	;# 
   358  0394                     	;# 
   359  0395                     	;# 
   360  0396                     	;# 
   361  0611                     	;# 
   362  0612                     	;# 
   363  0613                     	;# 
   364  0613                     	;# 
   365  0614                     	;# 
   366  0615                     	;# 
   367  0616                     	;# 
   368  0616                     	;# 
   369  0711                     	;# 
   370  0711                     	;# 
   371  0711                     	;# 
   372  0712                     	;# 
   373  0712                     	;# 
   374  0713                     	;# 
   375  0713                     	;# 
   376  0713                     	;# 
   377  0714                     	;# 
   378  0714                     	;# 
   379  0714                     	;# 
   380  0715                     	;# 
   381  0715                     	;# 
   382  0716                     	;# 
   383  0716                     	;# 
   384  0716                     	;# 
   385  0716                     	;# 
   386  0717                     	;# 
   387  0717                     	;# 
   388  0717                     	;# 
   389  0717                     	;# 
   390  0718                     	;# 
   391  0718                     	;# 
   392  0718                     	;# 
   393  0719                     	;# 
   394  0719                     	;# 
   395  0719                     	;# 
   396  0719                     	;# 
   397  071A                     	;# 
   398  071A                     	;# 
   399  071A                     	;# 
   400  071A                     	;# 
   401  071A                     	;# 
   402  071B                     	;# 
   403  071B                     	;# 
   404  071C                     	;# 
   405  071C                     	;# 
   406  071C                     	;# 
   407  071C                     	;# 
   408  071C                     	;# 
   409  071D                     	;# 
   410  071D                     	;# 
   411  071E                     	;# 
   412  071E                     	;# 
   413  0791                     	;# 
   414  0791                     	;# 
   415  0793                     	;# 
   416  0793                     	;# 
   417  0794                     	;# 
   418  0794                     	;# 
   419  0796                     	;# 
   420  0796                     	;# 
   421  0796                     	;# 
   422  0797                     	;# 
   423  0797                     	;# 
   424  0797                     	;# 
   425  0798                     	;# 
   426  0798                     	;# 
   427  0799                     	;# 
   428  0799                     	;# 
   429  0799                     	;# 
   430  079A                     	;# 
   431  079A                     	;# 
   432  079A                     	;# 
   433  079B                     	;# 
   434  079C                     	;# 
   435  079C                     	;# 
   436  079C                     	;# 
   437  079D                     	;# 
   438  079E                     	;# 
   439  079E                     	;# 
   440  0F8C                     	;# 
   441  0F8D                     	;# 
   442  0F91                     	;# 
   443  0F96                     	;# 
   444  0F97                     	;# 
   445  0F9C                     	;# 
   446  0F9D                     	;# 
   447  0F9E                     	;# 
   448  0FE3                     	;# 
   449  0FE4                     	;# 
   450  0FE5                     	;# 
   451  0FE6                     	;# 
   452  0FE7                     	;# 
   453  0FE8                     	;# 
   454  0FE9                     	;# 
   455  0FEA                     	;# 
   456  0FEB                     	;# 
   457  0FED                     	;# 
   458  0FEE                     	;# 
   459  0FEF                     	;# 
   460  0000                     	;# 
   461  0001                     	;# 
   462  0002                     	;# 
   463  0003                     	;# 
   464  0004                     	;# 
   465  0005                     	;# 
   466  0006                     	;# 
   467  0007                     	;# 
   468  0008                     	;# 
   469  0009                     	;# 
   470  000A                     	;# 
   471  000B                     	;# 
   472  000C                     	;# 
   473  000D                     	;# 
   474  000E                     	;# 
   475  0011                     	;# 
   476  0012                     	;# 
   477  0015                     	;# 
   478  0016                     	;# 
   479  0016                     	;# 
   480  0017                     	;# 
   481  0018                     	;# 
   482  0019                     	;# 
   483  001A                     	;# 
   484  001B                     	;# 
   485  001C                     	;# 
   486  008C                     	;# 
   487  008D                     	;# 
   488  008E                     	;# 
   489  0091                     	;# 
   490  0092                     	;# 
   491  0095                     	;# 
   492  0096                     	;# 
   493  0097                     	;# 
   494  0099                     	;# 
   495  009A                     	;# 
   496  009B                     	;# 
   497  009B                     	;# 
   498  009C                     	;# 
   499  009D                     	;# 
   500  009E                     	;# 
   501  009F                     	;# 
   502  010C                     	;# 
   503  010D                     	;# 
   504  010E                     	;# 
   505  0116                     	;# 
   506  0117                     	;# 
   507  011D                     	;# 
   508  018C                     	;# 
   509  018D                     	;# 
   510  018E                     	;# 
   511  0191                     	;# 
   512  0191                     	;# 
   513  0192                     	;# 
   514  0193                     	;# 
   515  0193                     	;# 
   516  0194                     	;# 
   517  0195                     	;# 
   518  0196                     	;# 
   519  0199                     	;# 
   520  019A                     	;# 
   521  019B                     	;# 
   522  019B                     	;# 
   523  019C                     	;# 
   524  019D                     	;# 
   525  019E                     	;# 
   526  019F                     	;# 
   527  020C                     	;# 
   528  020D                     	;# 
   529  0211                     	;# 
   530  0211                     	;# 
   531  0212                     	;# 
   532  0212                     	;# 
   533  0213                     	;# 
   534  0213                     	;# 
   535  0214                     	;# 
   536  0214                     	;# 
   537  0215                     	;# 
   538  0215                     	;# 
   539  0215                     	;# 
   540  0216                     	;# 
   541  0216                     	;# 
   542  0217                     	;# 
   543  0217                     	;# 
   544  0391                     	;# 
   545  0392                     	;# 
   546  0393                     	;# 
   547  0394                     	;# 
   548  0395                     	;# 
   549  0396                     	;# 
   550  0611                     	;# 
   551  0612                     	;# 
   552  0613                     	;# 
   553  0613                     	;# 
   554  0614                     	;# 
   555  0615                     	;# 
   556  0616                     	;# 
   557  0616                     	;# 
   558  0711                     	;# 
   559  0711                     	;# 
   560  0711                     	;# 
   561  0712                     	;# 
   562  0712                     	;# 
   563  0713                     	;# 
   564  0713                     	;# 
   565  0713                     	;# 
   566  0714                     	;# 
   567  0714                     	;# 
   568  0714                     	;# 
   569  0715                     	;# 
   570  0715                     	;# 
   571  0716                     	;# 
   572  0716                     	;# 
   573  0716                     	;# 
   574  0716                     	;# 
   575  0717                     	;# 
   576  0717                     	;# 
   577  0717                     	;# 
   578  0717                     	;# 
   579  0718                     	;# 
   580  0718                     	;# 
   581  0718                     	;# 
   582  0719                     	;# 
   583  0719                     	;# 
   584  0719                     	;# 
   585  0719                     	;# 
   586  071A                     	;# 
   587  071A                     	;# 
   588  071A                     	;# 
   589  071A                     	;# 
   590  071A                     	;# 
   591  071B                     	;# 
   592  071B                     	;# 
   593  071C                     	;# 
   594  071C                     	;# 
   595  071C                     	;# 
   596  071C                     	;# 
   597  071C                     	;# 
   598  071D                     	;# 
   599  071D                     	;# 
   600  071E                     	;# 
   601  071E                     	;# 
   602  0791                     	;# 
   603  0791                     	;# 
   604  0793                     	;# 
   605  0793                     	;# 
   606  0794                     	;# 
   607  0794                     	;# 
   608  0796                     	;# 
   609  0796                     	;# 
   610  0796                     	;# 
   611  0797                     	;# 
   612  0797                     	;# 
   613  0797                     	;# 
   614  0798                     	;# 
   615  0798                     	;# 
   616  0799                     	;# 
   617  0799                     	;# 
   618  0799                     	;# 
   619  079A                     	;# 
   620  079A                     	;# 
   621  079A                     	;# 
   622  079B                     	;# 
   623  079C                     	;# 
   624  079C                     	;# 
   625  079C                     	;# 
   626  079D                     	;# 
   627  079E                     	;# 
   628  079E                     	;# 
   629  0F8C                     	;# 
   630  0F8D                     	;# 
   631  0F91                     	;# 
   632  0F96                     	;# 
   633  0F97                     	;# 
   634  0F9C                     	;# 
   635  0F9D                     	;# 
   636  0F9E                     	;# 
   637  0FE3                     	;# 
   638  0FE4                     	;# 
   639  0FE5                     	;# 
   640  0FE6                     	;# 
   641  0FE7                     	;# 
   642  0FE8                     	;# 
   643  0FE9                     	;# 
   644  0FEA                     	;# 
   645  0FEB                     	;# 
   646  0FED                     	;# 
   647  0FEE                     	;# 
   648  0FEF                     	;# 
   649  0000                     	;# 
   650  0001                     	;# 
   651  0002                     	;# 
   652  0003                     	;# 
   653  0004                     	;# 
   654  0005                     	;# 
   655  0006                     	;# 
   656  0007                     	;# 
   657  0008                     	;# 
   658  0009                     	;# 
   659  000A                     	;# 
   660  000B                     	;# 
   661  000C                     	;# 
   662  000D                     	;# 
   663  000E                     	;# 
   664  0011                     	;# 
   665  0012                     	;# 
   666  0015                     	;# 
   667  0016                     	;# 
   668  0016                     	;# 
   669  0017                     	;# 
   670  0018                     	;# 
   671  0019                     	;# 
   672  001A                     	;# 
   673  001B                     	;# 
   674  001C                     	;# 
   675  008C                     	;# 
   676  008D                     	;# 
   677  008E                     	;# 
   678  0091                     	;# 
   679  0092                     	;# 
   680  0095                     	;# 
   681  0096                     	;# 
   682  0097                     	;# 
   683  0099                     	;# 
   684  009A                     	;# 
   685  009B                     	;# 
   686  009B                     	;# 
   687  009C                     	;# 
   688  009D                     	;# 
   689  009E                     	;# 
   690  009F                     	;# 
   691  010C                     	;# 
   692  010D                     	;# 
   693  010E                     	;# 
   694  0116                     	;# 
   695  0117                     	;# 
   696  011D                     	;# 
   697  018C                     	;# 
   698  018D                     	;# 
   699  018E                     	;# 
   700  0191                     	;# 
   701  0191                     	;# 
   702  0192                     	;# 
   703  0193                     	;# 
   704  0193                     	;# 
   705  0194                     	;# 
   706  0195                     	;# 
   707  0196                     	;# 
   708  0199                     	;# 
   709  019A                     	;# 
   710  019B                     	;# 
   711  019B                     	;# 
   712  019C                     	;# 
   713  019D                     	;# 
   714  019E                     	;# 
   715  019F                     	;# 
   716  020C                     	;# 
   717  020D                     	;# 
   718  0211                     	;# 
   719  0211                     	;# 
   720  0212                     	;# 
   721  0212                     	;# 
   722  0213                     	;# 
   723  0213                     	;# 
   724  0214                     	;# 
   725  0214                     	;# 
   726  0215                     	;# 
   727  0215                     	;# 
   728  0215                     	;# 
   729  0216                     	;# 
   730  0216                     	;# 
   731  0217                     	;# 
   732  0217                     	;# 
   733  0391                     	;# 
   734  0392                     	;# 
   735  0393                     	;# 
   736  0394                     	;# 
   737  0395                     	;# 
   738  0396                     	;# 
   739  0611                     	;# 
   740  0612                     	;# 
   741  0613                     	;# 
   742  0613                     	;# 
   743  0614                     	;# 
   744  0615                     	;# 
   745  0616                     	;# 
   746  0616                     	;# 
   747  0711                     	;# 
   748  0711                     	;# 
   749  0711                     	;# 
   750  0712                     	;# 
   751  0712                     	;# 
   752  0713                     	;# 
   753  0713                     	;# 
   754  0713                     	;# 
   755  0714                     	;# 
   756  0714                     	;# 
   757  0714                     	;# 
   758  0715                     	;# 
   759  0715                     	;# 
   760  0716                     	;# 
   761  0716                     	;# 
   762  0716                     	;# 
   763  0716                     	;# 
   764  0717                     	;# 
   765  0717                     	;# 
   766  0717                     	;# 
   767  0717                     	;# 
   768  0718                     	;# 
   769  0718                     	;# 
   770  0718                     	;# 
   771  0719                     	;# 
   772  0719                     	;# 
   773  0719                     	;# 
   774  0719                     	;# 
   775  071A                     	;# 
   776  071A                     	;# 
   777  071A                     	;# 
   778  071A                     	;# 
   779  071A                     	;# 
   780  071B                     	;# 
   781  071B                     	;# 
   782  071C                     	;# 
   783  071C                     	;# 
   784  071C                     	;# 
   785  071C                     	;# 
   786  071C                     	;# 
   787  071D                     	;# 
   788  071D                     	;# 
   789  071E                     	;# 
   790  071E                     	;# 
   791  0791                     	;# 
   792  0791                     	;# 
   793  0793                     	;# 
   794  0793                     	;# 
   795  0794                     	;# 
   796  0794                     	;# 
   797  0796                     	;# 
   798  0796                     	;# 
   799  0796                     	;# 
   800  0797                     	;# 
   801  0797                     	;# 
   802  0797                     	;# 
   803  0798                     	;# 
   804  0798                     	;# 
   805  0799                     	;# 
   806  0799                     	;# 
   807  0799                     	;# 
   808  079A                     	;# 
   809  079A                     	;# 
   810  079A                     	;# 
   811  079B                     	;# 
   812  079C                     	;# 
   813  079C                     	;# 
   814  079C                     	;# 
   815  079D                     	;# 
   816  079E                     	;# 
   817  079E                     	;# 
   818  0F8C                     	;# 
   819  0F8D                     	;# 
   820  0F91                     	;# 
   821  0F96                     	;# 
   822  0F97                     	;# 
   823  0F9C                     	;# 
   824  0F9D                     	;# 
   825  0F9E                     	;# 
   826  0FE3                     	;# 
   827  0FE4                     	;# 
   828  0FE5                     	;# 
   829  0FE6                     	;# 
   830  0FE7                     	;# 
   831  0FE8                     	;# 
   832  0FE9                     	;# 
   833  0FEA                     	;# 
   834  0FEB                     	;# 
   835  0FED                     	;# 
   836  0FEE                     	;# 
   837  0FEF                     	;# 
   838  0000                     	;# 
   839  0001                     	;# 
   840  0002                     	;# 
   841  0003                     	;# 
   842  0004                     	;# 
   843  0005                     	;# 
   844  0006                     	;# 
   845  0007                     	;# 
   846  0008                     	;# 
   847  0009                     	;# 
   848  000A                     	;# 
   849  000B                     	;# 
   850  000C                     	;# 
   851  000D                     	;# 
   852  000E                     	;# 
   853  0011                     	;# 
   854  0012                     	;# 
   855  0015                     	;# 
   856  0016                     	;# 
   857  0016                     	;# 
   858  0017                     	;# 
   859  0018                     	;# 
   860  0019                     	;# 
   861  001A                     	;# 
   862  001B                     	;# 
   863  001C                     	;# 
   864  008C                     	;# 
   865  008D                     	;# 
   866  008E                     	;# 
   867  0091                     	;# 
   868  0092                     	;# 
   869  0095                     	;# 
   870  0096                     	;# 
   871  0097                     	;# 
   872  0099                     	;# 
   873  009A                     	;# 
   874  009B                     	;# 
   875  009B                     	;# 
   876  009C                     	;# 
   877  009D                     	;# 
   878  009E                     	;# 
   879  009F                     	;# 
   880  010C                     	;# 
   881  010D                     	;# 
   882  010E                     	;# 
   883  0116                     	;# 
   884  0117                     	;# 
   885  011D                     	;# 
   886  018C                     	;# 
   887  018D                     	;# 
   888  018E                     	;# 
   889  0191                     	;# 
   890  0191                     	;# 
   891  0192                     	;# 
   892  0193                     	;# 
   893  0193                     	;# 
   894  0194                     	;# 
   895  0195                     	;# 
   896  0196                     	;# 
   897  0199                     	;# 
   898  019A                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020C                     	;# 
   906  020D                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0391                     	;# 
   923  0392                     	;# 
   924  0393                     	;# 
   925  0394                     	;# 
   926  0395                     	;# 
   927  0396                     	;# 
   928  0611                     	;# 
   929  0612                     	;# 
   930  0613                     	;# 
   931  0613                     	;# 
   932  0614                     	;# 
   933  0615                     	;# 
   934  0616                     	;# 
   935  0616                     	;# 
   936  0711                     	;# 
   937  0711                     	;# 
   938  0711                     	;# 
   939  0712                     	;# 
   940  0712                     	;# 
   941  0713                     	;# 
   942  0713                     	;# 
   943  0713                     	;# 
   944  0714                     	;# 
   945  0714                     	;# 
   946  0714                     	;# 
   947  0715                     	;# 
   948  0715                     	;# 
   949  0716                     	;# 
   950  0716                     	;# 
   951  0716                     	;# 
   952  0716                     	;# 
   953  0717                     	;# 
   954  0717                     	;# 
   955  0717                     	;# 
   956  0717                     	;# 
   957  0718                     	;# 
   958  0718                     	;# 
   959  0718                     	;# 
   960  0719                     	;# 
   961  0719                     	;# 
   962  0719                     	;# 
   963  0719                     	;# 
   964  071A                     	;# 
   965  071A                     	;# 
   966  071A                     	;# 
   967  071A                     	;# 
   968  071A                     	;# 
   969  071B                     	;# 
   970  071B                     	;# 
   971  071C                     	;# 
   972  071C                     	;# 
   973  071C                     	;# 
   974  071C                     	;# 
   975  071C                     	;# 
   976  071D                     	;# 
   977  071D                     	;# 
   978  071E                     	;# 
   979  071E                     	;# 
   980  0791                     	;# 
   981  0791                     	;# 
   982  0793                     	;# 
   983  0793                     	;# 
   984  0794                     	;# 
   985  0794                     	;# 
   986  0796                     	;# 
   987  0796                     	;# 
   988  0796                     	;# 
   989  0797                     	;# 
   990  0797                     	;# 
   991  0797                     	;# 
   992  0798                     	;# 
   993  0798                     	;# 
   994  0799                     	;# 
   995  0799                     	;# 
   996  0799                     	;# 
   997  079A                     	;# 
   998  079A                     	;# 
   999  079A                     	;# 
  1000  079B                     	;# 
  1001  079C                     	;# 
  1002  079C                     	;# 
  1003  079C                     	;# 
  1004  079D                     	;# 
  1005  079E                     	;# 
  1006  079E                     	;# 
  1007  0F8C                     	;# 
  1008  0F8D                     	;# 
  1009  0F91                     	;# 
  1010  0F96                     	;# 
  1011  0F97                     	;# 
  1012  0F9C                     	;# 
  1013  0F9D                     	;# 
  1014  0F9E                     	;# 
  1015  0FE3                     	;# 
  1016  0FE4                     	;# 
  1017  0FE5                     	;# 
  1018  0FE6                     	;# 
  1019  0FE7                     	;# 
  1020  0FE8                     	;# 
  1021  0FE9                     	;# 
  1022  0FEA                     	;# 
  1023  0FEB                     	;# 
  1024  0FED                     	;# 
  1025  0FEE                     	;# 
  1026  0FEF                     	;# 
  1027  0000                     	;# 
  1028  0001                     	;# 
  1029  0002                     	;# 
  1030  0003                     	;# 
  1031  0004                     	;# 
  1032  0005                     	;# 
  1033  0006                     	;# 
  1034  0007                     	;# 
  1035  0008                     	;# 
  1036  0009                     	;# 
  1037  000A                     	;# 
  1038  000B                     	;# 
  1039  000C                     	;# 
  1040  000D                     	;# 
  1041  000E                     	;# 
  1042  0011                     	;# 
  1043  0012                     	;# 
  1044  0015                     	;# 
  1045  0016                     	;# 
  1046  0016                     	;# 
  1047  0017                     	;# 
  1048  0018                     	;# 
  1049  0019                     	;# 
  1050  001A                     	;# 
  1051  001B                     	;# 
  1052  001C                     	;# 
  1053  008C                     	;# 
  1054  008D                     	;# 
  1055  008E                     	;# 
  1056  0091                     	;# 
  1057  0092                     	;# 
  1058  0095                     	;# 
  1059  0096                     	;# 
  1060  0097                     	;# 
  1061  0099                     	;# 
  1062  009A                     	;# 
  1063  009B                     	;# 
  1064  009B                     	;# 
  1065  009C                     	;# 
  1066  009D                     	;# 
  1067  009E                     	;# 
  1068  009F                     	;# 
  1069  010C                     	;# 
  1070  010D                     	;# 
  1071  010E                     	;# 
  1072  0116                     	;# 
  1073  0117                     	;# 
  1074  011D                     	;# 
  1075  018C                     	;# 
  1076  018D                     	;# 
  1077  018E                     	;# 
  1078  0191                     	;# 
  1079  0191                     	;# 
  1080  0192                     	;# 
  1081  0193                     	;# 
  1082  0193                     	;# 
  1083  0194                     	;# 
  1084  0195                     	;# 
  1085  0196                     	;# 
  1086  0199                     	;# 
  1087  019A                     	;# 
  1088  019B                     	;# 
  1089  019B                     	;# 
  1090  019C                     	;# 
  1091  019D                     	;# 
  1092  019E                     	;# 
  1093  019F                     	;# 
  1094  020C                     	;# 
  1095  020D                     	;# 
  1096  0211                     	;# 
  1097  0211                     	;# 
  1098  0212                     	;# 
  1099  0212                     	;# 
  1100  0213                     	;# 
  1101  0213                     	;# 
  1102  0214                     	;# 
  1103  0214                     	;# 
  1104  0215                     	;# 
  1105  0215                     	;# 
  1106  0215                     	;# 
  1107  0216                     	;# 
  1108  0216                     	;# 
  1109  0217                     	;# 
  1110  0217                     	;# 
  1111  0391                     	;# 
  1112  0392                     	;# 
  1113  0393                     	;# 
  1114  0394                     	;# 
  1115  0395                     	;# 
  1116  0396                     	;# 
  1117  0611                     	;# 
  1118  0612                     	;# 
  1119  0613                     	;# 
  1120  0613                     	;# 
  1121  0614                     	;# 
  1122  0615                     	;# 
  1123  0616                     	;# 
  1124  0616                     	;# 
  1125  0711                     	;# 
  1126  0711                     	;# 
  1127  0711                     	;# 
  1128  0712                     	;# 
  1129  0712                     	;# 
  1130  0713                     	;# 
  1131  0713                     	;# 
  1132  0713                     	;# 
  1133  0714                     	;# 
  1134  0714                     	;# 
  1135  0714                     	;# 
  1136  0715                     	;# 
  1137  0715                     	;# 
  1138  0716                     	;# 
  1139  0716                     	;# 
  1140  0716                     	;# 
  1141  0716                     	;# 
  1142  0717                     	;# 
  1143  0717                     	;# 
  1144  0717                     	;# 
  1145  0717                     	;# 
  1146  0718                     	;# 
  1147  0718                     	;# 
  1148  0718                     	;# 
  1149  0719                     	;# 
  1150  0719                     	;# 
  1151  0719                     	;# 
  1152  0719                     	;# 
  1153  071A                     	;# 
  1154  071A                     	;# 
  1155  071A                     	;# 
  1156  071A                     	;# 
  1157  071A                     	;# 
  1158  071B                     	;# 
  1159  071B                     	;# 
  1160  071C                     	;# 
  1161  071C                     	;# 
  1162  071C                     	;# 
  1163  071C                     	;# 
  1164  071C                     	;# 
  1165  071D                     	;# 
  1166  071D                     	;# 
  1167  071E                     	;# 
  1168  071E                     	;# 
  1169  0791                     	;# 
  1170  0791                     	;# 
  1171  0793                     	;# 
  1172  0793                     	;# 
  1173  0794                     	;# 
  1174  0794                     	;# 
  1175  0796                     	;# 
  1176  0796                     	;# 
  1177  0796                     	;# 
  1178  0797                     	;# 
  1179  0797                     	;# 
  1180  0797                     	;# 
  1181  0798                     	;# 
  1182  0798                     	;# 
  1183  0799                     	;# 
  1184  0799                     	;# 
  1185  0799                     	;# 
  1186  079A                     	;# 
  1187  079A                     	;# 
  1188  079A                     	;# 
  1189  079B                     	;# 
  1190  079C                     	;# 
  1191  079C                     	;# 
  1192  079C                     	;# 
  1193  079D                     	;# 
  1194  079E                     	;# 
  1195  079E                     	;# 
  1196  0F8C                     	;# 
  1197  0F8D                     	;# 
  1198  0F91                     	;# 
  1199  0F96                     	;# 
  1200  0F97                     	;# 
  1201  0F9C                     	;# 
  1202  0F9D                     	;# 
  1203  0F9E                     	;# 
  1204  0FE3                     	;# 
  1205  0FE4                     	;# 
  1206  0FE5                     	;# 
  1207  0FE6                     	;# 
  1208  0FE7                     	;# 
  1209  0FE8                     	;# 
  1210  0FE9                     	;# 
  1211  0FEA                     	;# 
  1212  0FEB                     	;# 
  1213  0FED                     	;# 
  1214  0FEE                     	;# 
  1215  0FEF                     	;_ReadStorage
  1216                           
  1217 ;; Function _EUSART_is_tx_ready is unused but had its address taken
  1218  0000                     
  1219 ;; Function _EUSART_is_rx_ready is unused but had its address taken
  1220  0000                     
  1221 ;; Function _EUSART_is_tx_done is unused but had its address taken
  1222  0000                     
  1223                           	psect	stringtext1
  1224  0218                     __pstringtext1:	
  1225  0218                     _uart:	
  1226  0218  348F               	retlw	low _EUSART_Read
  1227  0219  3401               	retlw	high _EUSART_Read
  1228  021A  346C               	retlw	low _EUSART_Write
  1229  021B  3401               	retlw	high _EUSART_Write
  1230  021C  3400               	retlw	0
  1231  021D  3400               	retlw	0
  1232  021E  3400               	retlw	0
  1233  021F  3400               	retlw	0
  1234  0220  346C               	retlw	low _EUSART_SetTxInterruptHandler
  1235  0221  3402               	retlw	high _EUSART_SetTxInterruptHandler
  1236  0222  34BA               	retlw	low _EUSART_Receive_ISR
  1237  0223  3400               	retlw	high _EUSART_Receive_ISR
  1238  0224  3484               	retlw	low _EUSART_SetRxInterruptHandler
  1239  0225  3402               	retlw	high _EUSART_SetRxInterruptHandler
  1240  0226  3400               	retlw	0
  1241  0227  3400               	retlw	0
  1242  0228  34B2               	retlw	low _EUSART_Transmit_ISR
  1243  0229  3401               	retlw	high _EUSART_Transmit_ISR
  1244  022A  3441               	retlw	low _EUSART_Initialize
  1245  022B  3400               	retlw	high _EUSART_Initialize
  1246  022C                     __end_of_uart:	
  1247                           
  1248                           	psect	nvBANK0
  1249  0048                     __pnvBANK0:	
  1250  0048                     _EUSART_ErrorHandler:	
  1251  0048                     	ds	2
  1252  004A                     _EUSART_OverrunErrorHandler:	
  1253  004A                     	ds	2
  1254  004C                     _EUSART_FramingErrorHandler:	
  1255  004C                     	ds	2
  1256  004E                     _EUSART_RxDefaultInterruptHandler:	
  1257  004E                     	ds	2
  1258  0050                     _EUSART_TxDefaultInterruptHandler:	
  1259  0050                     	ds	2
  1260  0052                     _eusartTxBufferRemaining:	
  1261  0052                     	ds	1
  1262  0011                     _PIR1bits	set	17
  1263  000B                     _INTCONbits	set	11
  1264  0095                     _OPTION_REGbits	set	149
  1265  008E                     _TRISC	set	142
  1266  008D                     _TRISB	set	141
  1267  008C                     _TRISA	set	140
  1268  0097                     _WDTCON	set	151
  1269  0099                     _OSCCON	set	153
  1270  0091                     _PIE1bits	set	145
  1271  011D                     _APFCON	set	285
  1272  010E                     _LATC	set	270
  1273  010D                     _LATB	set	269
  1274  010C                     _LATA	set	268
  1275  0116                     _BORCON	set	278
  1276  018C                     _ANSELA	set	396
  1277  018D                     _ANSELB	set	397
  1278  018E                     _ANSELC	set	398
  1279  0199                     _RCREG	set	409
  1280  019D                     _RCSTAbits	set	413
  1281  019A                     _TXREG	set	410
  1282  019E                     _TXSTAbits	set	414
  1283  019C                     _SPBRGH	set	412
  1284  019B                     _SPBRGL	set	411
  1285  019E                     _TXSTA	set	414
  1286  019D                     _RCSTA	set	413
  1287  019F                     _BAUDCON	set	415
  1288  020C                     _WPUA	set	524
  1289  020D                     _WPUB	set	525
  1290                           
  1291                           ; #config settings
  1292  0000                     
  1293                           	psect	cinit
  1294  0023                     start_initialization:	
  1295  0023                     __initialization:		;BIGRAM
  1296                           
  1297                           ; Clear objects allocated to BIGRAM
  1298  0023  30F0               	movlw	low (0+8432)
  1299  0024  0084               	movwf	4
  1300  0025  3020               	movlw	high (0+8432)
  1301  0026  0085               	movwf	5
  1302  0027  3000               	movlw	0
  1303  0028  00FE               	movwf	btemp
  1304  0029  3001               	movlw	1
  1305  002A  00FF               	movwf	btemp+1
  1306  002B  3182  224E  3180   	fcall	clear_ram0
  1307                           
  1308                           ; Clear objects allocated to COMMON
  1309  002E  01F0               	clrf	__pbssCOMMON& (0+127)
  1310  002F  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
  1311  0030  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
  1312  0031  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
  1313  0032  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
  1314                           
  1315                           ; Clear objects allocated to BANK0
  1316  0033  3020               	movlw	low __pbssBANK0
  1317  0034  0084               	movwf	4
  1318  0035  3000               	movlw	high __pbssBANK0
  1319  0036  0085               	movwf	5
  1320  0037  301C               	movlw	28
  1321  0038  00FE               	movwf	btemp
  1322  0039  3000               	movlw	0
  1323  003A  00FF               	movwf	btemp+1
  1324  003B  3182  224E         	fcall	clear_ram0
  1325  003D                     end_of_initialization:	
  1326                           ;End of C runtime variable initialization code
  1327                           
  1328  003D                     __end_of__initialization:	
  1329  003D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1330  003E  0020               	movlb	0
  1331  003F  3180  2884         	ljmp	_main	;jump to C main() function
  1332                           
  1333                           	psect	bssCOMMON
  1334  0070                     __pbssCOMMON:	
  1335  0070                     _eusartRxCount:	
  1336  0070                     	ds	1
  1337  0071                     _eusartRxTail:	
  1338  0071                     	ds	1
  1339  0072                     _eusartRxHead:	
  1340  0072                     	ds	1
  1341  0073                     _eusartTxTail:	
  1342  0073                     	ds	1
  1343  0074                     _eusartTxHead:	
  1344  0074                     	ds	1
  1345                           
  1346                           	psect	bssBANK0
  1347  0020                     __pbssBANK0:	
  1348  0020                     _eusartRxStatusBuffer:	
  1349  0020                     	ds	8
  1350  0028                     _eusartRxBuffer:	
  1351  0028                     	ds	8
  1352  0030                     _eusartTxBuffer:	
  1353  0030                     	ds	8
  1354  0038                     _rxData:	
  1355  0038                     	ds	2
  1356  003A                     _ResponseIndex:	
  1357  003A                     	ds	1
  1358  003B                     _eusartRxLastError:	
  1359  003B                     	ds	1
  1360                           
  1361                           	psect	clrtext
  1362  024E                     clear_ram0:	
  1363                           ;	Called with FSR0 containing the base address, and
  1364                           ;	btemp/btemp+1 has the size to clear
  1365                           
  1366  024E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1367  024F                     clrloop0:	
  1368  024F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1369  0250  3101               	addfsr 0,1
  1370  0251  3001               	movlw	1
  1371  0252  02FE               	subwf	126,f
  1372  0253  3000               	movlw	0
  1373  0254  3BFF               	subwfb	127,f
  1374  0255  087F               	movf	127,w
  1375  0256  047E               	iorwf	126,w
  1376  0257  1903               	btfsc	3,2
  1377  0258  3400               	retlw	0	;all done for this memory range, return
  1378  0259  2A4F               	goto	clrloop0	;have we reached the end yet?
  1379                           
  1380                           	psect	cstackCOMMON
  1381  0075                     __pcstackCOMMON:	
  1382  0075                     ?_EUSART_Receive_ISR:	
  1383  0075                     ?_EUSART_Transmit_ISR:	
  1384                           ; 1 bytes @ 0x0
  1385                           
  1386  0075                     ??_EUSART_Transmit_ISR:	
  1387                           ; 1 bytes @ 0x0
  1388                           
  1389  0075                     ?_EUSART_DefaultFramingErrorHandler:	
  1390                           ; 1 bytes @ 0x0
  1391                           
  1392  0075                     ??_EUSART_DefaultFramingErrorHandler:	
  1393                           ; 1 bytes @ 0x0
  1394                           
  1395  0075                     ?_EUSART_DefaultOverrunErrorHandler:	
  1396                           ; 1 bytes @ 0x0
  1397                           
  1398  0075                     ??_EUSART_DefaultOverrunErrorHandler:	
  1399                           ; 1 bytes @ 0x0
  1400                           
  1401  0075                     ?_EUSART_DefaultErrorHandler:	
  1402                           ; 1 bytes @ 0x0
  1403                           
  1404  0075                     ?_EUSART_RxDataHandler:	
  1405                           ; 1 bytes @ 0x0
  1406                           
  1407  0075                     ??_EUSART_RxDataHandler:	
  1408                           ; 1 bytes @ 0x0
  1409                           
  1410  0075                     ?_SYSTEM_Initialize:	
  1411                           ; 1 bytes @ 0x0
  1412                           
  1413  0075                     ?_INIT_SMART_LIGHT:	
  1414                           ; 1 bytes @ 0x0
  1415                           
  1416  0075                     ?_ReadyReceiveBuffer:	
  1417                           ; 1 bytes @ 0x0
  1418                           
  1419  0075                     ?_PIN_MANAGER_Initialize:	
  1420                           ; 1 bytes @ 0x0
  1421                           
  1422  0075                     ?_OSCILLATOR_Initialize:	
  1423                           ; 1 bytes @ 0x0
  1424                           
  1425  0075                     ?_WDT_Initialize:	
  1426                           ; 1 bytes @ 0x0
  1427                           
  1428  0075                     ?_ReceivedMessage:	
  1429                           ; 1 bytes @ 0x0
  1430                           
  1431  0075                     ?_EUSART_Initialize:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0075                     ?_EUSART_Read:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0075                     ??_EUSART_Read:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0075                     ?_main:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0075                     ?_INTERRUPT_InterruptManager:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446                           
  1447                           ; 1 bytes @ 0x0
  1448  0075                     	ds	1
  1449  0076                     ??_EUSART_Receive_ISR:	
  1450  0076                     ??_EUSART_DefaultErrorHandler:	
  1451                           ; 1 bytes @ 0x1
  1452                           
  1453  0076                     EUSART_Read@readValue:	
  1454                           ; 1 bytes @ 0x1
  1455                           
  1456                           
  1457                           ; 1 bytes @ 0x1
  1458  0076                     	ds	1
  1459  0077                     ??_ReceivedMessage:	
  1460                           
  1461                           ; 1 bytes @ 0x2
  1462  0077                     	ds	2
  1463  0079                     ReceivedMessage@readByte:	
  1464                           
  1465                           ; 1 bytes @ 0x4
  1466  0079                     	ds	1
  1467  007A                     ??_INTERRUPT_InterruptManager:	
  1468                           
  1469                           	psect	cstackBANK0
  1470  003C                     __pcstackBANK0:	
  1471                           ; 1 bytes @ 0x5
  1472                           
  1473  003C                     ?_EUSART_SetRxInterruptHandler:	
  1474  003C                     ?_EUSART_SetTxInterruptHandler:	
  1475                           ; 1 bytes @ 0x0
  1476                           
  1477  003C                     ?_EUSART_SetFramingErrorHandler:	
  1478                           ; 1 bytes @ 0x0
  1479                           
  1480  003C                     ?_EUSART_SetOverrunErrorHandler:	
  1481                           ; 1 bytes @ 0x0
  1482                           
  1483  003C                     ?_EUSART_SetErrorHandler:	
  1484                           ; 1 bytes @ 0x0
  1485                           
  1486  003C                     ?_blockingWait:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  003C                     ??_ReadyReceiveBuffer:	
  1490                           ; 1 bytes @ 0x0
  1491                           
  1492  003C                     ??_PIN_MANAGER_Initialize:	
  1493                           ; 1 bytes @ 0x0
  1494                           
  1495  003C                     ??_OSCILLATOR_Initialize:	
  1496                           ; 1 bytes @ 0x0
  1497                           
  1498  003C                     ??_WDT_Initialize:	
  1499                           ; 1 bytes @ 0x0
  1500                           
  1501  003C                     ?_EUSART_Write:	
  1502                           ; 1 bytes @ 0x0
  1503                           
  1504  003C                     ?_GetResponse:	
  1505                           ; 1 bytes @ 0x0
  1506                           
  1507  003C                     ?_strcpy:	
  1508                           ; 2 bytes @ 0x0
  1509                           
  1510  003C                     EUSART_Write@txData:	
  1511                           ; 2 bytes @ 0x0
  1512                           
  1513  003C                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1514                           ; 1 bytes @ 0x0
  1515                           
  1516  003C                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1517                           ; 2 bytes @ 0x0
  1518                           
  1519  003C                     EUSART_SetErrorHandler@interruptHandler:	
  1520                           ; 2 bytes @ 0x0
  1521                           
  1522  003C                     EUSART_SetTxInterruptHandler@interruptHandler:	
  1523                           ; 2 bytes @ 0x0
  1524                           
  1525  003C                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1526                           ; 2 bytes @ 0x0
  1527                           
  1528  003C                     blockingWait@limit:	
  1529                           ; 2 bytes @ 0x0
  1530                           
  1531  003C                     strcpy@dest:	
  1532                           ; 2 bytes @ 0x0
  1533                           
  1534                           
  1535                           ; 2 bytes @ 0x0
  1536  003C                     	ds	1
  1537  003D                     ??_EUSART_Write:	
  1538  003D                     ReadyReceiveBuffer@position:	
  1539                           ; 1 bytes @ 0x1
  1540                           
  1541                           
  1542                           ; 1 bytes @ 0x1
  1543  003D                     	ds	1
  1544  003E                     ??_EUSART_SetRxInterruptHandler:	
  1545  003E                     ??_EUSART_SetTxInterruptHandler:	
  1546                           ; 1 bytes @ 0x2
  1547                           
  1548  003E                     ??_EUSART_SetFramingErrorHandler:	
  1549                           ; 1 bytes @ 0x2
  1550                           
  1551  003E                     ??_EUSART_SetOverrunErrorHandler:	
  1552                           ; 1 bytes @ 0x2
  1553                           
  1554  003E                     ??_EUSART_SetErrorHandler:	
  1555                           ; 1 bytes @ 0x2
  1556                           
  1557  003E                     ??_INIT_SMART_LIGHT:	
  1558                           ; 1 bytes @ 0x2
  1559                           
  1560  003E                     ??_GetResponse:	
  1561                           ; 1 bytes @ 0x2
  1562                           
  1563  003E                     ??_blockingWait:	
  1564                           ; 1 bytes @ 0x2
  1565                           
  1566  003E                     ?_SendString:	
  1567                           ; 1 bytes @ 0x2
  1568                           
  1569  003E                     ??_EUSART_Initialize:	
  1570                           ; 1 bytes @ 0x2
  1571                           
  1572  003E                     SendString@command:	
  1573                           ; 1 bytes @ 0x2
  1574                           
  1575  003E                     strcpy@src:	
  1576                           ; 2 bytes @ 0x2
  1577                           
  1578                           
  1579                           ; 2 bytes @ 0x2
  1580  003E                     	ds	1
  1581  003F                     ??_SYSTEM_Initialize:	
  1582  003F                     blockingWait@counter:	
  1583                           ; 1 bytes @ 0x3
  1584                           
  1585                           
  1586                           ; 2 bytes @ 0x3
  1587  003F                     	ds	1
  1588  0040                     ??_strcpy:	
  1589  0040                     ??_SendString:	
  1590                           ; 1 bytes @ 0x4
  1591                           
  1592                           
  1593                           ; 1 bytes @ 0x4
  1594  0040                     	ds	4
  1595  0044                     strcpy@s:	
  1596                           
  1597                           ; 2 bytes @ 0x8
  1598  0044                     	ds	2
  1599  0046                     strcpy@d:	
  1600                           
  1601                           ; 2 bytes @ 0xA
  1602  0046                     	ds	2
  1603  0048                     ??_main:	
  1604                           
  1605                           	psect	maintext
  1606  0084                     __pmaintext:	
  1607                           ; 1 bytes @ 0xC
  1608 ;;
  1609 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1610 ;;
  1611 ;; *************** function _main *****************
  1612 ;; Defined at:
  1613 ;;		line 5 in file "main.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;		None
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;		None
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  1    wreg      void 
  1620 ;; Registers used:
  1621 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1622 ;; Tracked objects:
  1623 ;;		On entry : B1F/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1627 ;;      Params:         0       0       0       0       0       0       0       0
  1628 ;;      Locals:         0       0       0       0       0       0       0       0
  1629 ;;      Temps:          0       0       0       0       0       0       0       0
  1630 ;;      Totals:         0       0       0       0       0       0       0       0
  1631 ;;Total ram usage:        0 bytes
  1632 ;; Hardware stack levels required when called:    8
  1633 ;; This function calls:
  1634 ;;		_GetResponse
  1635 ;;		_INIT_SMART_LIGHT
  1636 ;;		_ReadyReceiveBuffer
  1637 ;;		_SYSTEM_Initialize
  1638 ;;		_SendString
  1639 ;;		_blockingWait
  1640 ;;		_strcpy
  1641 ;; This function is called by:
  1642 ;;		Startup code after reset
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function _main
  1648  0084                     _main:	
  1649                           
  1650                           ;main.c: 7:     SYSTEM_Initialize();
  1651                           
  1652                           ;incstack = 0
  1653                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1654  0084  3182  225A  3180   	fcall	_SYSTEM_Initialize
  1655                           
  1656                           ;main.c: 8:     (INTCONbits.GIE = 1);
  1657  0087  178B               	bsf	11,7	;volatile
  1658                           
  1659                           ;main.c: 9:     (INTCONbits.PEIE = 1);
  1660  0088  170B               	bsf	11,6	;volatile
  1661                           
  1662                           ;main.c: 10:     INIT_SMART_LIGHT ();
  1663  0089  3182  223F  3180   	fcall	_INIT_SMART_LIGHT
  1664  008C                     l1436:	
  1665                           
  1666                           ;main.c: 12:     {;main.c: 13:         rxData = GetResponse();
  1667  008C  3182  228A  3180   	fcall	_GetResponse
  1668  008F  0020               	movlb	0	; select bank0
  1669  0090  083D               	movf	?_GetResponse+1,w
  1670  0091  00B9               	movwf	_rxData+1
  1671  0092  083C               	movf	?_GetResponse,w
  1672  0093  00B8               	movwf	_rxData
  1673                           
  1674                           ;main.c: 14:         if(*rxData != ((void*)0))
  1675  0094  0838               	movf	_rxData,w
  1676  0095  0086               	movwf	6
  1677  0096  0839               	movf	_rxData+1,w
  1678  0097  0087               	movwf	7
  1679  0098  0801               	movf	1,w
  1680  0099  1903               	btfsc	3,2
  1681  009A  288C               	goto	l1436
  1682                           
  1683                           ;main.c: 15:         {;main.c: 16:             blockingWait(1);
  1684  009B  3001               	movlw	1
  1685  009C  00BC               	movwf	blockingWait@limit
  1686  009D  3000               	movlw	0
  1687  009E  00BD               	movwf	blockingWait@limit+1
  1688  009F  3181  21E9  3180   	fcall	_blockingWait
  1689                           
  1690                           ;main.c: 17:             strcpy(ReadStorage, rxData);
  1691  00A2  30F0               	movlw	240
  1692  00A3  0020               	movlb	0	; select bank0
  1693  00A4  00BC               	movwf	strcpy@dest
  1694  00A5  3020               	movlw	32
  1695  00A6  00BD               	movwf	strcpy@dest+1
  1696  00A7  0839               	movf	_rxData+1,w
  1697  00A8  00BF               	movwf	strcpy@src+1
  1698  00A9  0838               	movf	_rxData,w
  1699  00AA  00BE               	movwf	strcpy@src
  1700  00AB  3181  2147  3180   	fcall	_strcpy
  1701                           
  1702                           ;main.c: 18:             SendString(ReadStorage);
  1703  00AE  30F0               	movlw	240
  1704  00AF  0020               	movlb	0	; select bank0
  1705  00B0  00BE               	movwf	SendString@command
  1706  00B1  3020               	movlw	32
  1707  00B2  00BF               	movwf	SendString@command+1
  1708  00B3  3181  211A  3180   	fcall	_SendString
  1709                           
  1710                           ;main.c: 19:             ReadyReceiveBuffer();
  1711  00B6  3182  222C  3180   	fcall	_ReadyReceiveBuffer
  1712  00B9  288C               	goto	l1436
  1713  00BA                     __end_of_main:	
  1714                           
  1715                           	psect	text1
  1716  0147                     __ptext1:	
  1717 ;; *************** function _strcpy *****************
  1718 ;; Defined at:
  1719 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.05\pic\sources\c99\common\strcpy.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;  dest            2    0[BANK0 ] PTR unsigned char 
  1722 ;;		 -> ReadStorage(128), 
  1723 ;;  src             2    2[BANK0 ] PTR const unsigned char 
  1724 ;;		 -> ResponseBuffer(128), NULL(0), 
  1725 ;; Auto vars:     Size  Location     Type
  1726 ;;  d               2   10[BANK0 ] PTR unsigned char 
  1727 ;;		 -> ReadStorage(128), 
  1728 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  1729 ;;		 -> ResponseBuffer(128), NULL(0), 
  1730 ;; Return value:  Size  Location     Type
  1731 ;;                  2    0[BANK0 ] PTR unsigned char 
  1732 ;; Registers used:
  1733 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h
  1734 ;; Tracked objects:
  1735 ;;		On entry : 0/0
  1736 ;;		On exit  : 0/0
  1737 ;;		Unchanged: 0/0
  1738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1739 ;;      Params:         0       4       0       0       0       0       0       0
  1740 ;;      Locals:         0       4       0       0       0       0       0       0
  1741 ;;      Temps:          0       4       0       0       0       0       0       0
  1742 ;;      Totals:         0      12       0       0       0       0       0       0
  1743 ;;Total ram usage:       12 bytes
  1744 ;; Hardware stack levels used:    1
  1745 ;; Hardware stack levels required when called:    5
  1746 ;; This function calls:
  1747 ;;		Nothing
  1748 ;; This function is called by:
  1749 ;;		_main
  1750 ;; This function uses a non-reentrant model
  1751 ;;
  1752                           
  1753                           
  1754                           ;psect for function _strcpy
  1755  0147                     _strcpy:	
  1756                           
  1757                           ;incstack = 0
  1758                           ; Regs used in _strcpy: [wreg-fsr1h]
  1759  0147  0020               	movlb	0	; select bank0
  1760  0148  083F               	movf	strcpy@src+1,w
  1761  0149  00C5               	movwf	strcpy@s+1
  1762  014A  083E               	movf	strcpy@src,w
  1763  014B  00C4               	movwf	strcpy@s
  1764  014C  083D               	movf	strcpy@dest+1,w
  1765  014D  00C7               	movwf	strcpy@d+1
  1766  014E  083C               	movf	strcpy@dest,w
  1767  014F  00C6               	movwf	strcpy@d
  1768  0150                     l1404:	
  1769  0150  0847               	movf	strcpy@d+1,w
  1770  0151  00C1               	movwf	??_strcpy+1
  1771  0152  0846               	movf	strcpy@d,w
  1772  0153  00C0               	movwf	??_strcpy
  1773  0154  0AC6               	incf	strcpy@d,f
  1774  0155  1903               	skipnz
  1775  0156  0AC7               	incf	strcpy@d+1,f
  1776  0157  0840               	movf	??_strcpy,w
  1777  0158  0086               	movwf	6
  1778  0159  0841               	movf	??_strcpy+1,w
  1779  015A  0087               	movwf	7
  1780  015B  0845               	movf	strcpy@s+1,w
  1781  015C  00C3               	movwf	??_strcpy+3
  1782  015D  0844               	movf	strcpy@s,w
  1783  015E  00C2               	movwf	??_strcpy+2
  1784  015F  0AC4               	incf	strcpy@s,f
  1785  0160  1903               	skipnz
  1786  0161  0AC5               	incf	strcpy@s+1,f
  1787  0162  0842               	movf	??_strcpy+2,w
  1788  0163  0084               	movwf	4
  1789  0164  0843               	movf	??_strcpy+3,w
  1790  0165  0085               	movwf	5
  1791  0166  0800               	movf	0,w
  1792  0167  3FC0               	movwi [0]fsr1
  1793  0168  0889               	movf	9,f
  1794  0169  1903               	btfsc	3,2
  1795  016A  0008               	return
  1796  016B  2950               	goto	l1404
  1797  016C                     __end_of_strcpy:	
  1798                           
  1799                           	psect	text2
  1800  01E9                     __ptext2:	
  1801 ;; *************** function _blockingWait *****************
  1802 ;; Defined at:
  1803 ;;		line 53 in file "uart.c"
  1804 ;; Parameters:    Size  Location     Type
  1805 ;;  limit           2    0[BANK0 ] unsigned short 
  1806 ;; Auto vars:     Size  Location     Type
  1807 ;;  counter         2    3[BANK0 ] unsigned short 
  1808 ;; Return value:  Size  Location     Type
  1809 ;;                  1    wreg      void 
  1810 ;; Registers used:
  1811 ;;		wreg, status,2
  1812 ;; Tracked objects:
  1813 ;;		On entry : 0/0
  1814 ;;		On exit  : 0/0
  1815 ;;		Unchanged: 0/0
  1816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1817 ;;      Params:         0       2       0       0       0       0       0       0
  1818 ;;      Locals:         0       2       0       0       0       0       0       0
  1819 ;;      Temps:          0       1       0       0       0       0       0       0
  1820 ;;      Totals:         0       5       0       0       0       0       0       0
  1821 ;;Total ram usage:        5 bytes
  1822 ;; Hardware stack levels used:    1
  1823 ;; Hardware stack levels required when called:    5
  1824 ;; This function calls:
  1825 ;;		Nothing
  1826 ;; This function is called by:
  1827 ;;		_main
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           
  1832                           ;psect for function _blockingWait
  1833  01E9                     _blockingWait:	
  1834                           
  1835                           ;uart.c: 53: void blockingWait (uint16_t limit);uart.c: 54: {;uart.c: 55:     for (uint1
      +                          6_t counter = 0; counter < limit; counter++)
  1836                           
  1837                           ;incstack = 0
  1838                           ; Regs used in _blockingWait: [wreg+status,2]
  1839  01E9  0020               	movlb	0	; select bank0
  1840  01EA  01BF               	clrf	blockingWait@counter
  1841  01EB  01C0               	clrf	blockingWait@counter+1
  1842  01EC                     l309:	
  1843  01EC  083D               	movf	blockingWait@limit+1,w
  1844  01ED  0240               	subwf	blockingWait@counter+1,w
  1845  01EE  1D03               	skipz
  1846  01EF  29F2               	goto	u505
  1847  01F0  083C               	movf	blockingWait@limit,w
  1848  01F1  023F               	subwf	blockingWait@counter,w
  1849  01F2                     u505:	
  1850  01F2  1803               	btfsc	3,0
  1851  01F3  0008               	return
  1852                           
  1853                           ;uart.c: 56:   _delay((unsigned long)((15)*(32000000/4000.0)));
  1854  01F4  309C               	movlw	156
  1855  01F5  0020               	movlb	0	; select bank0
  1856  01F6  00BE               	movwf	??_blockingWait
  1857  01F7  30D7               	movlw	215
  1858  01F8                     u557:	
  1859  01F8  0B89               	decfsz	9,f
  1860  01F9  29F8               	goto	u557
  1861  01FA  0BBE               	decfsz	??_blockingWait,f
  1862  01FB  29F8               	goto	u557
  1863  01FC  3001               	movlw	1
  1864  01FD  0020               	movlb	0	; select bank0
  1865  01FE  07BF               	addwf	blockingWait@counter,f
  1866  01FF  3000               	movlw	0
  1867  0200  3DC0               	addwfc	blockingWait@counter+1,f
  1868  0201  29EC               	goto	l309
  1869  0202                     __end_of_blockingWait:	
  1870                           
  1871                           	psect	text3
  1872  011A                     __ptext3:	
  1873 ;; *************** function _SendString *****************
  1874 ;; Defined at:
  1875 ;;		line 7 in file "uart.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  command         2    2[BANK0 ] PTR const unsigned char 
  1878 ;;		 -> ReadStorage(128), 
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1890 ;;      Params:         0       2       0       0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0       0
  1892 ;;      Temps:          0       1       0       0       0       0       0       0
  1893 ;;      Totals:         0       3       0       0       0       0       0       0
  1894 ;;Total ram usage:        3 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:    6
  1897 ;; This function calls:
  1898 ;;		_EUSART_Write
  1899 ;; This function is called by:
  1900 ;;		_main
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           
  1905                           ;psect for function _SendString
  1906  011A                     _SendString:	
  1907  011A                     l1412:	
  1908                           ;uart.c: 7: void SendString(const char* command);uart.c: 8: {;uart.c: 9:     while (*com
      +                          mand != '\0')
  1909                           
  1910                           ;incstack = 0
  1911                           ; Regs used in _SendString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1912                           
  1913                           
  1914                           ;uart.c: 9:     while (*command != '\0')
  1915  011A  0020               	movlb	0	; select bank0
  1916  011B  083E               	movf	SendString@command,w
  1917  011C  0086               	movwf	6
  1918  011D  083F               	movf	SendString@command+1,w
  1919  011E  0087               	movwf	7
  1920  011F  0801               	movf	1,w
  1921  0120  1903               	btfsc	3,2
  1922  0121  2939               	goto	l1414
  1923                           
  1924                           ;uart.c: 10:         uart[SML].Write(*command++);
  1925  0122  083E               	movf	SendString@command,w
  1926  0123  0086               	movwf	6
  1927  0124  083F               	movf	SendString@command+1,w
  1928  0125  0087               	movwf	7
  1929  0126  0801               	movf	1,w
  1930  0127  00C0               	movwf	??_SendString
  1931  0128  0840               	movf	??_SendString,w
  1932  0129  00BC               	movwf	EUSART_Write@txData
  1933  012A  301A               	movlw	low ((_uart+2)| (0+32768))
  1934  012B  0084               	movwf	4
  1935  012C  3082               	movlw	high ((_uart+2)| (0+32768))
  1936  012D  0085               	movwf	5
  1937  012E  3F01               	moviw [1]fsr0
  1938  012F  008A               	movwf	10
  1939  0130  3F00               	moviw [0]fsr0
  1940  0131  000A               	callw
  1941  0132  3181               	pagesel	$
  1942  0133  3001               	movlw	1
  1943  0134  0020               	movlb	0	; select bank0
  1944  0135  07BE               	addwf	SendString@command,f
  1945  0136  3000               	movlw	0
  1946  0137  3DBF               	addwfc	SendString@command+1,f
  1947  0138  291A               	goto	l1412
  1948  0139                     l1414:	
  1949                           
  1950                           ;uart.c: 12:     uart[SML].Write('\n');
  1951  0139  300A               	movlw	10
  1952  013A  00C0               	movwf	??_SendString
  1953  013B  0840               	movf	??_SendString,w
  1954  013C  00BC               	movwf	EUSART_Write@txData
  1955  013D  301A               	movlw	low ((_uart+2)| (0+32768))
  1956  013E  0084               	movwf	4
  1957  013F  3082               	movlw	high ((_uart+2)| (0+32768))
  1958  0140  0085               	movwf	5
  1959  0141  3F01               	moviw [1]fsr0
  1960  0142  008A               	movwf	10
  1961  0143  3F00               	moviw [0]fsr0
  1962  0144  000A               	callw
  1963  0145  3181               	pagesel	$
  1964  0146  0008               	return
  1965  0147                     __end_of_SendString:	
  1966                           
  1967                           	psect	text4
  1968  016C                     __ptext4:	
  1969 ;; *************** function _EUSART_Write *****************
  1970 ;; Defined at:
  1971 ;;		line 173 in file "mcc_generated_files/eusart.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;  txData          1    0[BANK0 ] unsigned char 
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;		None
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1985 ;;      Params:         0       1       0       0       0       0       0       0
  1986 ;;      Locals:         0       0       0       0       0       0       0       0
  1987 ;;      Temps:          0       1       0       0       0       0       0       0
  1988 ;;      Totals:         0       2       0       0       0       0       0       0
  1989 ;;Total ram usage:        2 bytes
  1990 ;; Hardware stack levels used:    1
  1991 ;; Hardware stack levels required when called:    5
  1992 ;; This function calls:
  1993 ;;		Nothing
  1994 ;; This function is called by:
  1995 ;;		_SendString
  1996 ;; This function uses a non-reentrant model
  1997 ;;
  1998                           
  1999                           
  2000                           ;psect for function _EUSART_Write
  2001  016C                     _EUSART_Write:	
  2002  016C                     l1354:	
  2003                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  2004                           
  2005                           ;incstack = 0
  2006                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  2007                           
  2008                           
  2009                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  2010  016C  0020               	movlb	0	; select bank0
  2011  016D  0852               	movf	_eusartTxBufferRemaining,w	;volatile
  2012  016E  1903               	btfsc	3,2
  2013  016F  296C               	goto	l1354
  2014                           
  2015                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  2016  0170  0021               	movlb	1	; select bank1
  2017  0171  1A11               	btfsc	17,4	;volatile
  2018  0172  2978               	goto	l100
  2019                           
  2020                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  2021  0173  0020               	movlb	0	; select bank0
  2022  0174  083C               	movf	EUSART_Write@txData,w
  2023  0175  0023               	movlb	3	; select bank3
  2024  0176  009A               	movwf	26	;volatile
  2025                           
  2026                           ;mcc_generated_files/eusart.c: 182:     }
  2027  0177  298C               	goto	l1368
  2028  0178                     l100:	
  2029                           ;mcc_generated_files/eusart.c: 183:     else
  2030                           
  2031                           
  2032                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  2033  0178  1211               	bcf	17,4	;volatile
  2034                           
  2035                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  2036  0179  0020               	movlb	0	; select bank0
  2037  017A  083C               	movf	EUSART_Write@txData,w
  2038  017B  00BD               	movwf	??_EUSART_Write
  2039  017C  0874               	movf	_eusartTxHead,w
  2040  017D  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  2041  017E  0086               	movwf	6
  2042  017F  0187               	clrf	7
  2043  0180  083D               	movf	??_EUSART_Write,w
  2044  0181  0081               	movwf	1
  2045  0182  3001               	movlw	1
  2046  0183  00BD               	movwf	??_EUSART_Write
  2047  0184  083D               	movf	??_EUSART_Write,w
  2048  0185  07F4               	addwf	_eusartTxHead,f	;volatile
  2049                           
  2050                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  2051  0186  3008               	movlw	8
  2052  0187  0274               	subwf	_eusartTxHead,w	;volatile
  2053  0188  1803               	btfsc	3,0
  2054                           
  2055                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  2056  0189  01F4               	clrf	_eusartTxHead	;volatile
  2057                           
  2058                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  2059  018A  3001               	movlw	1
  2060  018B  02D2               	subwf	_eusartTxBufferRemaining,f	;volatile
  2061  018C                     l1368:	
  2062                           
  2063                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  2064  018C  0021               	movlb	1	; select bank1
  2065  018D  1611               	bsf	17,4	;volatile
  2066  018E  0008               	return
  2067  018F                     __end_of_EUSART_Write:	
  2068                           
  2069                           	psect	text5
  2070  025A                     __ptext5:	
  2071 ;; *************** function _SYSTEM_Initialize *****************
  2072 ;; Defined at:
  2073 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;		None
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;		None
  2078 ;; Return value:  Size  Location     Type
  2079 ;;                  1    wreg      void 
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0, pclath, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2087 ;;      Params:         0       0       0       0       0       0       0       0
  2088 ;;      Locals:         0       0       0       0       0       0       0       0
  2089 ;;      Temps:          0       0       0       0       0       0       0       0
  2090 ;;      Totals:         0       0       0       0       0       0       0       0
  2091 ;;Total ram usage:        0 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    7
  2094 ;; This function calls:
  2095 ;;		_EUSART_Initialize
  2096 ;;		_OSCILLATOR_Initialize
  2097 ;;		_PIN_MANAGER_Initialize
  2098 ;;		_WDT_Initialize
  2099 ;; This function is called by:
  2100 ;;		_main
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           
  2105                           ;psect for function _SYSTEM_Initialize
  2106  025A                     _SYSTEM_Initialize:	
  2107                           
  2108                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  2109                           
  2110                           ;incstack = 0
  2111                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2112  025A  3181  21CF  3182   	fcall	_PIN_MANAGER_Initialize
  2113                           
  2114                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  2115  025D  3182  2266  3182   	fcall	_OSCILLATOR_Initialize
  2116                           
  2117                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  2118  0260  3182  2290  3182   	fcall	_WDT_Initialize
  2119                           
  2120                           ;mcc_generated_files/mcc.c: 56:     EUSART_Initialize();
  2121  0263  3180  2041         	fcall	_EUSART_Initialize
  2122  0265  0008               	return
  2123  0266                     __end_of_SYSTEM_Initialize:	
  2124                           
  2125                           	psect	text6
  2126  0290                     __ptext6:	
  2127 ;; *************** function _WDT_Initialize *****************
  2128 ;; Defined at:
  2129 ;;		line 67 in file "mcc_generated_files/mcc.c"
  2130 ;; Parameters:    Size  Location     Type
  2131 ;;		None
  2132 ;; Auto vars:     Size  Location     Type
  2133 ;;		None
  2134 ;; Return value:  Size  Location     Type
  2135 ;;                  1    wreg      void 
  2136 ;; Registers used:
  2137 ;;		wreg
  2138 ;; Tracked objects:
  2139 ;;		On entry : 0/0
  2140 ;;		On exit  : 0/0
  2141 ;;		Unchanged: 0/0
  2142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2143 ;;      Params:         0       0       0       0       0       0       0       0
  2144 ;;      Locals:         0       0       0       0       0       0       0       0
  2145 ;;      Temps:          0       0       0       0       0       0       0       0
  2146 ;;      Totals:         0       0       0       0       0       0       0       0
  2147 ;;Total ram usage:        0 bytes
  2148 ;; Hardware stack levels used:    1
  2149 ;; Hardware stack levels required when called:    5
  2150 ;; This function calls:
  2151 ;;		Nothing
  2152 ;; This function is called by:
  2153 ;;		_SYSTEM_Initialize
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157                           
  2158                           ;psect for function _WDT_Initialize
  2159  0290                     _WDT_Initialize:	
  2160                           
  2161                           ;mcc_generated_files/mcc.c: 70:     WDTCON = 0x16;
  2162                           
  2163                           ;incstack = 0
  2164                           ; Regs used in _WDT_Initialize: [wreg]
  2165  0290  3016               	movlw	22
  2166  0291  0021               	movlb	1	; select bank1
  2167  0292  0097               	movwf	23	;volatile
  2168  0293  0008               	return
  2169  0294                     __end_of_WDT_Initialize:	
  2170                           
  2171                           	psect	text7
  2172  01CF                     __ptext7:	
  2173 ;; *************** function _PIN_MANAGER_Initialize *****************
  2174 ;; Defined at:
  2175 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  2176 ;; Parameters:    Size  Location     Type
  2177 ;;		None
  2178 ;; Auto vars:     Size  Location     Type
  2179 ;;		None
  2180 ;; Return value:  Size  Location     Type
  2181 ;;                  1    wreg      void 
  2182 ;; Registers used:
  2183 ;;		wreg, status,2
  2184 ;; Tracked objects:
  2185 ;;		On entry : 0/0
  2186 ;;		On exit  : 0/0
  2187 ;;		Unchanged: 0/0
  2188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2189 ;;      Params:         0       0       0       0       0       0       0       0
  2190 ;;      Locals:         0       0       0       0       0       0       0       0
  2191 ;;      Temps:          0       0       0       0       0       0       0       0
  2192 ;;      Totals:         0       0       0       0       0       0       0       0
  2193 ;;Total ram usage:        0 bytes
  2194 ;; Hardware stack levels used:    1
  2195 ;; Hardware stack levels required when called:    5
  2196 ;; This function calls:
  2197 ;;		Nothing
  2198 ;; This function is called by:
  2199 ;;		_SYSTEM_Initialize
  2200 ;; This function uses a non-reentrant model
  2201 ;;
  2202                           
  2203                           
  2204                           ;psect for function _PIN_MANAGER_Initialize
  2205  01CF                     _PIN_MANAGER_Initialize:	
  2206                           
  2207                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  2208                           
  2209                           ;incstack = 0
  2210                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  2211  01CF  0022               	movlb	2	; select bank2
  2212  01D0  018C               	clrf	12	;volatile
  2213                           
  2214                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  2215  01D1  018D               	clrf	13	;volatile
  2216                           
  2217                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  2218  01D2  018E               	clrf	14	;volatile
  2219                           
  2220                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3F;
  2221  01D3  303F               	movlw	63
  2222  01D4  0021               	movlb	1	; select bank1
  2223  01D5  008C               	movwf	12	;volatile
  2224                           
  2225                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x70;
  2226  01D6  3070               	movlw	112
  2227  01D7  008D               	movwf	13	;volatile
  2228                           
  2229                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xFF;
  2230  01D8  30FF               	movlw	255
  2231  01D9  008E               	movwf	14	;volatile
  2232                           
  2233                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xFF;
  2234  01DA  30FF               	movlw	255
  2235  01DB  0023               	movlb	3	; select bank3
  2236  01DC  008E               	movwf	14	;volatile
  2237                           
  2238                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x50;
  2239  01DD  3050               	movlw	80
  2240  01DE  008D               	movwf	13	;volatile
  2241                           
  2242                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  2243  01DF  3037               	movlw	55
  2244  01E0  008C               	movwf	12	;volatile
  2245                           
  2246                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  2247  01E1  0024               	movlb	4	; select bank4
  2248  01E2  018D               	clrf	13	;volatile
  2249                           
  2250                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  2251  01E3  018C               	clrf	12	;volatile
  2252                           
  2253                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  2254  01E4  0021               	movlb	1	; select bank1
  2255  01E5  1795               	bsf	21,7	;volatile
  2256                           
  2257                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  2258  01E6  0022               	movlb	2	; select bank2
  2259  01E7  019D               	clrf	29	;volatile
  2260  01E8  0008               	return
  2261  01E9                     __end_of_PIN_MANAGER_Initialize:	
  2262                           
  2263                           	psect	text8
  2264  0266                     __ptext8:	
  2265 ;; *************** function _OSCILLATOR_Initialize *****************
  2266 ;; Defined at:
  2267 ;;		line 59 in file "mcc_generated_files/mcc.c"
  2268 ;; Parameters:    Size  Location     Type
  2269 ;;		None
  2270 ;; Auto vars:     Size  Location     Type
  2271 ;;		None
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      void 
  2274 ;; Registers used:
  2275 ;;		wreg, status,2
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2281 ;;      Params:         0       0       0       0       0       0       0       0
  2282 ;;      Locals:         0       0       0       0       0       0       0       0
  2283 ;;      Temps:          0       0       0       0       0       0       0       0
  2284 ;;      Totals:         0       0       0       0       0       0       0       0
  2285 ;;Total ram usage:        0 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    5
  2288 ;; This function calls:
  2289 ;;		Nothing
  2290 ;; This function is called by:
  2291 ;;		_SYSTEM_Initialize
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           
  2296                           ;psect for function _OSCILLATOR_Initialize
  2297  0266                     _OSCILLATOR_Initialize:	
  2298                           
  2299                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0xF0;
  2300                           
  2301                           ;incstack = 0
  2302                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2303  0266  30F0               	movlw	240
  2304  0267  0021               	movlb	1	; select bank1
  2305  0268  0099               	movwf	25	;volatile
  2306                           
  2307                           ;mcc_generated_files/mcc.c: 64:     BORCON = 0x00;
  2308  0269  0022               	movlb	2	; select bank2
  2309  026A  0196               	clrf	22	;volatile
  2310  026B  0008               	return
  2311  026C                     __end_of_OSCILLATOR_Initialize:	
  2312                           
  2313                           	psect	text9
  2314  0041                     __ptext9:	
  2315 ;; *************** function _EUSART_Initialize *****************
  2316 ;; Defined at:
  2317 ;;		line 88 in file "mcc_generated_files/eusart.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;		None
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;		None
  2322 ;; Return value:  Size  Location     Type
  2323 ;;                  1    wreg      void 
  2324 ;; Registers used:
  2325 ;;		wreg, status,2, status,0, pclath, cstack
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: 0/0
  2330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2331 ;;      Params:         0       0       0       0       0       0       0       0
  2332 ;;      Locals:         0       0       0       0       0       0       0       0
  2333 ;;      Temps:          0       1       0       0       0       0       0       0
  2334 ;;      Totals:         0       1       0       0       0       0       0       0
  2335 ;;Total ram usage:        1 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    6
  2338 ;; This function calls:
  2339 ;;		_EUSART_SetErrorHandler
  2340 ;;		_EUSART_SetFramingErrorHandler
  2341 ;;		_EUSART_SetOverrunErrorHandler
  2342 ;;		_EUSART_SetRxInterruptHandler
  2343 ;;		_EUSART_SetTxInterruptHandler
  2344 ;; This function is called by:
  2345 ;;		_SYSTEM_Initialize
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           
  2350                           ;psect for function _EUSART_Initialize
  2351  0041                     _EUSART_Initialize:	
  2352                           
  2353                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  2354                           
  2355                           ;incstack = 0
  2356                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2357  0041  0021               	movlb	1	; select bank1
  2358  0042  1291               	bcf	17,5	;volatile
  2359                           
  2360                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  2361  0043  30BA               	movlw	low _EUSART_Receive_ISR
  2362  0044  0020               	movlb	0	; select bank0
  2363  0045  00BC               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  2364  0046  3000               	movlw	high _EUSART_Receive_ISR
  2365  0047  00BD               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  2366  0048  3182  2284  3180   	fcall	_EUSART_SetRxInterruptHandler
  2367                           
  2368                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  2369  004B  0021               	movlb	1	; select bank1
  2370  004C  1211               	bcf	17,4	;volatile
  2371                           
  2372                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  2373  004D  30B2               	movlw	low _EUSART_Transmit_ISR
  2374  004E  0020               	movlb	0	; select bank0
  2375  004F  00BC               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  2376  0050  3001               	movlw	high _EUSART_Transmit_ISR
  2377  0051  00BD               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  2378  0052  3182  226C  3180   	fcall	_EUSART_SetTxInterruptHandler
  2379                           
  2380                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  2381  0055  3008               	movlw	8
  2382  0056  0023               	movlb	3	; select bank3
  2383  0057  009F               	movwf	31	;volatile
  2384                           
  2385                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  2386  0058  3090               	movlw	144
  2387  0059  009D               	movwf	29	;volatile
  2388                           
  2389                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  2390  005A  3024               	movlw	36
  2391  005B  009E               	movwf	30	;volatile
  2392                           
  2393                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0x44;
  2394  005C  3044               	movlw	68
  2395  005D  009B               	movwf	27	;volatile
  2396                           
  2397                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;
  2398  005E  019C               	clrf	28	;volatile
  2399                           
  2400                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  2401  005F  309B               	movlw	low _EUSART_DefaultFramingErrorHandler
  2402  0060  0020               	movlb	0	; select bank0
  2403  0061  00BC               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  2404  0062  3002               	movlw	high _EUSART_DefaultFramingErrorHandler
  2405  0063  00BD               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  2406  0064  3182  2278  3180   	fcall	_EUSART_SetFramingErrorHandler
  2407                           
  2408                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  2409  0067  3094               	movlw	low _EUSART_DefaultOverrunErrorHandler
  2410  0068  0020               	movlb	0	; select bank0
  2411  0069  00BC               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  2412  006A  3002               	movlw	high _EUSART_DefaultOverrunErrorHandler
  2413  006B  00BD               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  2414  006C  3182  2272  3180   	fcall	_EUSART_SetOverrunErrorHandler
  2415                           
  2416                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  2417  006F  3098               	movlw	low _EUSART_DefaultErrorHandler
  2418  0070  0020               	movlb	0	; select bank0
  2419  0071  00BC               	movwf	EUSART_SetErrorHandler@interruptHandler
  2420  0072  3002               	movlw	high _EUSART_DefaultErrorHandler
  2421  0073  00BD               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  2422  0074  3182  227E         	fcall	_EUSART_SetErrorHandler
  2423                           
  2424                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  2425  0076  0020               	movlb	0	; select bank0
  2426  0077  01BB               	clrf	_eusartRxLastError	;volatile
  2427                           
  2428                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  2429  0078  01F4               	clrf	_eusartTxHead	;volatile
  2430                           
  2431                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  2432  0079  01F3               	clrf	_eusartTxTail	;volatile
  2433                           
  2434                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  2435  007A  3008               	movlw	8
  2436  007B  00BE               	movwf	??_EUSART_Initialize
  2437  007C  083E               	movf	??_EUSART_Initialize,w
  2438  007D  00D2               	movwf	_eusartTxBufferRemaining	;volatile
  2439                           
  2440                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  2441  007E  01F2               	clrf	_eusartRxHead	;volatile
  2442                           
  2443                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  2444  007F  01F1               	clrf	_eusartRxTail	;volatile
  2445                           
  2446                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  2447  0080  01F0               	clrf	_eusartRxCount	;volatile
  2448                           
  2449                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  2450  0081  0021               	movlb	1	; select bank1
  2451  0082  1691               	bsf	17,5	;volatile
  2452  0083  0008               	return
  2453  0084                     __end_of_EUSART_Initialize:	
  2454                           
  2455                           	psect	text10
  2456  026C                     __ptext10:	
  2457 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  2458 ;; Defined at:
  2459 ;;		line 276 in file "mcc_generated_files/eusart.c"
  2460 ;; Parameters:    Size  Location     Type
  2461 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  2462 ;;		 -> EUSART_Transmit_ISR(1), 
  2463 ;; Auto vars:     Size  Location     Type
  2464 ;;		None
  2465 ;; Return value:  Size  Location     Type
  2466 ;;                  1    wreg      void 
  2467 ;; Registers used:
  2468 ;;		wreg
  2469 ;; Tracked objects:
  2470 ;;		On entry : 0/0
  2471 ;;		On exit  : 0/0
  2472 ;;		Unchanged: 0/0
  2473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2474 ;;      Params:         0       2       0       0       0       0       0       0
  2475 ;;      Locals:         0       0       0       0       0       0       0       0
  2476 ;;      Temps:          0       0       0       0       0       0       0       0
  2477 ;;      Totals:         0       2       0       0       0       0       0       0
  2478 ;;Total ram usage:        2 bytes
  2479 ;; Hardware stack levels used:    1
  2480 ;; Hardware stack levels required when called:    5
  2481 ;; This function calls:
  2482 ;;		Nothing
  2483 ;; This function is called by:
  2484 ;;		_EUSART_Initialize
  2485 ;; This function uses a non-reentrant model
  2486 ;;
  2487                           
  2488                           
  2489                           ;psect for function _EUSART_SetTxInterruptHandler
  2490  026C                     _EUSART_SetTxInterruptHandler:	
  2491                           
  2492                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  2493                           
  2494                           ;incstack = 0
  2495                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  2496  026C  0020               	movlb	0	; select bank0
  2497  026D  083D               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  2498  026E  00D1               	movwf	_EUSART_TxDefaultInterruptHandler+1
  2499  026F  083C               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  2500  0270  00D0               	movwf	_EUSART_TxDefaultInterruptHandler
  2501  0271  0008               	return
  2502  0272                     __end_of_EUSART_SetTxInterruptHandler:	
  2503                           
  2504                           	psect	text11
  2505  0272                     __ptext11:	
  2506 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  2507 ;; Defined at:
  2508 ;;		line 268 in file "mcc_generated_files/eusart.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  2511 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  2512 ;; Auto vars:     Size  Location     Type
  2513 ;;		None
  2514 ;; Return value:  Size  Location     Type
  2515 ;;                  1    wreg      void 
  2516 ;; Registers used:
  2517 ;;		wreg
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2523 ;;      Params:         0       2       0       0       0       0       0       0
  2524 ;;      Locals:         0       0       0       0       0       0       0       0
  2525 ;;      Temps:          0       0       0       0       0       0       0       0
  2526 ;;      Totals:         0       2       0       0       0       0       0       0
  2527 ;;Total ram usage:        2 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    5
  2530 ;; This function calls:
  2531 ;;		Nothing
  2532 ;; This function is called by:
  2533 ;;		_EUSART_Initialize
  2534 ;; This function uses a non-reentrant model
  2535 ;;
  2536                           
  2537                           
  2538                           ;psect for function _EUSART_SetOverrunErrorHandler
  2539  0272                     _EUSART_SetOverrunErrorHandler:	
  2540                           
  2541                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  2542                           
  2543                           ;incstack = 0
  2544                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  2545  0272  0020               	movlb	0	; select bank0
  2546  0273  083D               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  2547  0274  00CB               	movwf	_EUSART_OverrunErrorHandler+1
  2548  0275  083C               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  2549  0276  00CA               	movwf	_EUSART_OverrunErrorHandler
  2550  0277  0008               	return
  2551  0278                     __end_of_EUSART_SetOverrunErrorHandler:	
  2552                           
  2553                           	psect	text12
  2554  0278                     __ptext12:	
  2555 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  2556 ;; Defined at:
  2557 ;;		line 264 in file "mcc_generated_files/eusart.c"
  2558 ;; Parameters:    Size  Location     Type
  2559 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  2560 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;		None
  2563 ;; Return value:  Size  Location     Type
  2564 ;;                  1    wreg      void 
  2565 ;; Registers used:
  2566 ;;		wreg
  2567 ;; Tracked objects:
  2568 ;;		On entry : 0/0
  2569 ;;		On exit  : 0/0
  2570 ;;		Unchanged: 0/0
  2571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2572 ;;      Params:         0       2       0       0       0       0       0       0
  2573 ;;      Locals:         0       0       0       0       0       0       0       0
  2574 ;;      Temps:          0       0       0       0       0       0       0       0
  2575 ;;      Totals:         0       2       0       0       0       0       0       0
  2576 ;;Total ram usage:        2 bytes
  2577 ;; Hardware stack levels used:    1
  2578 ;; Hardware stack levels required when called:    5
  2579 ;; This function calls:
  2580 ;;		Nothing
  2581 ;; This function is called by:
  2582 ;;		_EUSART_Initialize
  2583 ;; This function uses a non-reentrant model
  2584 ;;
  2585                           
  2586                           
  2587                           ;psect for function _EUSART_SetFramingErrorHandler
  2588  0278                     _EUSART_SetFramingErrorHandler:	
  2589                           
  2590                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  2591                           
  2592                           ;incstack = 0
  2593                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  2594  0278  0020               	movlb	0	; select bank0
  2595  0279  083D               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  2596  027A  00CD               	movwf	_EUSART_FramingErrorHandler+1
  2597  027B  083C               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  2598  027C  00CC               	movwf	_EUSART_FramingErrorHandler
  2599  027D  0008               	return
  2600  027E                     __end_of_EUSART_SetFramingErrorHandler:	
  2601                           
  2602                           	psect	text13
  2603  027E                     __ptext13:	
  2604 ;; *************** function _EUSART_SetErrorHandler *****************
  2605 ;; Defined at:
  2606 ;;		line 272 in file "mcc_generated_files/eusart.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  2609 ;;		 -> EUSART_DefaultErrorHandler(1), 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;		None
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  1    wreg      void 
  2614 ;; Registers used:
  2615 ;;		wreg
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2621 ;;      Params:         0       2       0       0       0       0       0       0
  2622 ;;      Locals:         0       0       0       0       0       0       0       0
  2623 ;;      Temps:          0       0       0       0       0       0       0       0
  2624 ;;      Totals:         0       2       0       0       0       0       0       0
  2625 ;;Total ram usage:        2 bytes
  2626 ;; Hardware stack levels used:    1
  2627 ;; Hardware stack levels required when called:    5
  2628 ;; This function calls:
  2629 ;;		Nothing
  2630 ;; This function is called by:
  2631 ;;		_EUSART_Initialize
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           
  2636                           ;psect for function _EUSART_SetErrorHandler
  2637  027E                     _EUSART_SetErrorHandler:	
  2638                           
  2639                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  2640                           
  2641                           ;incstack = 0
  2642                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  2643  027E  0020               	movlb	0	; select bank0
  2644  027F  083D               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  2645  0280  00C9               	movwf	_EUSART_ErrorHandler+1
  2646  0281  083C               	movf	EUSART_SetErrorHandler@interruptHandler,w
  2647  0282  00C8               	movwf	_EUSART_ErrorHandler
  2648  0283  0008               	return
  2649  0284                     __end_of_EUSART_SetErrorHandler:	
  2650                           
  2651                           	psect	text14
  2652  022C                     __ptext14:	
  2653 ;; *************** function _ReadyReceiveBuffer *****************
  2654 ;; Defined at:
  2655 ;;		line 43 in file "uart.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;		None
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;  position        1    1[BANK0 ] unsigned char 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;                  1    wreg      void 
  2662 ;; Registers used:
  2663 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2664 ;; Tracked objects:
  2665 ;;		On entry : 0/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2669 ;;      Params:         0       0       0       0       0       0       0       0
  2670 ;;      Locals:         0       1       0       0       0       0       0       0
  2671 ;;      Temps:          0       1       0       0       0       0       0       0
  2672 ;;      Totals:         0       2       0       0       0       0       0       0
  2673 ;;Total ram usage:        2 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; Hardware stack levels required when called:    5
  2676 ;; This function calls:
  2677 ;;		Nothing
  2678 ;; This function is called by:
  2679 ;;		_main
  2680 ;; This function uses a non-reentrant model
  2681 ;;
  2682                           
  2683                           
  2684                           ;psect for function _ReadyReceiveBuffer
  2685  022C                     _ReadyReceiveBuffer:	
  2686                           
  2687                           ;uart.c: 45:     ResponseIndex = 0;
  2688                           
  2689                           ;incstack = 0
  2690                           ; Regs used in _ReadyReceiveBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  2691  022C  0020               	movlb	0	; select bank0
  2692  022D  01BA               	clrf	_ResponseIndex
  2693                           
  2694                           ;uart.c: 46:     for (uint8_t position = 0; position < 128; position++)
  2695  022E  01BD               	clrf	ReadyReceiveBuffer@position
  2696  022F                     l1422:	
  2697                           
  2698                           ;uart.c: 47:         ResponseBuffer[position] = 0;
  2699  022F  083D               	movf	ReadyReceiveBuffer@position,w
  2700  0230  3E70               	addlw	112
  2701  0231  0086               	movwf	6
  2702  0232  0187               	clrf	7
  2703  0233  3021               	movlw	33
  2704  0234  3D87               	addwfc	7,f
  2705  0235  0181               	clrf	1
  2706  0236  3001               	movlw	1
  2707  0237  00BC               	movwf	??_ReadyReceiveBuffer
  2708  0238  083C               	movf	??_ReadyReceiveBuffer,w
  2709  0239  07BD               	addwf	ReadyReceiveBuffer@position,f
  2710  023A  3080               	movlw	128
  2711  023B  023D               	subwf	ReadyReceiveBuffer@position,w
  2712  023C  1803               	btfsc	3,0
  2713  023D  0008               	return
  2714  023E  2A2F               	goto	l1422
  2715  023F                     __end_of_ReadyReceiveBuffer:	
  2716                           
  2717                           	psect	text15
  2718  023F                     __ptext15:	
  2719 ;; *************** function _INIT_SMART_LIGHT *****************
  2720 ;; Defined at:
  2721 ;;		line 17 in file "uart.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;		None
  2726 ;; Return value:  Size  Location     Type
  2727 ;;                  1    wreg      void 
  2728 ;; Registers used:
  2729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2730 ;; Tracked objects:
  2731 ;;		On entry : 0/0
  2732 ;;		On exit  : 0/0
  2733 ;;		Unchanged: 0/0
  2734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2735 ;;      Params:         0       0       0       0       0       0       0       0
  2736 ;;      Locals:         0       0       0       0       0       0       0       0
  2737 ;;      Temps:          0       0       0       0       0       0       0       0
  2738 ;;      Totals:         0       0       0       0       0       0       0       0
  2739 ;;Total ram usage:        0 bytes
  2740 ;; Hardware stack levels used:    1
  2741 ;; Hardware stack levels required when called:    6
  2742 ;; This function calls:
  2743 ;;		_EUSART_SetRxInterruptHandler
  2744 ;; This function is called by:
  2745 ;;		_main
  2746 ;; This function uses a non-reentrant model
  2747 ;;
  2748                           
  2749                           
  2750                           ;psect for function _INIT_SMART_LIGHT
  2751  023F                     _INIT_SMART_LIGHT:	
  2752                           
  2753                           ;uart.c: 20:     uart[SML].SetRxISR(ReceivedMessage);
  2754                           
  2755                           ;incstack = 0
  2756                           ; Regs used in _INIT_SMART_LIGHT: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2757  023F  30EC               	movlw	low _ReceivedMessage
  2758  0240  0020               	movlb	0	; select bank0
  2759  0241  00BC               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  2760  0242  3000               	movlw	high _ReceivedMessage
  2761  0243  00BD               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  2762  0244  3024               	movlw	low ((_uart+12)| (0+32768))
  2763  0245  0084               	movwf	4
  2764  0246  3082               	movlw	high ((_uart+12)| (0+32768))
  2765  0247  0085               	movwf	5
  2766  0248  3F01               	moviw [1]fsr0
  2767  0249  008A               	movwf	10
  2768  024A  3F00               	moviw [0]fsr0
  2769  024B  000A               	callw
  2770  024C  3182               	pagesel	$
  2771  024D  0008               	return
  2772  024E                     __end_of_INIT_SMART_LIGHT:	
  2773                           
  2774                           	psect	text16
  2775  0284                     __ptext16:	
  2776 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  2777 ;; Defined at:
  2778 ;;		line 280 in file "mcc_generated_files/eusart.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;  interruptHan    2    0[BANK0 ] PTR FTN()void 
  2781 ;;		 -> ReceivedMessage(1), EUSART_Receive_ISR(1), 
  2782 ;; Auto vars:     Size  Location     Type
  2783 ;;		None
  2784 ;; Return value:  Size  Location     Type
  2785 ;;                  1    wreg      void 
  2786 ;; Registers used:
  2787 ;;		wreg
  2788 ;; Tracked objects:
  2789 ;;		On entry : 0/0
  2790 ;;		On exit  : 0/0
  2791 ;;		Unchanged: 0/0
  2792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2793 ;;      Params:         0       2       0       0       0       0       0       0
  2794 ;;      Locals:         0       0       0       0       0       0       0       0
  2795 ;;      Temps:          0       0       0       0       0       0       0       0
  2796 ;;      Totals:         0       2       0       0       0       0       0       0
  2797 ;;Total ram usage:        2 bytes
  2798 ;; Hardware stack levels used:    1
  2799 ;; Hardware stack levels required when called:    5
  2800 ;; This function calls:
  2801 ;;		Nothing
  2802 ;; This function is called by:
  2803 ;;		_EUSART_Initialize
  2804 ;;		_INIT_SMART_LIGHT
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           
  2809                           ;psect for function _EUSART_SetRxInterruptHandler
  2810  0284                     _EUSART_SetRxInterruptHandler:	
  2811                           
  2812                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  2813                           
  2814                           ;incstack = 0
  2815                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  2816  0284  0020               	movlb	0	; select bank0
  2817  0285  083D               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  2818  0286  00CF               	movwf	_EUSART_RxDefaultInterruptHandler+1
  2819  0287  083C               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  2820  0288  00CE               	movwf	_EUSART_RxDefaultInterruptHandler
  2821  0289  0008               	return
  2822  028A                     __end_of_EUSART_SetRxInterruptHandler:	
  2823                           
  2824                           	psect	text17
  2825  028A                     __ptext17:	
  2826 ;; *************** function _GetResponse *****************
  2827 ;; Defined at:
  2828 ;;		line 49 in file "uart.c"
  2829 ;; Parameters:    Size  Location     Type
  2830 ;;		None
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;		None
  2833 ;; Return value:  Size  Location     Type
  2834 ;;                  2    0[BANK0 ] PTR unsigned char 
  2835 ;; Registers used:
  2836 ;;		None
  2837 ;; Tracked objects:
  2838 ;;		On entry : 0/0
  2839 ;;		On exit  : 0/0
  2840 ;;		Unchanged: 0/0
  2841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2842 ;;      Params:         0       2       0       0       0       0       0       0
  2843 ;;      Locals:         0       0       0       0       0       0       0       0
  2844 ;;      Temps:          0       0       0       0       0       0       0       0
  2845 ;;      Totals:         0       2       0       0       0       0       0       0
  2846 ;;Total ram usage:        2 bytes
  2847 ;; Hardware stack levels used:    1
  2848 ;; Hardware stack levels required when called:    5
  2849 ;; This function calls:
  2850 ;;		Nothing
  2851 ;; This function is called by:
  2852 ;;		_main
  2853 ;; This function uses a non-reentrant model
  2854 ;;
  2855                           
  2856                           
  2857                           ;psect for function _GetResponse
  2858  028A                     _GetResponse:	
  2859                           
  2860                           ;uart.c: 51:     return ResponseBuffer;
  2861                           
  2862                           ;incstack = 0
  2863                           ; Regs used in _GetResponse: []
  2864  028A  3021               	movlw	33
  2865  028B  0020               	movlb	0	; select bank0
  2866  028C  00BD               	movwf	?_GetResponse+1
  2867  028D  3070               	movlw	112
  2868  028E  00BC               	movwf	?_GetResponse
  2869  028F  0008               	return
  2870  0290                     __end_of_GetResponse:	
  2871                           
  2872                           	psect	intentry
  2873  0004                     __pintentry:	
  2874 ;; *************** function _INTERRUPT_InterruptManager *****************
  2875 ;; Defined at:
  2876 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;		None
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;		None
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2890 ;;      Params:         0       0       0       0       0       0       0       0
  2891 ;;      Locals:         0       0       0       0       0       0       0       0
  2892 ;;      Temps:          0       0       0       0       0       0       0       0
  2893 ;;      Totals:         0       0       0       0       0       0       0       0
  2894 ;;Total ram usage:        0 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    4
  2897 ;; This function calls:
  2898 ;;		Absolute function
  2899 ;;		_EUSART_Receive_ISR
  2900 ;;		_EUSART_Transmit_ISR
  2901 ;;		_ReceivedMessage
  2902 ;; This function is called by:
  2903 ;;		Interrupt level 1
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907  0004                     _INTERRUPT_InterruptManager:	
  2908                           
  2909                           ;incstack = 0
  2910  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2911                           
  2912                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2913  0005  3180               	pagesel	$
  2914                           
  2915                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  2916  0006  1F0B               	btfss	11,6	;volatile
  2917  0007  281F               	goto	i1l198
  2918                           
  2919                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  2920  0008  0021               	movlb	1	; select bank1
  2921  0009  1E11               	btfss	17,4	;volatile
  2922  000A  2814               	goto	i1l193
  2923  000B  0020               	movlb	0	; select bank0
  2924  000C  1E11               	btfss	17,4	;volatile
  2925  000D  2814               	goto	i1l193
  2926                           
  2927                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
  2928  000E  0851               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  2929  000F  008A               	movwf	10
  2930  0010  0850               	movf	_EUSART_TxDefaultInterruptHandler,w
  2931  0011  000A               	callw
  2932  0012  3180               	pagesel	$
  2933                           
  2934                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  2935  0013  281F               	goto	i1l198
  2936  0014                     i1l193:	
  2937                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  2938                           
  2939  0014  0021               	movlb	1	; select bank1
  2940  0015  1E91               	btfss	17,5	;volatile
  2941  0016  281F               	goto	i1l198
  2942  0017  0020               	movlb	0	; select bank0
  2943  0018  1E91               	btfss	17,5	;volatile
  2944  0019  281F               	goto	i1l198
  2945                           
  2946                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
  2947  001A  084F               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  2948  001B  008A               	movwf	10
  2949  001C  084E               	movf	_EUSART_RxDefaultInterruptHandler,w
  2950  001D  000A               	callw
  2951  001E  3180               	pagesel	$
  2952  001F                     i1l198:	
  2953                           ;mcc_generated_files/interrupt_manager.c: 69:     }
  2954                           
  2955                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  2956                           
  2957  001F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2958  0020  0009               	retfie
  2959  0021                     __end_of_INTERRUPT_InterruptManager:	
  2960                           
  2961                           	psect	text19
  2962  00BA                     __ptext19:	
  2963 ;; *************** function _EUSART_Receive_ISR *****************
  2964 ;; Defined at:
  2965 ;;		line 216 in file "mcc_generated_files/eusart.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;		None
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;		None
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      void 
  2972 ;; Registers used:
  2973 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2979 ;;      Params:         0       0       0       0       0       0       0       0
  2980 ;;      Locals:         0       0       0       0       0       0       0       0
  2981 ;;      Temps:          0       0       0       0       0       0       0       0
  2982 ;;      Totals:         0       0       0       0       0       0       0       0
  2983 ;;Total ram usage:        0 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; Hardware stack levels required when called:    2
  2986 ;; This function calls:
  2987 ;;		Absolute function
  2988 ;;		_EUSART_DefaultErrorHandler
  2989 ;;		_EUSART_DefaultFramingErrorHandler
  2990 ;;		_EUSART_DefaultOverrunErrorHandler
  2991 ;;		_EUSART_RxDataHandler
  2992 ;; This function is called by:
  2993 ;;		_EUSART_Initialize
  2994 ;;		_ReceivedMessage
  2995 ;;		_INTERRUPT_InterruptManager
  2996 ;; This function uses a non-reentrant model
  2997 ;;
  2998                           
  2999                           
  3000                           ;psect for function _EUSART_Receive_ISR
  3001  00BA                     _EUSART_Receive_ISR:	
  3002                           
  3003                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  3004                           
  3005                           ;incstack = 0
  3006                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3007  00BA  0872               	movf	_eusartRxHead,w	;volatile
  3008  00BB  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3009  00BC  0086               	movwf	6
  3010  00BD  0187               	clrf	7
  3011  00BE  0181               	clrf	1
  3012                           
  3013                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
  3014  00BF  0023               	movlb	3	; select bank3
  3015  00C0  1D1D               	btfss	29,2	;volatile
  3016  00C1  28CD               	goto	i1l1186
  3017                           
  3018                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  3019  00C2  0872               	movf	_eusartRxHead,w	;volatile
  3020  00C3  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3021  00C4  0086               	movwf	6
  3022  00C5  0187               	clrf	7
  3023  00C6  1481               	bsf	1,1
  3024                           
  3025                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
  3026  00C7  0020               	movlb	0	; select bank0
  3027  00C8  084D               	movf	_EUSART_FramingErrorHandler+1,w
  3028  00C9  008A               	movwf	10
  3029  00CA  084C               	movf	_EUSART_FramingErrorHandler,w
  3030  00CB  000A               	callw
  3031  00CC  3180               	pagesel	$
  3032  00CD                     i1l1186:	
  3033                           
  3034                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
  3035  00CD  0023               	movlb	3	; select bank3
  3036  00CE  1C9D               	btfss	29,1	;volatile
  3037  00CF  28DB               	goto	i1l1192
  3038                           
  3039                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  3040  00D0  0872               	movf	_eusartRxHead,w	;volatile
  3041  00D1  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3042  00D2  0086               	movwf	6
  3043  00D3  0187               	clrf	7
  3044  00D4  1501               	bsf	1,2
  3045                           
  3046                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
  3047  00D5  0020               	movlb	0	; select bank0
  3048  00D6  084B               	movf	_EUSART_OverrunErrorHandler+1,w
  3049  00D7  008A               	movwf	10
  3050  00D8  084A               	movf	_EUSART_OverrunErrorHandler,w
  3051  00D9  000A               	callw
  3052  00DA  3180               	pagesel	$
  3053  00DB                     i1l1192:	
  3054                           
  3055                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
  3056  00DB  0872               	movf	_eusartRxHead,w	;volatile
  3057  00DC  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3058  00DD  0086               	movwf	6
  3059  00DE  0187               	clrf	7
  3060  00DF  0801               	movf	1,w
  3061  00E0  1903               	btfsc	3,2
  3062  00E1  28E9               	goto	i1l1196
  3063                           
  3064                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
  3065  00E2  0020               	movlb	0	; select bank0
  3066  00E3  0849               	movf	_EUSART_ErrorHandler+1,w
  3067  00E4  008A               	movwf	10
  3068  00E5  0848               	movf	_EUSART_ErrorHandler,w
  3069  00E6  000A               	callw
  3070  00E7  3180               	pagesel	$
  3071                           
  3072                           ;mcc_generated_files/eusart.c: 233:     } else {
  3073  00E8  0008               	return
  3074  00E9                     i1l1196:	
  3075                           
  3076                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
  3077  00E9  3182  2202         	fcall	_EUSART_RxDataHandler
  3078  00EB  0008               	return
  3079  00EC                     __end_of_EUSART_Receive_ISR:	
  3080                           
  3081                           	psect	text20
  3082  00EC                     __ptext20:	
  3083 ;; *************** function _ReceivedMessage *****************
  3084 ;; Defined at:
  3085 ;;		line 33 in file "uart.c"
  3086 ;; Parameters:    Size  Location     Type
  3087 ;;		None
  3088 ;; Auto vars:     Size  Location     Type
  3089 ;;  readByte        1    4[COMMON] unsigned char 
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  1    wreg      void 
  3092 ;; Registers used:
  3093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3099 ;;      Params:         0       0       0       0       0       0       0       0
  3100 ;;      Locals:         1       0       0       0       0       0       0       0
  3101 ;;      Temps:          2       0       0       0       0       0       0       0
  3102 ;;      Totals:         3       0       0       0       0       0       0       0
  3103 ;;Total ram usage:        3 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    3
  3106 ;; This function calls:
  3107 ;;		_EUSART_Read
  3108 ;;		_EUSART_Receive_ISR
  3109 ;; This function is called by:
  3110 ;;		_INIT_SMART_LIGHT
  3111 ;;		_INTERRUPT_InterruptManager
  3112 ;; This function uses a non-reentrant model
  3113 ;;
  3114                           
  3115                           
  3116                           ;psect for function _ReceivedMessage
  3117  00EC                     _ReceivedMessage:	
  3118                           
  3119                           ;uart.c: 35:     uart[SML].RxDefaultISR();
  3120                           
  3121                           ;incstack = 0
  3122                           ; Regs used in _ReceivedMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3123  00EC  3022               	movlw	low ((_uart+10)| (0+32768))
  3124  00ED  0084               	movwf	4
  3125  00EE  3082               	movlw	high ((_uart+10)| (0+32768))
  3126  00EF  0085               	movwf	5
  3127  00F0  3F01               	moviw [1]fsr0
  3128  00F1  008A               	movwf	10
  3129  00F2  3F00               	moviw [0]fsr0
  3130  00F3  000A               	callw
  3131  00F4  3180               	pagesel	$
  3132                           
  3133                           ;uart.c: 36:     uint8_t readByte = uart[SML].Read();
  3134  00F5  3018               	movlw	low (_uart| (0+32768))
  3135  00F6  0084               	movwf	4
  3136  00F7  3082               	movlw	high (_uart| (0+32768))
  3137  00F8  0085               	movwf	5
  3138  00F9  3F01               	moviw [1]fsr0
  3139  00FA  008A               	movwf	10
  3140  00FB  3F00               	moviw [0]fsr0
  3141  00FC  000A               	callw
  3142  00FD  3180               	pagesel	$
  3143  00FE  00F7               	movwf	??_ReceivedMessage
  3144  00FF  0877               	movf	??_ReceivedMessage,w
  3145  0100  00F9               	movwf	ReceivedMessage@readByte
  3146                           
  3147                           ;uart.c: 37:     if ( (readByte != '\0') && (ResponseIndex < 128) )
  3148  0101  0879               	movf	ReceivedMessage@readByte,w
  3149  0102  1903               	btfsc	3,2
  3150  0103  0008               	return
  3151  0104  3080               	movlw	128
  3152  0105  0020               	movlb	0	; select bank0
  3153  0106  023A               	subwf	_ResponseIndex,w
  3154  0107  1803               	skipnc
  3155  0108  0008               	return
  3156                           
  3157                           ;uart.c: 38:         ResponseBuffer[ResponseIndex++] = readByte;
  3158  0109  083A               	movf	_ResponseIndex,w
  3159  010A  3E70               	addlw	112
  3160  010B  00F7               	movwf	??_ReceivedMessage
  3161  010C  01F8               	clrf	??_ReceivedMessage+1
  3162  010D  3021               	movlw	33
  3163  010E  3DF8               	addwfc	??_ReceivedMessage+1,f
  3164  010F  0877               	movf	??_ReceivedMessage,w
  3165  0110  0086               	movwf	6
  3166  0111  0878               	movf	??_ReceivedMessage+1,w
  3167  0112  0087               	movwf	7
  3168  0113  0879               	movf	ReceivedMessage@readByte,w
  3169  0114  0081               	movwf	1
  3170  0115  3001               	movlw	1
  3171  0116  00F7               	movwf	??_ReceivedMessage
  3172  0117  0877               	movf	??_ReceivedMessage,w
  3173  0118  07BA               	addwf	_ResponseIndex,f
  3174  0119  0008               	return
  3175  011A                     __end_of_ReceivedMessage:	
  3176                           
  3177                           	psect	text21
  3178  0294                     __ptext21:	
  3179 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  3180 ;; Defined at:
  3181 ;;		line 252 in file "mcc_generated_files/eusart.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;		None
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;		None
  3186 ;; Return value:  Size  Location     Type
  3187 ;;                  1    wreg      void 
  3188 ;; Registers used:
  3189 ;;		None
  3190 ;; Tracked objects:
  3191 ;;		On entry : 0/0
  3192 ;;		On exit  : 0/0
  3193 ;;		Unchanged: 0/0
  3194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3195 ;;      Params:         0       0       0       0       0       0       0       0
  3196 ;;      Locals:         0       0       0       0       0       0       0       0
  3197 ;;      Temps:          0       0       0       0       0       0       0       0
  3198 ;;      Totals:         0       0       0       0       0       0       0       0
  3199 ;;Total ram usage:        0 bytes
  3200 ;; Hardware stack levels used:    1
  3201 ;; This function calls:
  3202 ;;		Nothing
  3203 ;; This function is called by:
  3204 ;;		_EUSART_Initialize
  3205 ;;		_EUSART_Receive_ISR
  3206 ;; This function uses a non-reentrant model
  3207 ;;
  3208                           
  3209                           
  3210                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  3211  0294                     _EUSART_DefaultOverrunErrorHandler:	
  3212                           
  3213                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
  3214                           
  3215                           ;incstack = 0
  3216                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  3217  0294  0023               	movlb	3	; select bank3
  3218  0295  121D               	bcf	29,4	;volatile
  3219                           
  3220                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
  3221  0296  161D               	bsf	29,4	;volatile
  3222  0297  0008               	return
  3223  0298                     __end_of_EUSART_DefaultOverrunErrorHandler:	
  3224                           
  3225                           	psect	text22
  3226  029B                     __ptext22:	
  3227 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  3228 ;; Defined at:
  3229 ;;		line 250 in file "mcc_generated_files/eusart.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;		None
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		None
  3238 ;; Tracked objects:
  3239 ;;		On entry : 0/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3243 ;;      Params:         0       0       0       0       0       0       0       0
  3244 ;;      Locals:         0       0       0       0       0       0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0
  3246 ;;      Totals:         0       0       0       0       0       0       0       0
  3247 ;;Total ram usage:        0 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; This function calls:
  3250 ;;		Nothing
  3251 ;; This function is called by:
  3252 ;;		_EUSART_Initialize
  3253 ;;		_EUSART_Receive_ISR
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           
  3258                           ;psect for function _EUSART_DefaultFramingErrorHandler
  3259  029B                     _EUSART_DefaultFramingErrorHandler:	
  3260                           
  3261                           ;incstack = 0
  3262                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  3263  029B  0008               	return
  3264  029C                     __end_of_EUSART_DefaultFramingErrorHandler:	
  3265                           
  3266                           	psect	text23
  3267  0298                     __ptext23:	
  3268 ;; *************** function _EUSART_DefaultErrorHandler *****************
  3269 ;; Defined at:
  3270 ;;		line 260 in file "mcc_generated_files/eusart.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;		None
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3284 ;;      Params:         0       0       0       0       0       0       0       0
  3285 ;;      Locals:         0       0       0       0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0       0
  3287 ;;      Totals:         0       0       0       0       0       0       0       0
  3288 ;;Total ram usage:        0 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    1
  3291 ;; This function calls:
  3292 ;;		_EUSART_RxDataHandler
  3293 ;; This function is called by:
  3294 ;;		_EUSART_Initialize
  3295 ;;		_EUSART_Receive_ISR
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           
  3300                           ;psect for function _EUSART_DefaultErrorHandler
  3301  0298                     _EUSART_DefaultErrorHandler:	
  3302                           
  3303                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
  3304                           
  3305                           ;incstack = 0
  3306                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3307  0298  3182  2202         	fcall	_EUSART_RxDataHandler
  3308  029A  0008               	return
  3309  029B                     __end_of_EUSART_DefaultErrorHandler:	
  3310                           
  3311                           	psect	text24
  3312  0202                     __ptext24:	
  3313 ;; *************** function _EUSART_RxDataHandler *****************
  3314 ;; Defined at:
  3315 ;;		line 240 in file "mcc_generated_files/eusart.c"
  3316 ;; Parameters:    Size  Location     Type
  3317 ;;		None
  3318 ;; Auto vars:     Size  Location     Type
  3319 ;;		None
  3320 ;; Return value:  Size  Location     Type
  3321 ;;                  1    wreg      void 
  3322 ;; Registers used:
  3323 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3324 ;; Tracked objects:
  3325 ;;		On entry : 0/0
  3326 ;;		On exit  : 0/0
  3327 ;;		Unchanged: 0/0
  3328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3329 ;;      Params:         0       0       0       0       0       0       0       0
  3330 ;;      Locals:         0       0       0       0       0       0       0       0
  3331 ;;      Temps:          1       0       0       0       0       0       0       0
  3332 ;;      Totals:         1       0       0       0       0       0       0       0
  3333 ;;Total ram usage:        1 bytes
  3334 ;; Hardware stack levels used:    1
  3335 ;; This function calls:
  3336 ;;		Nothing
  3337 ;; This function is called by:
  3338 ;;		_EUSART_Receive_ISR
  3339 ;;		_EUSART_DefaultErrorHandler
  3340 ;; This function uses a non-reentrant model
  3341 ;;
  3342                           
  3343                           
  3344                           ;psect for function _EUSART_RxDataHandler
  3345  0202                     _EUSART_RxDataHandler:	
  3346                           
  3347                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
  3348                           
  3349                           ;incstack = 0
  3350                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  3351  0202  0023               	movlb	3	; select bank3
  3352  0203  0819               	movf	25,w	;volatile
  3353  0204  00F5               	movwf	??_EUSART_RxDataHandler
  3354  0205  0872               	movf	_eusartRxHead,w
  3355  0206  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  3356  0207  0086               	movwf	6
  3357  0208  0187               	clrf	7
  3358  0209  0875               	movf	??_EUSART_RxDataHandler,w
  3359  020A  0081               	movwf	1
  3360  020B  3001               	movlw	1
  3361  020C  00F5               	movwf	??_EUSART_RxDataHandler
  3362  020D  0875               	movf	??_EUSART_RxDataHandler,w
  3363  020E  07F2               	addwf	_eusartRxHead,f	;volatile
  3364                           
  3365                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  3366  020F  3008               	movlw	8
  3367  0210  0272               	subwf	_eusartRxHead,w	;volatile
  3368  0211  1803               	btfsc	3,0
  3369                           
  3370                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
  3371  0212  01F2               	clrf	_eusartRxHead	;volatile
  3372                           
  3373                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
  3374  0213  3001               	movlw	1
  3375  0214  00F5               	movwf	??_EUSART_RxDataHandler
  3376  0215  0875               	movf	??_EUSART_RxDataHandler,w
  3377  0216  07F0               	addwf	_eusartRxCount,f	;volatile
  3378  0217  0008               	return
  3379  0218                     __end_of_EUSART_RxDataHandler:	
  3380                           
  3381                           	psect	text25
  3382  018F                     __ptext25:	
  3383 ;; *************** function _EUSART_Read *****************
  3384 ;; Defined at:
  3385 ;;		line 151 in file "mcc_generated_files/eusart.c"
  3386 ;; Parameters:    Size  Location     Type
  3387 ;;		None
  3388 ;; Auto vars:     Size  Location     Type
  3389 ;;  readValue       1    1[COMMON] unsigned char 
  3390 ;; Return value:  Size  Location     Type
  3391 ;;                  1    wreg      unsigned char 
  3392 ;; Registers used:
  3393 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3394 ;; Tracked objects:
  3395 ;;		On entry : 0/0
  3396 ;;		On exit  : 0/0
  3397 ;;		Unchanged: 0/0
  3398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3399 ;;      Params:         0       0       0       0       0       0       0       0
  3400 ;;      Locals:         1       0       0       0       0       0       0       0
  3401 ;;      Temps:          1       0       0       0       0       0       0       0
  3402 ;;      Totals:         2       0       0       0       0       0       0       0
  3403 ;;Total ram usage:        2 bytes
  3404 ;; Hardware stack levels used:    1
  3405 ;; This function calls:
  3406 ;;		Nothing
  3407 ;; This function is called by:
  3408 ;;		_ReceivedMessage
  3409 ;; This function uses a non-reentrant model
  3410 ;;
  3411                           
  3412                           
  3413                           ;psect for function _EUSART_Read
  3414  018F                     _EUSART_Read:	
  3415  018F                     i1l1140:	
  3416                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  3417                           
  3418                           ;incstack = 0
  3419                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  3420                           
  3421                           
  3422                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  3423  018F  0870               	movf	_eusartRxCount,w	;volatile
  3424  0190  1903               	btfsc	3,2
  3425  0191  298F               	goto	i1l1140
  3426                           
  3427                           ;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  3428  0192  0871               	movf	_eusartRxTail,w	;volatile
  3429  0193  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3430  0194  0086               	movwf	6
  3431  0195  0187               	clrf	7
  3432  0196  0801               	movf	1,w
  3433  0197  00F5               	movwf	??_EUSART_Read
  3434  0198  0875               	movf	??_EUSART_Read,w
  3435  0199  0020               	movlb	0	; select bank0
  3436  019A  00BB               	movwf	_eusartRxLastError	;volatile
  3437                           
  3438                           ;mcc_generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];
  3439  019B  0871               	movf	_eusartRxTail,w
  3440  019C  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  3441  019D  0086               	movwf	6
  3442  019E  0187               	clrf	7
  3443  019F  0801               	movf	1,w
  3444  01A0  00F5               	movwf	??_EUSART_Read
  3445  01A1  0875               	movf	??_EUSART_Read,w
  3446  01A2  00F6               	movwf	EUSART_Read@readValue
  3447  01A3  3001               	movlw	1
  3448  01A4  00F5               	movwf	??_EUSART_Read
  3449  01A5  0875               	movf	??_EUSART_Read,w
  3450  01A6  07F1               	addwf	_eusartRxTail,f	;volatile
  3451                           
  3452                           ;mcc_generated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  3453  01A7  3008               	movlw	8
  3454  01A8  0271               	subwf	_eusartRxTail,w	;volatile
  3455  01A9  1803               	btfsc	3,0
  3456                           
  3457                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:         eus
      +                          artRxTail = 0;
  3458  01AA  01F1               	clrf	_eusartRxTail	;volatile
  3459                           
  3460                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 0;
  3461  01AB  0021               	movlb	1	; select bank1
  3462  01AC  1291               	bcf	17,5	;volatile
  3463                           
  3464                           ;mcc_generated_files/eusart.c: 167:     eusartRxCount--;
  3465  01AD  3001               	movlw	1
  3466  01AE  02F0               	subwf	_eusartRxCount,f	;volatile
  3467                           
  3468                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.RCIE = 1;
  3469  01AF  1691               	bsf	17,5	;volatile
  3470                           
  3471                           ;mcc_generated_files/eusart.c: 170:     return readValue;
  3472  01B0  0876               	movf	EUSART_Read@readValue,w
  3473  01B1  0008               	return
  3474  01B2                     __end_of_EUSART_Read:	
  3475                           
  3476                           	psect	text26
  3477  01B2                     __ptext26:	
  3478 ;; *************** function _EUSART_Transmit_ISR *****************
  3479 ;; Defined at:
  3480 ;;		line 197 in file "mcc_generated_files/eusart.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;		None
  3483 ;; Auto vars:     Size  Location     Type
  3484 ;;		None
  3485 ;; Return value:  Size  Location     Type
  3486 ;;                  1    wreg      void 
  3487 ;; Registers used:
  3488 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3494 ;;      Params:         0       0       0       0       0       0       0       0
  3495 ;;      Locals:         0       0       0       0       0       0       0       0
  3496 ;;      Temps:          1       0       0       0       0       0       0       0
  3497 ;;      Totals:         1       0       0       0       0       0       0       0
  3498 ;;Total ram usage:        1 bytes
  3499 ;; Hardware stack levels used:    1
  3500 ;; This function calls:
  3501 ;;		Nothing
  3502 ;; This function is called by:
  3503 ;;		_EUSART_Initialize
  3504 ;;		_INTERRUPT_InterruptManager
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           
  3509                           ;psect for function _EUSART_Transmit_ISR
  3510  01B2                     _EUSART_Transmit_ISR:	
  3511                           
  3512                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  3513                           
  3514                           ;incstack = 0
  3515                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  3516  01B2  3008               	movlw	8
  3517  01B3  0020               	movlb	0	; select bank0
  3518  01B4  0252               	subwf	_eusartTxBufferRemaining,w	;volatile
  3519  01B5  1803               	skipnc
  3520  01B6  29CC               	goto	i1l106
  3521                           
  3522                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  3523  01B7  0873               	movf	_eusartTxTail,w
  3524  01B8  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  3525  01B9  0086               	movwf	6
  3526  01BA  0187               	clrf	7
  3527  01BB  0801               	movf	1,w
  3528  01BC  0023               	movlb	3	; select bank3
  3529  01BD  009A               	movwf	26	;volatile
  3530  01BE  3001               	movlw	1
  3531  01BF  00F5               	movwf	??_EUSART_Transmit_ISR
  3532  01C0  0875               	movf	??_EUSART_Transmit_ISR,w
  3533  01C1  07F3               	addwf	_eusartTxTail,f	;volatile
  3534                           
  3535                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  3536  01C2  3008               	movlw	8
  3537  01C3  0273               	subwf	_eusartTxTail,w	;volatile
  3538  01C4  1803               	btfsc	3,0
  3539                           
  3540                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
  3541  01C5  01F3               	clrf	_eusartTxTail	;volatile
  3542                           
  3543                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
  3544  01C6  3001               	movlw	1
  3545  01C7  00F5               	movwf	??_EUSART_Transmit_ISR
  3546  01C8  0875               	movf	??_EUSART_Transmit_ISR,w
  3547  01C9  0020               	movlb	0	; select bank0
  3548  01CA  07D2               	addwf	_eusartTxBufferRemaining,f	;volatile
  3549                           
  3550                           ;mcc_generated_files/eusart.c: 209:     }
  3551  01CB  0008               	return
  3552  01CC                     i1l106:	
  3553                           ;mcc_generated_files/eusart.c: 210:     else
  3554                           
  3555                           
  3556                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
  3557  01CC  0021               	movlb	1	; select bank1
  3558  01CD  1211               	bcf	17,4	;volatile
  3559  01CE  0008               	return
  3560  01CF                     __end_of_EUSART_Transmit_ISR:	
  3561  007E                     btemp	set	126	;btemp
  3562  007E                     int$flags	set	126
  3563  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    20
    Data        0
    BSS         33
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     12      51
    BANK1            80      0       0
    BANK2            80      0       0
    BANK3             0      0       0
    BANK4             0      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    S501$4$0	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S501$6$0	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), EUSART_Receive_ISR(), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 128
		 -> ReadStorage(BIGRAM[128]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 128
		 -> ReadStorage(BIGRAM[128]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 128
		 -> ResponseBuffer(BIGRAM[128]), NULL(NULL[0]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 128
		 -> ResponseBuffer(BIGRAM[128]), NULL(NULL[0]), 

    SendString@command	PTR const unsigned char  size(2) Largest target is 128
		 -> ReadStorage(BIGRAM[128]), 

    S501$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    uart.Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    S501$TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    uart.TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S501$TransmitDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    uart.TransmitDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    S501$SetRxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    uart.SetRxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    S501$RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    uart.RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    S501$SetTxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    uart.SetTxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    S501$DataReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    uart.DataReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    S501$TransmitReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    uart.TransmitReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    S501$Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    uart.Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    S501$Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    uart.Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 128
		 -> ReadStorage(BIGRAM[128]), 

    sp__GetResponse	PTR unsigned char  size(2) Largest target is 128
		 -> ResponseBuffer(BIGRAM[128]), 

    rxData	PTR unsigned char  size(2) Largest target is 128
		 -> ResponseBuffer(BIGRAM[128]), NULL(NULL[0]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), ReceivedMessage(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_ReceivedMessage
    _ReceivedMessage->_EUSART_Read
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_strcpy
    _SendString->_EUSART_Write
    _SYSTEM_Initialize->_EUSART_Initialize
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _INIT_SMART_LIGHT->_EUSART_SetRxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    1777
                        _GetResponse
                   _INIT_SMART_LIGHT
                 _ReadyReceiveBuffer
                  _SYSTEM_Initialize
                         _SendString
                       _blockingWait
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                              12     8      4     317
                                              0 BANK0     12     8      4
 ---------------------------------------------------------------------------------
 (1) _blockingWait                                         5     3      2     158
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _SendString                                           3     1      2     347
                                              2 BANK0      3     1      2
                       _EUSART_Write *
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     1      1     192
                                              0 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     670
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     670
                                              2 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2     121
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _ReadyReceiveBuffer                                   2     2      0      99
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _INIT_SMART_LIGHT                                     0     0      0     186
       _EUSART_SetRxInterruptHandler *
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     186
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _GetResponse                                          2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0      69
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _ReceivedMessage *
 ---------------------------------------------------------------------------------
 (5) _ReceivedMessage                                      3     3      0      69
                                              2 COMMON     3     3      0
                        _EUSART_Read *
                 _EUSART_Receive_ISR *
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Read                                          2     2      0      24
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetResponse
   _INIT_SMART_LIGHT
     _EUSART_SetRxInterruptHandler *
   _ReadyReceiveBuffer
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   _SendString
     _EUSART_Write *
   _blockingWait
   _strcpy

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _ReceivedMessage *
     _EUSART_Read *
     _EUSART_Receive_ISR *
       Absolute function(Fake) *
       _EUSART_DefaultErrorHandler *
         _EUSART_RxDataHandler
       _EUSART_DefaultFramingErrorHandler *
       _EUSART_DefaultOverrunErrorHandler *
       _EUSART_RxDataHandler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      5       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3D       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      C      33       6       63.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK3                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK4                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      3D      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Mon Nov 04 16:18:13 2019

                ?_EUSART_SetRxInterruptHandler 003C                                    __CFG_CP$OFF 0000  
                                  __CFG_LVP$ON 0000                                            l100 0178  
                                          l309 01EC                                            u505 01F2  
                                          u557 01F8                         ??_EUSART_RxDataHandler 0075  
               ?_EUSART_SetFramingErrorHandler 003C                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                   ?_EUSART_Read 0075  
                                         l1412 011A                                           l1404 0150  
                                         l1422 022F                                           l1414 0139  
                                         l1354 016C                                           l1436 008C  
                                         l1368 018C                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                          __end_of_GetResponse 0290                                           _WPUA 020C  
                                         _WPUB 020D                                   __CFG_WRT$OFF 0000  
                                         _main 0084                                           _uart 0218  
                                         fsr0h 0005                                           fsr1h 0007  
                                         indf0 0000                                           fsr0l 0004  
                                         indf1 0001                                           fsr1l 0006  
                                         btemp 007E                                  __CFG_BOREN$ON 0000  
                                         start 0021                               _INIT_SMART_LIGHT 023F  
                                __CFG_MCLRE$ON 0000                                _ReceivedMessage 00EC  
                                ?_EUSART_Write 003C                 __size_of_OSCILLATOR_Initialize 0006  
                __end_of_OSCILLATOR_Initialize 026C                                          ?_main 0075  
                                __CFG_WDTE$OFF 0000                                          i1l106 01CC  
                                        i1l193 0014                                          i1l198 001F  
                                        _RCREG 0199                                          _RCSTA 019D  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _TXREG 019A  
                                        _TXSTA 019E                                 _WDT_Initialize 0290  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                                __initialization 0023  
                                 __end_of_main 00BA                                   __end_of_uart 022C  
                               ??_EUSART_Write 003D                                 __CFG_LPBOR$OFF 0000  
                  ?_INTERRUPT_InterruptManager 0075                           __end_of_blockingWait 0202  
               ??_EUSART_SetRxInterruptHandler 003E                                         ??_main 0048  
                                  _GetResponse 028A                         __end_of_WDT_Initialize 0294  
    __end_of_EUSART_DefaultFramingErrorHandler 029C     __size_of_EUSART_DefaultFramingErrorHandler 0001  
          ??_EUSART_DefaultFramingErrorHandler 0075             ?_EUSART_DefaultFramingErrorHandler 0075  
            _EUSART_DefaultFramingErrorHandler 029B                     _EUSART_OverrunErrorHandler 004A  
                                       _APFCON 011D                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                                       _BORCON 0116                                         i1l1140 018F  
                                       i1l1192 00DB                                         i1l1186 00CD  
                                       i1l1196 00E9                             _ReadyReceiveBuffer 022C  
                                   _SendString 011A                                         _OSCCON 0099  
                                       _SPBRGH 019C                                         _SPBRGL 019B  
                                       _WDTCON 0097                                 __CFG_PWRTE$OFF 0000  
                      __end_of_ReceivedMessage 011A                            ?_ReadyReceiveBuffer 0075  
                               __CFG_STVREN$ON 0000                            _EUSART_Transmit_ISR 01B2  
                                       _rxData 0038                                         _strcpy 0147  
                         ??_ReadyReceiveBuffer 003C                                ?_WDT_Initialize 0075  
                         ?_EUSART_Transmit_ISR 0075                           __size_of_EUSART_Read 0023  
                            _SYSTEM_Initialize 025A                        __end_of__initialization 003D  
                           ?_SYSTEM_Initialize 0075           __end_of_EUSART_SetTxInterruptHandler 0272  
        __size_of_EUSART_SetTxInterruptHandler 0006                   _EUSART_SetTxInterruptHandler 026C  
                      ReceivedMessage@readByte 0079                                 __pcstackCOMMON 0075  
                          ??_SYSTEM_Initialize 003F                                    _ReadStorage 20F0  
                               _OPTION_REGbits 0095                           _eusartRxStatusBuffer 0020  
                     __end_of_INIT_SMART_LIGHT 024E                ??_EUSART_SetOverrunErrorHandler 003E  
                    __end_of_SYSTEM_Initialize 0266                          ??_EUSART_Transmit_ISR 0075  
                               _ResponseBuffer 2170                                     __pbssBANK0 0020  
                                  ?_SendString 003E                           __end_of_EUSART_Write 018F  
                  __size_of_EUSART_Receive_ISR 0032                               ?_ReceivedMessage 0075  
                                   __pmaintext 0084                          __size_of_blockingWait 0019  
                ?_EUSART_SetTxInterruptHandler 003C               _EUSART_TxDefaultInterruptHandler 0050  
                                   __pintentry 0004                                        _BAUDCON 019F  
                 ??_EUSART_DefaultErrorHandler 0076                                        ?_strcpy 003C  
                                _eusartRxCount 0070                  __size_of_EUSART_RxDataHandler 0016  
                     ??_EUSART_SetErrorHandler 003E                              SendString@command 003E  
                                 _blockingWait 01E9            __size_of_EUSART_DefaultErrorHandler 0003  
                          __size_of_SendString 002D                                        __ptext1 0147  
                                      __ptext2 01E9                                        __ptext3 011A  
                                      __ptext4 016C                                        __ptext5 025A  
                                      __ptext6 0290                                        __ptext7 01CF  
                                      __ptext8 0266                                        __ptext9 0041  
                              __size_of_strcpy 0025                          _OSCILLATOR_Initialize 0266  
                                 ?_GetResponse 003C                       ??_PIN_MANAGER_Initialize 003C  
                   __size_of_SYSTEM_Initialize 000C                                        clrloop0 024F  
                         end_of_initialization 003D          __end_of_EUSART_SetOverrunErrorHandler 0278  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 0272  
                            _EUSART_Initialize 0041                             ?_EUSART_Initialize 0075  
                                    _RCSTAbits 019D                             _EUSART_is_rx_ready 0000  
                           _EUSART_is_tx_ready 0000                                        strcpy@d 0046  
                                      strcpy@s 0044                            ??_EUSART_Initialize 003E  
                             ??_WDT_Initialize 003C                 ??_EUSART_SetTxInterruptHandler 003E  
                             __CFG_FOSC$INTOSC 0000                          __size_of_EUSART_Write 0023  
              __size_of_EUSART_SetErrorHandler 0006                      __end_of_EUSART_Initialize 0084  
                                    _TXSTAbits 019E             __end_of_EUSART_DefaultErrorHandler 029B  
                   _EUSART_DefaultErrorHandler 0298                                   _EUSART_Write 016C  
                       ?_OSCILLATOR_Initialize 0075                                 __end_of_strcpy 016C  
                          start_initialization 0023                    __size_of_ReadyReceiveBuffer 0013  
                            ?_INIT_SMART_LIGHT 0075                __size_of_PIN_MANAGER_Initialize 001A  
                                ??_EUSART_Read 0075   EUSART_SetRxInterruptHandler@interruptHandler 003C  
 EUSART_SetTxInterruptHandler@interruptHandler 003C                             ??_INIT_SMART_LIGHT 003E  
                                 ??_SendString 0040                 ?_EUSART_SetOverrunErrorHandler 003C  
                   _EUSART_FramingErrorHandler 004C                         _EUSART_SetErrorHandler 027E  
                                     ??_strcpy 0040                             __end_of_SendString 0147  
                                  __pbssBIGRAM 20F0                    __end_of_EUSART_Transmit_ISR 01CF  
                                  __pbssCOMMON 0070                                      ___latbits 0002  
                                __pcstackBANK0 003C                           __size_of_GetResponse 0006  
                   ReadyReceiveBuffer@position 003D                     __end_of_EUSART_Receive_ISR 00EC  
                   __size_of_EUSART_Initialize 0043               _EUSART_RxDefaultInterruptHandler 004E  
                          __end_of_EUSART_Read 01B2                                  _ResponseIndex 003A  
                                    __pnvBANK0 0048                   __end_of_EUSART_RxDataHandler 0218  
                       _PIN_MANAGER_Initialize 01CF                           EUSART_Read@readValue 0076  
                                 _eusartRxHead 0072                                   _eusartTxHead 0074  
                                 _eusartRxTail 0071                                   _eusartTxTail 0073  
                     __size_of_ReceivedMessage 002E                   ??_INTERRUPT_InterruptManager 007A  
                      _eusartTxBufferRemaining 0052                                 _eusartRxBuffer 0028  
                               _eusartTxBuffer 0030         EUSART_SetErrorHandler@interruptHandler 003C  
                                    clear_ram0 024E                                       _PIE1bits 0091  
                            _eusartRxLastError 003B                            blockingWait@counter 003F  
          __size_of_INTERRUPT_InterruptManager 001D                                       _PIR1bits 0011  
              ??_EUSART_SetFramingErrorHandler 003E                              _EUSART_is_tx_done 0000  
    __end_of_EUSART_DefaultOverrunErrorHandler 0298     __size_of_EUSART_DefaultOverrunErrorHandler 0004  
          ??_EUSART_DefaultOverrunErrorHandler 0075             ?_EUSART_DefaultOverrunErrorHandler 0075  
            _EUSART_DefaultOverrunErrorHandler 0294                                    _EUSART_Read 018F  
                      ??_OSCILLATOR_Initialize 003C                            _EUSART_ErrorHandler 0048  
                  ?_EUSART_DefaultErrorHandler 0075                              ??_ReceivedMessage 0077  
                         _EUSART_RxDataHandler 0202                                       __ptext10 026C  
                                     __ptext11 0272                                       __ptext20 00EC  
                                     __ptext12 0278                                       __ptext21 0294  
                                     __ptext13 027E                                       __ptext22 029B  
                                     __ptext14 022C                                       __ptext23 0298  
                                     __ptext15 023F                                       __ptext24 0202  
                                     __ptext16 0284                                       __ptext25 018F  
                                     __ptext17 028A                                       __ptext26 01B2  
                                     __ptext19 00BA                                     strcpy@dest 003C  
                                __size_of_main 0036                        ?_EUSART_SetErrorHandler 003C  
                    __size_of_INIT_SMART_LIGHT 000F  EUSART_SetOverrunErrorHandler@interruptHandler 003C  
                                     int$flags 007E             __end_of_INTERRUPT_InterruptManager 0021  
                   _INTERRUPT_InterruptManager 0004          __end_of_EUSART_SetFramingErrorHandler 027E  
       __size_of_EUSART_SetFramingErrorHandler 0006                  _EUSART_SetFramingErrorHandler 0278  
                   __end_of_ReadyReceiveBuffer 023F                                     _INTCONbits 000B  
                        ?_EUSART_RxDataHandler 0075                        __size_of_WDT_Initialize 0004  
                                     intlevel1 0000                                  ?_blockingWait 003C  
                      ?_PIN_MANAGER_Initialize 0075                 __end_of_EUSART_SetErrorHandler 0284  
                            __CFG_CLKOUTEN$OFF 0000                                      strcpy@src 003E  
         __end_of_EUSART_SetRxInterruptHandler 028A          __size_of_EUSART_SetRxInterruptHandler 0006  
                 _EUSART_SetRxInterruptHandler 0284                              blockingWait@limit 003C  
                           _EUSART_Receive_ISR 00BA  EUSART_SetFramingErrorHandler@interruptHandler 003C  
                                __pstringtext1 0218                            ?_EUSART_Receive_ISR 0075  
                                ??_GetResponse 003E                             EUSART_Write@txData 003C  
                 __size_of_EUSART_Transmit_ISR 001D                                 ??_blockingWait 003E  
               __end_of_PIN_MANAGER_Initialize 01E9                           ??_EUSART_Receive_ISR 0076  
