

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Tue Nov 05 11:06:06 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16LF1559
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	stringtext1,global,class=STRCODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	stringtext2,global,class=STRCODE,delta=2
     7                           	psect	stringtext3,global,class=STRCODE,delta=2
     8                           	psect	stringtext4,global,class=STRCODE,delta=2
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2
    20                           	psect	text4,local,class=CODE,merge=1,delta=2
    21                           	psect	text5,local,class=CODE,merge=1,delta=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 2.05
    46                           ; Generated 20/12/2018 GMT
    47                           ; 
    48                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16LF1559 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0008                     	;# 
    88  0009                     	;# 
    89  000A                     	;# 
    90  000B                     	;# 
    91  000C                     	;# 
    92  000D                     	;# 
    93  000E                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  009F                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  0116                     	;# 
   125  0117                     	;# 
   126  011D                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  018E                     	;# 
   130  0191                     	;# 
   131  0191                     	;# 
   132  0192                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0194                     	;# 
   136  0195                     	;# 
   137  0196                     	;# 
   138  0199                     	;# 
   139  019A                     	;# 
   140  019B                     	;# 
   141  019B                     	;# 
   142  019C                     	;# 
   143  019D                     	;# 
   144  019E                     	;# 
   145  019F                     	;# 
   146  020C                     	;# 
   147  020D                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0216                     	;# 
   160  0216                     	;# 
   161  0217                     	;# 
   162  0217                     	;# 
   163  0391                     	;# 
   164  0392                     	;# 
   165  0393                     	;# 
   166  0394                     	;# 
   167  0395                     	;# 
   168  0396                     	;# 
   169  0611                     	;# 
   170  0612                     	;# 
   171  0613                     	;# 
   172  0613                     	;# 
   173  0614                     	;# 
   174  0615                     	;# 
   175  0616                     	;# 
   176  0616                     	;# 
   177  0711                     	;# 
   178  0711                     	;# 
   179  0711                     	;# 
   180  0712                     	;# 
   181  0712                     	;# 
   182  0713                     	;# 
   183  0713                     	;# 
   184  0713                     	;# 
   185  0714                     	;# 
   186  0714                     	;# 
   187  0714                     	;# 
   188  0715                     	;# 
   189  0715                     	;# 
   190  0716                     	;# 
   191  0716                     	;# 
   192  0716                     	;# 
   193  0716                     	;# 
   194  0717                     	;# 
   195  0717                     	;# 
   196  0717                     	;# 
   197  0717                     	;# 
   198  0718                     	;# 
   199  0718                     	;# 
   200  0718                     	;# 
   201  0719                     	;# 
   202  0719                     	;# 
   203  0719                     	;# 
   204  0719                     	;# 
   205  071A                     	;# 
   206  071A                     	;# 
   207  071A                     	;# 
   208  071A                     	;# 
   209  071A                     	;# 
   210  071B                     	;# 
   211  071B                     	;# 
   212  071C                     	;# 
   213  071C                     	;# 
   214  071C                     	;# 
   215  071C                     	;# 
   216  071C                     	;# 
   217  071D                     	;# 
   218  071D                     	;# 
   219  071E                     	;# 
   220  071E                     	;# 
   221  0791                     	;# 
   222  0791                     	;# 
   223  0793                     	;# 
   224  0793                     	;# 
   225  0794                     	;# 
   226  0794                     	;# 
   227  0796                     	;# 
   228  0796                     	;# 
   229  0796                     	;# 
   230  0797                     	;# 
   231  0797                     	;# 
   232  0797                     	;# 
   233  0798                     	;# 
   234  0798                     	;# 
   235  0799                     	;# 
   236  0799                     	;# 
   237  0799                     	;# 
   238  079A                     	;# 
   239  079A                     	;# 
   240  079A                     	;# 
   241  079B                     	;# 
   242  079C                     	;# 
   243  079C                     	;# 
   244  079C                     	;# 
   245  079D                     	;# 
   246  079E                     	;# 
   247  079E                     	;# 
   248  0F8C                     	;# 
   249  0F8D                     	;# 
   250  0F91                     	;# 
   251  0F96                     	;# 
   252  0F97                     	;# 
   253  0F9C                     	;# 
   254  0F9D                     	;# 
   255  0F9E                     	;# 
   256  0FE3                     	;# 
   257  0FE4                     	;# 
   258  0FE5                     	;# 
   259  0FE6                     	;# 
   260  0FE7                     	;# 
   261  0FE8                     	;# 
   262  0FE9                     	;# 
   263  0FEA                     	;# 
   264  0FEB                     	;# 
   265  0FED                     	;# 
   266  0FEE                     	;# 
   267  0FEF                     	;# 
   268  0000                     	;# 
   269  0001                     	;# 
   270  0002                     	;# 
   271  0003                     	;# 
   272  0004                     	;# 
   273  0005                     	;# 
   274  0006                     	;# 
   275  0007                     	;# 
   276  0008                     	;# 
   277  0009                     	;# 
   278  000A                     	;# 
   279  000B                     	;# 
   280  000C                     	;# 
   281  000D                     	;# 
   282  000E                     	;# 
   283  0011                     	;# 
   284  0012                     	;# 
   285  0015                     	;# 
   286  0016                     	;# 
   287  0016                     	;# 
   288  0017                     	;# 
   289  0018                     	;# 
   290  0019                     	;# 
   291  001A                     	;# 
   292  001B                     	;# 
   293  001C                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0091                     	;# 
   298  0092                     	;# 
   299  0095                     	;# 
   300  0096                     	;# 
   301  0097                     	;# 
   302  0099                     	;# 
   303  009A                     	;# 
   304  009B                     	;# 
   305  009B                     	;# 
   306  009C                     	;# 
   307  009D                     	;# 
   308  009E                     	;# 
   309  009F                     	;# 
   310  010C                     	;# 
   311  010D                     	;# 
   312  010E                     	;# 
   313  0116                     	;# 
   314  0117                     	;# 
   315  011D                     	;# 
   316  018C                     	;# 
   317  018D                     	;# 
   318  018E                     	;# 
   319  0191                     	;# 
   320  0191                     	;# 
   321  0192                     	;# 
   322  0193                     	;# 
   323  0193                     	;# 
   324  0194                     	;# 
   325  0195                     	;# 
   326  0196                     	;# 
   327  0199                     	;# 
   328  019A                     	;# 
   329  019B                     	;# 
   330  019B                     	;# 
   331  019C                     	;# 
   332  019D                     	;# 
   333  019E                     	;# 
   334  019F                     	;# 
   335  020C                     	;# 
   336  020D                     	;# 
   337  0211                     	;# 
   338  0211                     	;# 
   339  0212                     	;# 
   340  0212                     	;# 
   341  0213                     	;# 
   342  0213                     	;# 
   343  0214                     	;# 
   344  0214                     	;# 
   345  0215                     	;# 
   346  0215                     	;# 
   347  0215                     	;# 
   348  0216                     	;# 
   349  0216                     	;# 
   350  0217                     	;# 
   351  0217                     	;# 
   352  0391                     	;# 
   353  0392                     	;# 
   354  0393                     	;# 
   355  0394                     	;# 
   356  0395                     	;# 
   357  0396                     	;# 
   358  0611                     	;# 
   359  0612                     	;# 
   360  0613                     	;# 
   361  0613                     	;# 
   362  0614                     	;# 
   363  0615                     	;# 
   364  0616                     	;# 
   365  0616                     	;# 
   366  0711                     	;# 
   367  0711                     	;# 
   368  0711                     	;# 
   369  0712                     	;# 
   370  0712                     	;# 
   371  0713                     	;# 
   372  0713                     	;# 
   373  0713                     	;# 
   374  0714                     	;# 
   375  0714                     	;# 
   376  0714                     	;# 
   377  0715                     	;# 
   378  0715                     	;# 
   379  0716                     	;# 
   380  0716                     	;# 
   381  0716                     	;# 
   382  0716                     	;# 
   383  0717                     	;# 
   384  0717                     	;# 
   385  0717                     	;# 
   386  0717                     	;# 
   387  0718                     	;# 
   388  0718                     	;# 
   389  0718                     	;# 
   390  0719                     	;# 
   391  0719                     	;# 
   392  0719                     	;# 
   393  0719                     	;# 
   394  071A                     	;# 
   395  071A                     	;# 
   396  071A                     	;# 
   397  071A                     	;# 
   398  071A                     	;# 
   399  071B                     	;# 
   400  071B                     	;# 
   401  071C                     	;# 
   402  071C                     	;# 
   403  071C                     	;# 
   404  071C                     	;# 
   405  071C                     	;# 
   406  071D                     	;# 
   407  071D                     	;# 
   408  071E                     	;# 
   409  071E                     	;# 
   410  0791                     	;# 
   411  0791                     	;# 
   412  0793                     	;# 
   413  0793                     	;# 
   414  0794                     	;# 
   415  0794                     	;# 
   416  0796                     	;# 
   417  0796                     	;# 
   418  0796                     	;# 
   419  0797                     	;# 
   420  0797                     	;# 
   421  0797                     	;# 
   422  0798                     	;# 
   423  0798                     	;# 
   424  0799                     	;# 
   425  0799                     	;# 
   426  0799                     	;# 
   427  079A                     	;# 
   428  079A                     	;# 
   429  079A                     	;# 
   430  079B                     	;# 
   431  079C                     	;# 
   432  079C                     	;# 
   433  079C                     	;# 
   434  079D                     	;# 
   435  079E                     	;# 
   436  079E                     	;# 
   437  0F8C                     	;# 
   438  0F8D                     	;# 
   439  0F91                     	;# 
   440  0F96                     	;# 
   441  0F97                     	;# 
   442  0F9C                     	;# 
   443  0F9D                     	;# 
   444  0F9E                     	;# 
   445  0FE3                     	;# 
   446  0FE4                     	;# 
   447  0FE5                     	;# 
   448  0FE6                     	;# 
   449  0FE7                     	;# 
   450  0FE8                     	;# 
   451  0FE9                     	;# 
   452  0FEA                     	;# 
   453  0FEB                     	;# 
   454  0FED                     	;# 
   455  0FEE                     	;# 
   456  0FEF                     	;# 
   457  0000                     	;# 
   458  0001                     	;# 
   459  0002                     	;# 
   460  0003                     	;# 
   461  0004                     	;# 
   462  0005                     	;# 
   463  0006                     	;# 
   464  0007                     	;# 
   465  0008                     	;# 
   466  0009                     	;# 
   467  000A                     	;# 
   468  000B                     	;# 
   469  000C                     	;# 
   470  000D                     	;# 
   471  000E                     	;# 
   472  0011                     	;# 
   473  0012                     	;# 
   474  0015                     	;# 
   475  0016                     	;# 
   476  0016                     	;# 
   477  0017                     	;# 
   478  0018                     	;# 
   479  0019                     	;# 
   480  001A                     	;# 
   481  001B                     	;# 
   482  001C                     	;# 
   483  008C                     	;# 
   484  008D                     	;# 
   485  008E                     	;# 
   486  0091                     	;# 
   487  0092                     	;# 
   488  0095                     	;# 
   489  0096                     	;# 
   490  0097                     	;# 
   491  0099                     	;# 
   492  009A                     	;# 
   493  009B                     	;# 
   494  009B                     	;# 
   495  009C                     	;# 
   496  009D                     	;# 
   497  009E                     	;# 
   498  009F                     	;# 
   499  010C                     	;# 
   500  010D                     	;# 
   501  010E                     	;# 
   502  0116                     	;# 
   503  0117                     	;# 
   504  011D                     	;# 
   505  018C                     	;# 
   506  018D                     	;# 
   507  018E                     	;# 
   508  0191                     	;# 
   509  0191                     	;# 
   510  0192                     	;# 
   511  0193                     	;# 
   512  0193                     	;# 
   513  0194                     	;# 
   514  0195                     	;# 
   515  0196                     	;# 
   516  0199                     	;# 
   517  019A                     	;# 
   518  019B                     	;# 
   519  019B                     	;# 
   520  019C                     	;# 
   521  019D                     	;# 
   522  019E                     	;# 
   523  019F                     	;# 
   524  020C                     	;# 
   525  020D                     	;# 
   526  0211                     	;# 
   527  0211                     	;# 
   528  0212                     	;# 
   529  0212                     	;# 
   530  0213                     	;# 
   531  0213                     	;# 
   532  0214                     	;# 
   533  0214                     	;# 
   534  0215                     	;# 
   535  0215                     	;# 
   536  0215                     	;# 
   537  0216                     	;# 
   538  0216                     	;# 
   539  0217                     	;# 
   540  0217                     	;# 
   541  0391                     	;# 
   542  0392                     	;# 
   543  0393                     	;# 
   544  0394                     	;# 
   545  0395                     	;# 
   546  0396                     	;# 
   547  0611                     	;# 
   548  0612                     	;# 
   549  0613                     	;# 
   550  0613                     	;# 
   551  0614                     	;# 
   552  0615                     	;# 
   553  0616                     	;# 
   554  0616                     	;# 
   555  0711                     	;# 
   556  0711                     	;# 
   557  0711                     	;# 
   558  0712                     	;# 
   559  0712                     	;# 
   560  0713                     	;# 
   561  0713                     	;# 
   562  0713                     	;# 
   563  0714                     	;# 
   564  0714                     	;# 
   565  0714                     	;# 
   566  0715                     	;# 
   567  0715                     	;# 
   568  0716                     	;# 
   569  0716                     	;# 
   570  0716                     	;# 
   571  0716                     	;# 
   572  0717                     	;# 
   573  0717                     	;# 
   574  0717                     	;# 
   575  0717                     	;# 
   576  0718                     	;# 
   577  0718                     	;# 
   578  0718                     	;# 
   579  0719                     	;# 
   580  0719                     	;# 
   581  0719                     	;# 
   582  0719                     	;# 
   583  071A                     	;# 
   584  071A                     	;# 
   585  071A                     	;# 
   586  071A                     	;# 
   587  071A                     	;# 
   588  071B                     	;# 
   589  071B                     	;# 
   590  071C                     	;# 
   591  071C                     	;# 
   592  071C                     	;# 
   593  071C                     	;# 
   594  071C                     	;# 
   595  071D                     	;# 
   596  071D                     	;# 
   597  071E                     	;# 
   598  071E                     	;# 
   599  0791                     	;# 
   600  0791                     	;# 
   601  0793                     	;# 
   602  0793                     	;# 
   603  0794                     	;# 
   604  0794                     	;# 
   605  0796                     	;# 
   606  0796                     	;# 
   607  0796                     	;# 
   608  0797                     	;# 
   609  0797                     	;# 
   610  0797                     	;# 
   611  0798                     	;# 
   612  0798                     	;# 
   613  0799                     	;# 
   614  0799                     	;# 
   615  0799                     	;# 
   616  079A                     	;# 
   617  079A                     	;# 
   618  079A                     	;# 
   619  079B                     	;# 
   620  079C                     	;# 
   621  079C                     	;# 
   622  079C                     	;# 
   623  079D                     	;# 
   624  079E                     	;# 
   625  079E                     	;# 
   626  0F8C                     	;# 
   627  0F8D                     	;# 
   628  0F91                     	;# 
   629  0F96                     	;# 
   630  0F97                     	;# 
   631  0F9C                     	;# 
   632  0F9D                     	;# 
   633  0F9E                     	;# 
   634  0FE3                     	;# 
   635  0FE4                     	;# 
   636  0FE5                     	;# 
   637  0FE6                     	;# 
   638  0FE7                     	;# 
   639  0FE8                     	;# 
   640  0FE9                     	;# 
   641  0FEA                     	;# 
   642  0FEB                     	;# 
   643  0FED                     	;# 
   644  0FEE                     	;# 
   645  0FEF                     	;# 
   646  0000                     	;# 
   647  0001                     	;# 
   648  0002                     	;# 
   649  0003                     	;# 
   650  0004                     	;# 
   651  0005                     	;# 
   652  0006                     	;# 
   653  0007                     	;# 
   654  0008                     	;# 
   655  0009                     	;# 
   656  000A                     	;# 
   657  000B                     	;# 
   658  000C                     	;# 
   659  000D                     	;# 
   660  000E                     	;# 
   661  0011                     	;# 
   662  0012                     	;# 
   663  0015                     	;# 
   664  0016                     	;# 
   665  0016                     	;# 
   666  0017                     	;# 
   667  0018                     	;# 
   668  0019                     	;# 
   669  001A                     	;# 
   670  001B                     	;# 
   671  001C                     	;# 
   672  008C                     	;# 
   673  008D                     	;# 
   674  008E                     	;# 
   675  0091                     	;# 
   676  0092                     	;# 
   677  0095                     	;# 
   678  0096                     	;# 
   679  0097                     	;# 
   680  0099                     	;# 
   681  009A                     	;# 
   682  009B                     	;# 
   683  009B                     	;# 
   684  009C                     	;# 
   685  009D                     	;# 
   686  009E                     	;# 
   687  009F                     	;# 
   688  010C                     	;# 
   689  010D                     	;# 
   690  010E                     	;# 
   691  0116                     	;# 
   692  0117                     	;# 
   693  011D                     	;# 
   694  018C                     	;# 
   695  018D                     	;# 
   696  018E                     	;# 
   697  0191                     	;# 
   698  0191                     	;# 
   699  0192                     	;# 
   700  0193                     	;# 
   701  0193                     	;# 
   702  0194                     	;# 
   703  0195                     	;# 
   704  0196                     	;# 
   705  0199                     	;# 
   706  019A                     	;# 
   707  019B                     	;# 
   708  019B                     	;# 
   709  019C                     	;# 
   710  019D                     	;# 
   711  019E                     	;# 
   712  019F                     	;# 
   713  020C                     	;# 
   714  020D                     	;# 
   715  0211                     	;# 
   716  0211                     	;# 
   717  0212                     	;# 
   718  0212                     	;# 
   719  0213                     	;# 
   720  0213                     	;# 
   721  0214                     	;# 
   722  0214                     	;# 
   723  0215                     	;# 
   724  0215                     	;# 
   725  0215                     	;# 
   726  0216                     	;# 
   727  0216                     	;# 
   728  0217                     	;# 
   729  0217                     	;# 
   730  0391                     	;# 
   731  0392                     	;# 
   732  0393                     	;# 
   733  0394                     	;# 
   734  0395                     	;# 
   735  0396                     	;# 
   736  0611                     	;# 
   737  0612                     	;# 
   738  0613                     	;# 
   739  0613                     	;# 
   740  0614                     	;# 
   741  0615                     	;# 
   742  0616                     	;# 
   743  0616                     	;# 
   744  0711                     	;# 
   745  0711                     	;# 
   746  0711                     	;# 
   747  0712                     	;# 
   748  0712                     	;# 
   749  0713                     	;# 
   750  0713                     	;# 
   751  0713                     	;# 
   752  0714                     	;# 
   753  0714                     	;# 
   754  0714                     	;# 
   755  0715                     	;# 
   756  0715                     	;# 
   757  0716                     	;# 
   758  0716                     	;# 
   759  0716                     	;# 
   760  0716                     	;# 
   761  0717                     	;# 
   762  0717                     	;# 
   763  0717                     	;# 
   764  0717                     	;# 
   765  0718                     	;# 
   766  0718                     	;# 
   767  0718                     	;# 
   768  0719                     	;# 
   769  0719                     	;# 
   770  0719                     	;# 
   771  0719                     	;# 
   772  071A                     	;# 
   773  071A                     	;# 
   774  071A                     	;# 
   775  071A                     	;# 
   776  071A                     	;# 
   777  071B                     	;# 
   778  071B                     	;# 
   779  071C                     	;# 
   780  071C                     	;# 
   781  071C                     	;# 
   782  071C                     	;# 
   783  071C                     	;# 
   784  071D                     	;# 
   785  071D                     	;# 
   786  071E                     	;# 
   787  071E                     	;# 
   788  0791                     	;# 
   789  0791                     	;# 
   790  0793                     	;# 
   791  0793                     	;# 
   792  0794                     	;# 
   793  0794                     	;# 
   794  0796                     	;# 
   795  0796                     	;# 
   796  0796                     	;# 
   797  0797                     	;# 
   798  0797                     	;# 
   799  0797                     	;# 
   800  0798                     	;# 
   801  0798                     	;# 
   802  0799                     	;# 
   803  0799                     	;# 
   804  0799                     	;# 
   805  079A                     	;# 
   806  079A                     	;# 
   807  079A                     	;# 
   808  079B                     	;# 
   809  079C                     	;# 
   810  079C                     	;# 
   811  079C                     	;# 
   812  079D                     	;# 
   813  079E                     	;# 
   814  079E                     	;# 
   815  0F8C                     	;# 
   816  0F8D                     	;# 
   817  0F91                     	;# 
   818  0F96                     	;# 
   819  0F97                     	;# 
   820  0F9C                     	;# 
   821  0F9D                     	;# 
   822  0F9E                     	;# 
   823  0FE3                     	;# 
   824  0FE4                     	;# 
   825  0FE5                     	;# 
   826  0FE6                     	;# 
   827  0FE7                     	;# 
   828  0FE8                     	;# 
   829  0FE9                     	;# 
   830  0FEA                     	;# 
   831  0FEB                     	;# 
   832  0FED                     	;# 
   833  0FEE                     	;# 
   834  0FEF                     	;# 
   835  0000                     	;# 
   836  0001                     	;# 
   837  0002                     	;# 
   838  0003                     	;# 
   839  0004                     	;# 
   840  0005                     	;# 
   841  0006                     	;# 
   842  0007                     	;# 
   843  0008                     	;# 
   844  0009                     	;# 
   845  000A                     	;# 
   846  000B                     	;# 
   847  000C                     	;# 
   848  000D                     	;# 
   849  000E                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  009F                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019C                     	;# 
   899  019D                     	;# 
   900  019E                     	;# 
   901  019F                     	;# 
   902  020C                     	;# 
   903  020D                     	;# 
   904  0211                     	;# 
   905  0211                     	;# 
   906  0212                     	;# 
   907  0212                     	;# 
   908  0213                     	;# 
   909  0213                     	;# 
   910  0214                     	;# 
   911  0214                     	;# 
   912  0215                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0216                     	;# 
   916  0216                     	;# 
   917  0217                     	;# 
   918  0217                     	;# 
   919  0391                     	;# 
   920  0392                     	;# 
   921  0393                     	;# 
   922  0394                     	;# 
   923  0395                     	;# 
   924  0396                     	;# 
   925  0611                     	;# 
   926  0612                     	;# 
   927  0613                     	;# 
   928  0613                     	;# 
   929  0614                     	;# 
   930  0615                     	;# 
   931  0616                     	;# 
   932  0616                     	;# 
   933  0711                     	;# 
   934  0711                     	;# 
   935  0711                     	;# 
   936  0712                     	;# 
   937  0712                     	;# 
   938  0713                     	;# 
   939  0713                     	;# 
   940  0713                     	;# 
   941  0714                     	;# 
   942  0714                     	;# 
   943  0714                     	;# 
   944  0715                     	;# 
   945  0715                     	;# 
   946  0716                     	;# 
   947  0716                     	;# 
   948  0716                     	;# 
   949  0716                     	;# 
   950  0717                     	;# 
   951  0717                     	;# 
   952  0717                     	;# 
   953  0717                     	;# 
   954  0718                     	;# 
   955  0718                     	;# 
   956  0718                     	;# 
   957  0719                     	;# 
   958  0719                     	;# 
   959  0719                     	;# 
   960  0719                     	;# 
   961  071A                     	;# 
   962  071A                     	;# 
   963  071A                     	;# 
   964  071A                     	;# 
   965  071A                     	;# 
   966  071B                     	;# 
   967  071B                     	;# 
   968  071C                     	;# 
   969  071C                     	;# 
   970  071C                     	;# 
   971  071C                     	;# 
   972  071C                     	;# 
   973  071D                     	;# 
   974  071D                     	;# 
   975  071E                     	;# 
   976  071E                     	;# 
   977  0791                     	;# 
   978  0791                     	;# 
   979  0793                     	;# 
   980  0793                     	;# 
   981  0794                     	;# 
   982  0794                     	;# 
   983  0796                     	;# 
   984  0796                     	;# 
   985  0796                     	;# 
   986  0797                     	;# 
   987  0797                     	;# 
   988  0797                     	;# 
   989  0798                     	;# 
   990  0798                     	;# 
   991  0799                     	;# 
   992  0799                     	;# 
   993  0799                     	;# 
   994  079A                     	;# 
   995  079A                     	;# 
   996  079A                     	;# 
   997  079B                     	;# 
   998  079C                     	;# 
   999  079C                     	;# 
  1000  079C                     	;# 
  1001  079D                     	;# 
  1002  079E                     	;# 
  1003  079E                     	;# 
  1004  0F8C                     	;# 
  1005  0F8D                     	;# 
  1006  0F91                     	;# 
  1007  0F96                     	;# 
  1008  0F97                     	;# 
  1009  0F9C                     	;# 
  1010  0F9D                     	;# 
  1011  0F9E                     	;# 
  1012  0FE3                     	;# 
  1013  0FE4                     	;# 
  1014  0FE5                     	;# 
  1015  0FE6                     	;# 
  1016  0FE7                     	;# 
  1017  0FE8                     	;# 
  1018  0FE9                     	;# 
  1019  0FEA                     	;# 
  1020  0FEB                     	;# 
  1021  0FED                     	;# 
  1022  0FEE                     	;# 
  1023  0FEF                     	;# 
  1024  0000                     	;# 
  1025  0001                     	;# 
  1026  0002                     	;# 
  1027  0003                     	;# 
  1028  0004                     	;# 
  1029  0005                     	;# 
  1030  0006                     	;# 
  1031  0007                     	;# 
  1032  0008                     	;# 
  1033  0009                     	;# 
  1034  000A                     	;# 
  1035  000B                     	;# 
  1036  000C                     	;# 
  1037  000D                     	;# 
  1038  000E                     	;# 
  1039  0011                     	;# 
  1040  0012                     	;# 
  1041  0015                     	;# 
  1042  0016                     	;# 
  1043  0016                     	;# 
  1044  0017                     	;# 
  1045  0018                     	;# 
  1046  0019                     	;# 
  1047  001A                     	;# 
  1048  001B                     	;# 
  1049  001C                     	;# 
  1050  008C                     	;# 
  1051  008D                     	;# 
  1052  008E                     	;# 
  1053  0091                     	;# 
  1054  0092                     	;# 
  1055  0095                     	;# 
  1056  0096                     	;# 
  1057  0097                     	;# 
  1058  0099                     	;# 
  1059  009A                     	;# 
  1060  009B                     	;# 
  1061  009B                     	;# 
  1062  009C                     	;# 
  1063  009D                     	;# 
  1064  009E                     	;# 
  1065  009F                     	;# 
  1066  010C                     	;# 
  1067  010D                     	;# 
  1068  010E                     	;# 
  1069  0116                     	;# 
  1070  0117                     	;# 
  1071  011D                     	;# 
  1072  018C                     	;# 
  1073  018D                     	;# 
  1074  018E                     	;# 
  1075  0191                     	;# 
  1076  0191                     	;# 
  1077  0192                     	;# 
  1078  0193                     	;# 
  1079  0193                     	;# 
  1080  0194                     	;# 
  1081  0195                     	;# 
  1082  0196                     	;# 
  1083  0199                     	;# 
  1084  019A                     	;# 
  1085  019B                     	;# 
  1086  019B                     	;# 
  1087  019C                     	;# 
  1088  019D                     	;# 
  1089  019E                     	;# 
  1090  019F                     	;# 
  1091  020C                     	;# 
  1092  020D                     	;# 
  1093  0211                     	;# 
  1094  0211                     	;# 
  1095  0212                     	;# 
  1096  0212                     	;# 
  1097  0213                     	;# 
  1098  0213                     	;# 
  1099  0214                     	;# 
  1100  0214                     	;# 
  1101  0215                     	;# 
  1102  0215                     	;# 
  1103  0215                     	;# 
  1104  0216                     	;# 
  1105  0216                     	;# 
  1106  0217                     	;# 
  1107  0217                     	;# 
  1108  0391                     	;# 
  1109  0392                     	;# 
  1110  0393                     	;# 
  1111  0394                     	;# 
  1112  0395                     	;# 
  1113  0396                     	;# 
  1114  0611                     	;# 
  1115  0612                     	;# 
  1116  0613                     	;# 
  1117  0613                     	;# 
  1118  0614                     	;# 
  1119  0615                     	;# 
  1120  0616                     	;# 
  1121  0616                     	;# 
  1122  0711                     	;# 
  1123  0711                     	;# 
  1124  0711                     	;# 
  1125  0712                     	;# 
  1126  0712                     	;# 
  1127  0713                     	;# 
  1128  0713                     	;# 
  1129  0713                     	;# 
  1130  0714                     	;# 
  1131  0714                     	;# 
  1132  0714                     	;# 
  1133  0715                     	;# 
  1134  0715                     	;# 
  1135  0716                     	;# 
  1136  0716                     	;# 
  1137  0716                     	;# 
  1138  0716                     	;# 
  1139  0717                     	;# 
  1140  0717                     	;# 
  1141  0717                     	;# 
  1142  0717                     	;# 
  1143  0718                     	;# 
  1144  0718                     	;# 
  1145  0718                     	;# 
  1146  0719                     	;# 
  1147  0719                     	;# 
  1148  0719                     	;# 
  1149  0719                     	;# 
  1150  071A                     	;# 
  1151  071A                     	;# 
  1152  071A                     	;# 
  1153  071A                     	;# 
  1154  071A                     	;# 
  1155  071B                     	;# 
  1156  071B                     	;# 
  1157  071C                     	;# 
  1158  071C                     	;# 
  1159  071C                     	;# 
  1160  071C                     	;# 
  1161  071C                     	;# 
  1162  071D                     	;# 
  1163  071D                     	;# 
  1164  071E                     	;# 
  1165  071E                     	;# 
  1166  0791                     	;# 
  1167  0791                     	;# 
  1168  0793                     	;# 
  1169  0793                     	;# 
  1170  0794                     	;# 
  1171  0794                     	;# 
  1172  0796                     	;# 
  1173  0796                     	;# 
  1174  0796                     	;# 
  1175  0797                     	;# 
  1176  0797                     	;# 
  1177  0797                     	;# 
  1178  0798                     	;# 
  1179  0798                     	;# 
  1180  0799                     	;# 
  1181  0799                     	;# 
  1182  0799                     	;# 
  1183  079A                     	;# 
  1184  079A                     	;# 
  1185  079A                     	;# 
  1186  079B                     	;# 
  1187  079C                     	;# 
  1188  079C                     	;# 
  1189  079C                     	;# 
  1190  079D                     	;# 
  1191  079E                     	;# 
  1192  079E                     	;# 
  1193  0F8C                     	;# 
  1194  0F8D                     	;# 
  1195  0F91                     	;# 
  1196  0F96                     	;# 
  1197  0F97                     	;# 
  1198  0F9C                     	;# 
  1199  0F9D                     	;# 
  1200  0F9E                     	;# 
  1201  0FE3                     	;# 
  1202  0FE4                     	;# 
  1203  0FE5                     	;# 
  1204  0FE6                     	;# 
  1205  0FE7                     	;# 
  1206  0FE8                     	;# 
  1207  0FE9                     	;# 
  1208  0FEA                     	;# 
  1209  0FEB                     	;# 
  1210  0FED                     	;# 
  1211  0FEE                     	;# 
  1212  0FEF                     	;# 
  1213                           
  1214 ;; Function _EUSART_is_tx_ready is unused but had its address taken
  1215  0000                     
  1216 ;; Function _EUSART_is_tx_done is unused but had its address taken
  1217  0000                     
  1218                           	psect	stringtext1
  1219  0209                     __pstringtext1:	
  1220  0209                     _uart:	
  1221  0209  343E               	retlw	low _EUSART_Read
  1222  020A  3401               	retlw	high _EUSART_Read
  1223  020B  3463               	retlw	low _EUSART_Write
  1224  020C  3401               	retlw	high _EUSART_Write
  1225  020D  3400               	retlw	0
  1226  020E  3400               	retlw	0
  1227  020F  345C               	retlw	low _EUSART_is_rx_ready
  1228  0210  3402               	retlw	high _EUSART_is_rx_ready
  1229  0211  3470               	retlw	low _EUSART_SetTxInterruptHandler
  1230  0212  3402               	retlw	high _EUSART_SetTxInterruptHandler
  1231  0213  34E6               	retlw	low _EUSART_Receive_ISR
  1232  0214  3400               	retlw	high _EUSART_Receive_ISR
  1233  0215  3488               	retlw	low _EUSART_SetRxInterruptHandler
  1234  0216  3402               	retlw	high _EUSART_SetRxInterruptHandler
  1235  0217  3400               	retlw	0
  1236  0218  3400               	retlw	0
  1237  0219  34A2               	retlw	low _EUSART_Transmit_ISR
  1238  021A  3401               	retlw	high _EUSART_Transmit_ISR
  1239  021B  343A               	retlw	low _EUSART_Initialize
  1240  021C  3400               	retlw	high _EUSART_Initialize
  1241  021D                     __end_of_uart:	
  1242                           
  1243                           	psect	nvBANK0
  1244  005D                     __pnvBANK0:	
  1245  005D                     _EUSART_ErrorHandler:	
  1246  005D                     	ds	2
  1247  005F                     _EUSART_OverrunErrorHandler:	
  1248  005F                     	ds	2
  1249  0061                     _EUSART_FramingErrorHandler:	
  1250  0061                     	ds	2
  1251  0063                     _EUSART_RxDefaultInterruptHandler:	
  1252  0063                     	ds	2
  1253  0065                     _EUSART_TxDefaultInterruptHandler:	
  1254  0065                     	ds	2
  1255  0067                     _eusartTxBufferRemaining:	
  1256  0067                     	ds	1
  1257  0011                     _PIR1bits	set	17
  1258  000B                     _INTCONbits	set	11
  1259  0095                     _OPTION_REGbits	set	149
  1260  008E                     _TRISC	set	142
  1261  008D                     _TRISB	set	141
  1262  008C                     _TRISA	set	140
  1263  0097                     _WDTCON	set	151
  1264  0099                     _OSCCON	set	153
  1265  0091                     _PIE1bits	set	145
  1266  011D                     _APFCON	set	285
  1267  010E                     _LATC	set	270
  1268  010D                     _LATB	set	269
  1269  010C                     _LATA	set	268
  1270  0116                     _BORCON	set	278
  1271  018C                     _ANSELA	set	396
  1272  018D                     _ANSELB	set	397
  1273  018E                     _ANSELC	set	398
  1274  0199                     _RCREG	set	409
  1275  019D                     _RCSTAbits	set	413
  1276  019A                     _TXREG	set	410
  1277  019E                     _TXSTAbits	set	414
  1278  019C                     _SPBRGH	set	412
  1279  019B                     _SPBRGL	set	411
  1280  019E                     _TXSTA	set	414
  1281  019D                     _RCSTA	set	413
  1282  019F                     _BAUDCON	set	415
  1283  020C                     _WPUA	set	524
  1284  020D                     _WPUB	set	525
  1285                           
  1286                           	psect	stringtext2
  1287  021D                     __pstringtext2:	
  1288  021D                     STR_1:	
  1289  021D  3453               	retlw	83	;'S'
  1290  021E  3459               	retlw	89	;'Y'
  1291  021F  3453               	retlw	83	;'S'
  1292  0220  3420               	retlw	32	;' '
  1293  0221  3446               	retlw	70	;'F'
  1294  0222  3441               	retlw	65	;'A'
  1295  0223  3443               	retlw	67	;'C'
  1296  0224  3454               	retlw	84	;'T'
  1297  0225  344F               	retlw	79	;'O'
  1298  0226  3452               	retlw	82	;'R'
  1299  0227  3459               	retlw	89	;'Y'
  1300  0228  3420               	retlw	32	;' '
  1301  0229  3452               	retlw	82	;'R'
  1302  022A  3445               	retlw	69	;'E'
  1303  022B  3453               	retlw	83	;'S'
  1304  022C  3445               	retlw	69	;'E'
  1305  022D  3454               	retlw	84	;'T'
  1306  022E  3400               	retlw	0
  1307                           
  1308                           	psect	stringtext3
  1309  022F                     __pstringtext3:	
  1310  022F                     STR_2:	
  1311  022F  3453               	retlw	83	;'S'
  1312  0230  344D               	retlw	77	;'M'
  1313  0231  3441               	retlw	65	;'A'
  1314  0232  3452               	retlw	82	;'R'
  1315  0233  3454               	retlw	84	;'T'
  1316  0234  3420               	retlw	32	;' '
  1317  0235  344C               	retlw	76	;'L'
  1318  0236  3449               	retlw	73	;'I'
  1319  0237  3447               	retlw	71	;'G'
  1320  0238  3448               	retlw	72	;'H'
  1321  0239  3454               	retlw	84	;'T'
  1322  023A  3420               	retlw	32	;' '
  1323  023B  3449               	retlw	73	;'I'
  1324  023C  344E               	retlw	78	;'N'
  1325  023D  3449               	retlw	73	;'I'
  1326  023E  3454               	retlw	84	;'T'
  1327  023F  3400               	retlw	0
  1328                           
  1329                           	psect	stringtext4
  1330  0000                     __pstringtext4:	
  1331                           
  1332                           ; #config settings
  1333  0000                     
  1334                           	psect	cinit
  1335  0023                     start_initialization:	
  1336  0023                     __initialization:	
  1337                           
  1338                           ; Clear objects allocated to COMMON
  1339  0023  01F6               	clrf	__pbssCOMMON& (0+127)
  1340  0024  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1341  0025  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1342  0026  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1343                           
  1344                           ; Clear objects allocated to BANK0
  1345  0027  3020               	movlw	low __pbssBANK0
  1346  0028  0084               	movwf	4
  1347  0029  3000               	movlw	high __pbssBANK0
  1348  002A  0085               	movwf	5
  1349  002B  303D               	movlw	61
  1350  002C  3182  2264  3180   	fcall	clear_ram0
  1351                           
  1352                           ; Clear objects allocated to BANK1
  1353  002F  30A0               	movlw	low __pbssBANK1
  1354  0030  0084               	movwf	4
  1355  0031  3000               	movlw	high __pbssBANK1
  1356  0032  0085               	movwf	5
  1357  0033  3020               	movlw	32
  1358  0034  3182  2264         	fcall	clear_ram0
  1359  0036                     end_of_initialization:	
  1360                           ;End of C runtime variable initialization code
  1361                           
  1362  0036                     __end_of__initialization:	
  1363  0036  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  1364  0037  0020               	movlb	0
  1365  0038  3181  2918         	ljmp	_main	;jump to C main() function
  1366                           
  1367                           	psect	bssCOMMON
  1368  0076                     __pbssCOMMON:	
  1369  0076                     _ResponseIndex:	
  1370  0076                     	ds	1
  1371  0077                     _eusartRxTail:	
  1372  0077                     	ds	1
  1373  0078                     _eusartRxHead:	
  1374  0078                     	ds	1
  1375  0079                     _eusartTxHead:	
  1376  0079                     	ds	1
  1377                           
  1378                           	psect	bssBANK0
  1379  0020                     __pbssBANK0:	
  1380  0020                     _eusartRxStatusBuffer:	
  1381  0020                     	ds	8
  1382  0028                     _eusartRxBuffer:	
  1383  0028                     	ds	8
  1384  0030                     _eusartTxBuffer:	
  1385  0030                     	ds	8
  1386  0038                     _lastRxData:	
  1387  0038                     	ds	1
  1388  0039                     _rxData:	
  1389  0039                     	ds	1
  1390  003A                     _eusartRxLastError:	
  1391  003A                     	ds	1
  1392  003B                     _eusartRxCount:	
  1393  003B                     	ds	1
  1394  003C                     _eusartTxTail:	
  1395  003C                     	ds	1
  1396  003D                     _ResponseBuffer:	
  1397  003D                     	ds	32
  1398                           
  1399                           	psect	bssBANK1
  1400  00A0                     __pbssBANK1:	
  1401  00A0                     _ReadStorage:	
  1402  00A0                     	ds	32
  1403                           
  1404                           	psect	clrtext
  1405  0264                     clear_ram0:	
  1406                           ;	Called with FSR0 containing the base address, and
  1407                           ;	WREG with the size to clear
  1408                           
  1409  0264  0064               	clrwdt	;clear the watchdog before getting into this loop
  1410  0265                     clrloop0:	
  1411  0265  0180               	clrf	0	;clear RAM location pointed to by FSR
  1412  0266  3101               	addfsr 0,1
  1413  0267  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1414  0268  2A65               	goto	clrloop0	;have we reached the end yet?
  1415  0269  3400               	retlw	0	;all done for this memory range, return
  1416                           
  1417                           	psect	cstackCOMMON
  1418  0070                     __pcstackCOMMON:	
  1419  0070                     ?_EUSART_Receive_ISR:	
  1420  0070                     ?_EUSART_Transmit_ISR:	
  1421                           ; 1 bytes @ 0x0
  1422                           
  1423  0070                     ??_EUSART_Transmit_ISR:	
  1424                           ; 1 bytes @ 0x0
  1425                           
  1426  0070                     ?_EUSART_DefaultFramingErrorHandler:	
  1427                           ; 1 bytes @ 0x0
  1428                           
  1429  0070                     ??_EUSART_DefaultFramingErrorHandler:	
  1430                           ; 1 bytes @ 0x0
  1431                           
  1432  0070                     ?_EUSART_DefaultOverrunErrorHandler:	
  1433                           ; 1 bytes @ 0x0
  1434                           
  1435  0070                     ??_EUSART_DefaultOverrunErrorHandler:	
  1436                           ; 1 bytes @ 0x0
  1437                           
  1438  0070                     ?_EUSART_DefaultErrorHandler:	
  1439                           ; 1 bytes @ 0x0
  1440                           
  1441  0070                     ?_EUSART_RxDataHandler:	
  1442                           ; 1 bytes @ 0x0
  1443                           
  1444  0070                     ??_EUSART_RxDataHandler:	
  1445                           ; 1 bytes @ 0x0
  1446                           
  1447  0070                     ?_SYSTEM_Initialize:	
  1448                           ; 1 bytes @ 0x0
  1449                           
  1450  0070                     ?_INIT_SMART_LIGHT:	
  1451                           ; 1 bytes @ 0x0
  1452                           
  1453  0070                     ?_GetResponse:	
  1454                           ; 1 bytes @ 0x0
  1455                           
  1456  0070                     ?_ReadyReceiveBuffer:	
  1457                           ; 1 bytes @ 0x0
  1458                           
  1459  0070                     ?_PIN_MANAGER_Initialize:	
  1460                           ; 1 bytes @ 0x0
  1461                           
  1462  0070                     ?_OSCILLATOR_Initialize:	
  1463                           ; 1 bytes @ 0x0
  1464                           
  1465  0070                     ?_WDT_Initialize:	
  1466                           ; 1 bytes @ 0x0
  1467                           
  1468  0070                     ?_ReceivedMessage:	
  1469                           ; 1 bytes @ 0x0
  1470                           
  1471  0070                     ?_EUSART_Initialize:	
  1472                           ; 1 bytes @ 0x0
  1473                           
  1474  0070                     ?_EUSART_is_rx_ready:	
  1475                           ; 1 bytes @ 0x0
  1476                           
  1477  0070                     ??_EUSART_is_rx_ready:	
  1478                           ; 1 bytes @ 0x0
  1479                           
  1480  0070                     ?_EUSART_Read:	
  1481                           ; 1 bytes @ 0x0
  1482                           
  1483  0070                     ??_EUSART_Read:	
  1484                           ; 1 bytes @ 0x0
  1485                           
  1486  0070                     ?_main:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  0070                     ?_INTERRUPT_InterruptManager:	
  1490                           ; 1 bytes @ 0x0
  1491                           
  1492                           
  1493                           ; 1 bytes @ 0x0
  1494  0070                     	ds	1
  1495  0071                     ??_EUSART_Receive_ISR:	
  1496  0071                     ??_EUSART_DefaultErrorHandler:	
  1497                           ; 1 bytes @ 0x1
  1498                           
  1499  0071                     EUSART_Read@readValue:	
  1500                           ; 1 bytes @ 0x1
  1501                           
  1502                           
  1503                           ; 1 bytes @ 0x1
  1504  0071                     	ds	1
  1505  0072                     ??_ReceivedMessage:	
  1506                           
  1507                           ; 1 bytes @ 0x2
  1508  0072                     	ds	1
  1509  0073                     ReceivedMessage@readByte:	
  1510                           
  1511                           ; 1 bytes @ 0x3
  1512  0073                     	ds	1
  1513  0074                     ?_EUSART_SetRxInterruptHandler:	
  1514  0074                     ?_EUSART_SetTxInterruptHandler:	
  1515                           ; 1 bytes @ 0x4
  1516                           
  1517  0074                     ?_EUSART_SetFramingErrorHandler:	
  1518                           ; 1 bytes @ 0x4
  1519                           
  1520  0074                     ?_EUSART_SetOverrunErrorHandler:	
  1521                           ; 1 bytes @ 0x4
  1522                           
  1523  0074                     ?_EUSART_SetErrorHandler:	
  1524                           ; 1 bytes @ 0x4
  1525                           
  1526  0074                     ?_blockingWait:	
  1527                           ; 1 bytes @ 0x4
  1528                           
  1529  0074                     ??_GetResponse:	
  1530                           ; 1 bytes @ 0x4
  1531                           
  1532  0074                     ??_ReadyReceiveBuffer:	
  1533                           ; 1 bytes @ 0x4
  1534                           
  1535  0074                     ??_PIN_MANAGER_Initialize:	
  1536                           ; 1 bytes @ 0x4
  1537                           
  1538  0074                     ??_OSCILLATOR_Initialize:	
  1539                           ; 1 bytes @ 0x4
  1540                           
  1541  0074                     ??_WDT_Initialize:	
  1542                           ; 1 bytes @ 0x4
  1543                           
  1544  0074                     ?_EUSART_Write:	
  1545                           ; 1 bytes @ 0x4
  1546                           
  1547  0074                     ??_INTERRUPT_InterruptManager:	
  1548                           ; 1 bytes @ 0x4
  1549                           
  1550  0074                     EUSART_Write@txData:	
  1551                           ; 1 bytes @ 0x4
  1552                           
  1553  0074                     EUSART_SetFramingErrorHandler@interruptHandler:	
  1554                           ; 1 bytes @ 0x4
  1555                           
  1556  0074                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  1557                           ; 2 bytes @ 0x4
  1558                           
  1559  0074                     EUSART_SetErrorHandler@interruptHandler:	
  1560                           ; 2 bytes @ 0x4
  1561                           
  1562  0074                     EUSART_SetTxInterruptHandler@interruptHandler:	
  1563                           ; 2 bytes @ 0x4
  1564                           
  1565  0074                     EUSART_SetRxInterruptHandler@interruptHandler:	
  1566                           ; 2 bytes @ 0x4
  1567                           
  1568  0074                     blockingWait@limit:	
  1569                           ; 2 bytes @ 0x4
  1570                           
  1571                           
  1572                           ; 2 bytes @ 0x4
  1573  0074                     	ds	1
  1574  0075                     ??_EUSART_Write:	
  1575  0075                     ReadyReceiveBuffer@position:	
  1576                           ; 1 bytes @ 0x5
  1577                           
  1578                           
  1579                           ; 1 bytes @ 0x5
  1580  0075                     	ds	1
  1581  0076                     ??_EUSART_SetRxInterruptHandler:	
  1582  0076                     ??_EUSART_SetTxInterruptHandler:	
  1583                           ; 1 bytes @ 0x6
  1584                           
  1585  0076                     ??_EUSART_SetFramingErrorHandler:	
  1586                           ; 1 bytes @ 0x6
  1587                           
  1588  0076                     ??_EUSART_SetOverrunErrorHandler:	
  1589                           ; 1 bytes @ 0x6
  1590                           
  1591  0076                     ??_EUSART_SetErrorHandler:	
  1592                           ; 1 bytes @ 0x6
  1593                           
  1594  0076                     ??_SYSTEM_Initialize:	
  1595                           ; 1 bytes @ 0x6
  1596                           
  1597  0076                     ??_INIT_SMART_LIGHT:	
  1598                           ; 1 bytes @ 0x6
  1599                           
  1600                           
  1601                           	psect	cstackBANK0
  1602  0068                     __pcstackBANK0:	
  1603                           ; 1 bytes @ 0x6
  1604                           
  1605  0068                     ??_blockingWait:	
  1606  0068                     ?_SendString:	
  1607                           ; 1 bytes @ 0x0
  1608                           
  1609  0068                     ??_EUSART_Initialize:	
  1610                           ; 1 bytes @ 0x0
  1611                           
  1612  0068                     SendString@command:	
  1613                           ; 1 bytes @ 0x0
  1614                           
  1615                           
  1616                           ; 2 bytes @ 0x0
  1617  0068                     	ds	1
  1618  0069                     blockingWait@counter:	
  1619                           
  1620                           ; 2 bytes @ 0x1
  1621  0069                     	ds	1
  1622  006A                     ??_SendString:	
  1623                           
  1624                           ; 1 bytes @ 0x2
  1625  006A                     	ds	3
  1626  006D                     ??_main:	
  1627                           
  1628                           ; 1 bytes @ 0x5
  1629  006D                     	ds	1
  1630                           
  1631                           	psect	maintext
  1632  0118                     __pmaintext:	
  1633 ;;
  1634 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  1635 ;;
  1636 ;; *************** function _main *****************
  1637 ;; Defined at:
  1638 ;;		line 6 in file "main.c"
  1639 ;; Parameters:    Size  Location     Type
  1640 ;;		None
  1641 ;; Auto vars:     Size  Location     Type
  1642 ;;		None
  1643 ;; Return value:  Size  Location     Type
  1644 ;;                  1    wreg      void 
  1645 ;; Registers used:
  1646 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  1647 ;; Tracked objects:
  1648 ;;		On entry : B1F/0
  1649 ;;		On exit  : 0/0
  1650 ;;		Unchanged: 0/0
  1651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1652 ;;      Params:         0       0       0       0       0       0       0       0
  1653 ;;      Locals:         0       0       0       0       0       0       0       0
  1654 ;;      Temps:          0       1       0       0       0       0       0       0
  1655 ;;      Totals:         0       1       0       0       0       0       0       0
  1656 ;;Total ram usage:        1 bytes
  1657 ;; Hardware stack levels required when called:    8
  1658 ;; This function calls:
  1659 ;;		_GetResponse
  1660 ;;		_INIT_SMART_LIGHT
  1661 ;;		_ReadyReceiveBuffer
  1662 ;;		_SYSTEM_Initialize
  1663 ;;		_SendString
  1664 ;;		_blockingWait
  1665 ;; This function is called by:
  1666 ;;		Startup code after reset
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           
  1671                           ;psect for function _main
  1672  0118                     _main:	
  1673                           
  1674                           ;main.c: 8:     SYSTEM_Initialize();
  1675                           
  1676                           ;incstack = 0
  1677                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  1678  0118  3182  2250  3181   	fcall	_SYSTEM_Initialize
  1679                           
  1680                           ;main.c: 9:     (INTCONbits.GIE = 1);
  1681  011B  178B               	bsf	11,7	;volatile
  1682                           
  1683                           ;main.c: 10:     (INTCONbits.PEIE = 1);
  1684  011C  170B               	bsf	11,6	;volatile
  1685                           
  1686                           ;main.c: 11:     INIT_SMART_LIGHT ();
  1687  011D  3181  2185  3181   	fcall	_INIT_SMART_LIGHT
  1688  0120                     l1381:	
  1689                           
  1690                           ;main.c: 13:     {;main.c: 14:         if(ResponseIndex != 0)
  1691  0120  0876               	movf	_ResponseIndex,w
  1692  0121  1903               	btfsc	3,2
  1693  0122  2920               	goto	l1381
  1694                           
  1695                           ;main.c: 15:         {;main.c: 16:             blockingWait(2);
  1696  0123  3002               	movlw	2
  1697  0124  00F4               	movwf	blockingWait@limit
  1698  0125  3000               	movlw	0
  1699  0126  00F5               	movwf	blockingWait@limit+1
  1700  0127  3181  21D9  3181   	fcall	_blockingWait
  1701                           
  1702                           ;main.c: 17:             rxData = GetResponse();
  1703  012A  3182  2299  3181   	fcall	_GetResponse
  1704  012D  0020               	movlb	0	; select bank0
  1705  012E  00ED               	movwf	??_main
  1706  012F  086D               	movf	??_main,w
  1707  0130  00B9               	movwf	_rxData
  1708                           
  1709                           ;main.c: 18:             SendString(rxData);
  1710  0131  0839               	movf	_rxData,w
  1711  0132  00E8               	movwf	SendString@command
  1712  0133  39FF               	andlw	255
  1713  0134  1D03               	skipz
  1714  0135  3000               	movlw	0
  1715  0136  00E9               	movwf	SendString@command+1
  1716  0137  3180  2078  3181   	fcall	_SendString
  1717                           
  1718                           ;main.c: 19:             ReadyReceiveBuffer();
  1719  013A  3182  2240  3181   	fcall	_ReadyReceiveBuffer
  1720  013D  2920               	goto	l1381
  1721  013E                     __end_of_main:	
  1722                           
  1723                           	psect	text1
  1724  01D9                     __ptext1:	
  1725 ;; *************** function _blockingWait *****************
  1726 ;; Defined at:
  1727 ;;		line 47 in file "uart.c"
  1728 ;; Parameters:    Size  Location     Type
  1729 ;;  limit           2    4[COMMON] unsigned short 
  1730 ;; Auto vars:     Size  Location     Type
  1731 ;;  counter         2    1[BANK0 ] unsigned short 
  1732 ;; Return value:  Size  Location     Type
  1733 ;;                  1    wreg      void 
  1734 ;; Registers used:
  1735 ;;		wreg, status,2
  1736 ;; Tracked objects:
  1737 ;;		On entry : 0/0
  1738 ;;		On exit  : 0/0
  1739 ;;		Unchanged: 0/0
  1740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1741 ;;      Params:         2       0       0       0       0       0       0       0
  1742 ;;      Locals:         0       2       0       0       0       0       0       0
  1743 ;;      Temps:          0       1       0       0       0       0       0       0
  1744 ;;      Totals:         2       3       0       0       0       0       0       0
  1745 ;;Total ram usage:        5 bytes
  1746 ;; Hardware stack levels used:    1
  1747 ;; Hardware stack levels required when called:    5
  1748 ;; This function calls:
  1749 ;;		Nothing
  1750 ;; This function is called by:
  1751 ;;		_main
  1752 ;; This function uses a non-reentrant model
  1753 ;;
  1754                           
  1755                           
  1756                           ;psect for function _blockingWait
  1757  01D9                     _blockingWait:	
  1758                           
  1759                           ;uart.c: 47: void blockingWait (uint16_t limit);uart.c: 48: {;uart.c: 49:     for (uint1
      +                          6_t counter = 0; counter < limit; counter++)
  1760                           
  1761                           ;incstack = 0
  1762                           ; Regs used in _blockingWait: [wreg+status,2]
  1763  01D9  0020               	movlb	0	; select bank0
  1764  01DA  01E9               	clrf	blockingWait@counter
  1765  01DB  01EA               	clrf	blockingWait@counter+1
  1766  01DC                     l314:	
  1767  01DC  0875               	movf	blockingWait@limit+1,w
  1768  01DD  026A               	subwf	blockingWait@counter+1,w
  1769  01DE  1D03               	skipz
  1770  01DF  29E2               	goto	u505
  1771  01E0  0874               	movf	blockingWait@limit,w
  1772  01E1  0269               	subwf	blockingWait@counter,w
  1773  01E2                     u505:	
  1774  01E2  1803               	btfsc	3,0
  1775  01E3  0008               	return
  1776                           
  1777                           ;uart.c: 50:   _delay((unsigned long)((15)*(32000000/4000.0)));
  1778  01E4  309C               	movlw	156
  1779  01E5  0020               	movlb	0	; select bank0
  1780  01E6  00E8               	movwf	??_blockingWait
  1781  01E7  30D7               	movlw	215
  1782  01E8                     u527:	
  1783  01E8  0B89               	decfsz	9,f
  1784  01E9  29E8               	goto	u527
  1785  01EA  0BE8               	decfsz	??_blockingWait,f
  1786  01EB  29E8               	goto	u527
  1787  01EC  3001               	movlw	1
  1788  01ED  0020               	movlb	0	; select bank0
  1789  01EE  07E9               	addwf	blockingWait@counter,f
  1790  01EF  3000               	movlw	0
  1791  01F0  3DEA               	addwfc	blockingWait@counter+1,f
  1792  01F1  29DC               	goto	l314
  1793  01F2                     __end_of_blockingWait:	
  1794                           
  1795                           	psect	text2
  1796  0250                     __ptext2:	
  1797 ;; *************** function _SYSTEM_Initialize *****************
  1798 ;; Defined at:
  1799 ;;		line 50 in file "mcc_generated_files/mcc.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;		None
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;		None
  1804 ;; Return value:  Size  Location     Type
  1805 ;;                  1    wreg      void 
  1806 ;; Registers used:
  1807 ;;		wreg, status,2, status,0, pclath, cstack
  1808 ;; Tracked objects:
  1809 ;;		On entry : 0/0
  1810 ;;		On exit  : 0/0
  1811 ;;		Unchanged: 0/0
  1812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1813 ;;      Params:         0       0       0       0       0       0       0       0
  1814 ;;      Locals:         0       0       0       0       0       0       0       0
  1815 ;;      Temps:          0       0       0       0       0       0       0       0
  1816 ;;      Totals:         0       0       0       0       0       0       0       0
  1817 ;;Total ram usage:        0 bytes
  1818 ;; Hardware stack levels used:    1
  1819 ;; Hardware stack levels required when called:    7
  1820 ;; This function calls:
  1821 ;;		_EUSART_Initialize
  1822 ;;		_OSCILLATOR_Initialize
  1823 ;;		_PIN_MANAGER_Initialize
  1824 ;;		_WDT_Initialize
  1825 ;; This function is called by:
  1826 ;;		_main
  1827 ;; This function uses a non-reentrant model
  1828 ;;
  1829                           
  1830                           
  1831                           ;psect for function _SYSTEM_Initialize
  1832  0250                     _SYSTEM_Initialize:	
  1833                           
  1834                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
  1835                           
  1836                           ;incstack = 0
  1837                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  1838  0250  3181  21BF  3182   	fcall	_PIN_MANAGER_Initialize
  1839                           
  1840                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
  1841  0253  3182  226A  3182   	fcall	_OSCILLATOR_Initialize
  1842                           
  1843                           ;mcc_generated_files/mcc.c: 55:     WDT_Initialize();
  1844  0256  3182  228E  3182   	fcall	_WDT_Initialize
  1845                           
  1846                           ;mcc_generated_files/mcc.c: 56:     EUSART_Initialize();
  1847  0259  3180  203A         	fcall	_EUSART_Initialize
  1848  025B  0008               	return
  1849  025C                     __end_of_SYSTEM_Initialize:	
  1850                           
  1851                           	psect	text3
  1852  028E                     __ptext3:	
  1853 ;; *************** function _WDT_Initialize *****************
  1854 ;; Defined at:
  1855 ;;		line 67 in file "mcc_generated_files/mcc.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;		None
  1858 ;; Auto vars:     Size  Location     Type
  1859 ;;		None
  1860 ;; Return value:  Size  Location     Type
  1861 ;;                  1    wreg      void 
  1862 ;; Registers used:
  1863 ;;		wreg
  1864 ;; Tracked objects:
  1865 ;;		On entry : 0/0
  1866 ;;		On exit  : 0/0
  1867 ;;		Unchanged: 0/0
  1868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1869 ;;      Params:         0       0       0       0       0       0       0       0
  1870 ;;      Locals:         0       0       0       0       0       0       0       0
  1871 ;;      Temps:          0       0       0       0       0       0       0       0
  1872 ;;      Totals:         0       0       0       0       0       0       0       0
  1873 ;;Total ram usage:        0 bytes
  1874 ;; Hardware stack levels used:    1
  1875 ;; Hardware stack levels required when called:    5
  1876 ;; This function calls:
  1877 ;;		Nothing
  1878 ;; This function is called by:
  1879 ;;		_SYSTEM_Initialize
  1880 ;; This function uses a non-reentrant model
  1881 ;;
  1882                           
  1883                           
  1884                           ;psect for function _WDT_Initialize
  1885  028E                     _WDT_Initialize:	
  1886                           
  1887                           ;mcc_generated_files/mcc.c: 70:     WDTCON = 0x16;
  1888                           
  1889                           ;incstack = 0
  1890                           ; Regs used in _WDT_Initialize: [wreg]
  1891  028E  3016               	movlw	22
  1892  028F  0021               	movlb	1	; select bank1
  1893  0290  0097               	movwf	23	;volatile
  1894  0291  0008               	return
  1895  0292                     __end_of_WDT_Initialize:	
  1896                           
  1897                           	psect	text4
  1898  01BF                     __ptext4:	
  1899 ;; *************** function _PIN_MANAGER_Initialize *****************
  1900 ;; Defined at:
  1901 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;		None
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;		None
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  1    wreg      void 
  1908 ;; Registers used:
  1909 ;;		wreg, status,2
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  1915 ;;      Params:         0       0       0       0       0       0       0       0
  1916 ;;      Locals:         0       0       0       0       0       0       0       0
  1917 ;;      Temps:          0       0       0       0       0       0       0       0
  1918 ;;      Totals:         0       0       0       0       0       0       0       0
  1919 ;;Total ram usage:        0 bytes
  1920 ;; Hardware stack levels used:    1
  1921 ;; Hardware stack levels required when called:    5
  1922 ;; This function calls:
  1923 ;;		Nothing
  1924 ;; This function is called by:
  1925 ;;		_SYSTEM_Initialize
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           
  1930                           ;psect for function _PIN_MANAGER_Initialize
  1931  01BF                     _PIN_MANAGER_Initialize:	
  1932                           
  1933                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  1934                           
  1935                           ;incstack = 0
  1936                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  1937  01BF  0022               	movlb	2	; select bank2
  1938  01C0  018C               	clrf	12	;volatile
  1939                           
  1940                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  1941  01C1  018D               	clrf	13	;volatile
  1942                           
  1943                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  1944  01C2  018E               	clrf	14	;volatile
  1945                           
  1946                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3F;
  1947  01C3  303F               	movlw	63
  1948  01C4  0021               	movlb	1	; select bank1
  1949  01C5  008C               	movwf	12	;volatile
  1950                           
  1951                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x70;
  1952  01C6  3070               	movlw	112
  1953  01C7  008D               	movwf	13	;volatile
  1954                           
  1955                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xFF;
  1956  01C8  30FF               	movlw	255
  1957  01C9  008E               	movwf	14	;volatile
  1958                           
  1959                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0xFF;
  1960  01CA  30FF               	movlw	255
  1961  01CB  0023               	movlb	3	; select bank3
  1962  01CC  008E               	movwf	14	;volatile
  1963                           
  1964                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x50;
  1965  01CD  3050               	movlw	80
  1966  01CE  008D               	movwf	13	;volatile
  1967                           
  1968                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x37;
  1969  01CF  3037               	movlw	55
  1970  01D0  008C               	movwf	12	;volatile
  1971                           
  1972                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  1973  01D1  0024               	movlb	4	; select bank4
  1974  01D2  018D               	clrf	13	;volatile
  1975                           
  1976                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  1977  01D3  018C               	clrf	12	;volatile
  1978                           
  1979                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  1980  01D4  0021               	movlb	1	; select bank1
  1981  01D5  1795               	bsf	21,7	;volatile
  1982                           
  1983                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  1984  01D6  0022               	movlb	2	; select bank2
  1985  01D7  019D               	clrf	29	;volatile
  1986  01D8  0008               	return
  1987  01D9                     __end_of_PIN_MANAGER_Initialize:	
  1988                           
  1989                           	psect	text5
  1990  026A                     __ptext5:	
  1991 ;; *************** function _OSCILLATOR_Initialize *****************
  1992 ;; Defined at:
  1993 ;;		line 59 in file "mcc_generated_files/mcc.c"
  1994 ;; Parameters:    Size  Location     Type
  1995 ;;		None
  1996 ;; Auto vars:     Size  Location     Type
  1997 ;;		None
  1998 ;; Return value:  Size  Location     Type
  1999 ;;                  1    wreg      void 
  2000 ;; Registers used:
  2001 ;;		wreg, status,2
  2002 ;; Tracked objects:
  2003 ;;		On entry : 0/0
  2004 ;;		On exit  : 0/0
  2005 ;;		Unchanged: 0/0
  2006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2007 ;;      Params:         0       0       0       0       0       0       0       0
  2008 ;;      Locals:         0       0       0       0       0       0       0       0
  2009 ;;      Temps:          0       0       0       0       0       0       0       0
  2010 ;;      Totals:         0       0       0       0       0       0       0       0
  2011 ;;Total ram usage:        0 bytes
  2012 ;; Hardware stack levels used:    1
  2013 ;; Hardware stack levels required when called:    5
  2014 ;; This function calls:
  2015 ;;		Nothing
  2016 ;; This function is called by:
  2017 ;;		_SYSTEM_Initialize
  2018 ;; This function uses a non-reentrant model
  2019 ;;
  2020                           
  2021                           
  2022                           ;psect for function _OSCILLATOR_Initialize
  2023  026A                     _OSCILLATOR_Initialize:	
  2024                           
  2025                           ;mcc_generated_files/mcc.c: 62:     OSCCON = 0xF0;
  2026                           
  2027                           ;incstack = 0
  2028                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  2029  026A  30F0               	movlw	240
  2030  026B  0021               	movlb	1	; select bank1
  2031  026C  0099               	movwf	25	;volatile
  2032                           
  2033                           ;mcc_generated_files/mcc.c: 64:     BORCON = 0x00;
  2034  026D  0022               	movlb	2	; select bank2
  2035  026E  0196               	clrf	22	;volatile
  2036  026F  0008               	return
  2037  0270                     __end_of_OSCILLATOR_Initialize:	
  2038                           
  2039                           	psect	text6
  2040  003A                     __ptext6:	
  2041 ;; *************** function _EUSART_Initialize *****************
  2042 ;; Defined at:
  2043 ;;		line 88 in file "mcc_generated_files/eusart.c"
  2044 ;; Parameters:    Size  Location     Type
  2045 ;;		None
  2046 ;; Auto vars:     Size  Location     Type
  2047 ;;		None
  2048 ;; Return value:  Size  Location     Type
  2049 ;;                  1    wreg      void 
  2050 ;; Registers used:
  2051 ;;		wreg, status,2, status,0, pclath, cstack
  2052 ;; Tracked objects:
  2053 ;;		On entry : 0/0
  2054 ;;		On exit  : 0/0
  2055 ;;		Unchanged: 0/0
  2056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2057 ;;      Params:         0       0       0       0       0       0       0       0
  2058 ;;      Locals:         0       0       0       0       0       0       0       0
  2059 ;;      Temps:          0       1       0       0       0       0       0       0
  2060 ;;      Totals:         0       1       0       0       0       0       0       0
  2061 ;;Total ram usage:        1 bytes
  2062 ;; Hardware stack levels used:    1
  2063 ;; Hardware stack levels required when called:    6
  2064 ;; This function calls:
  2065 ;;		_EUSART_SetErrorHandler
  2066 ;;		_EUSART_SetFramingErrorHandler
  2067 ;;		_EUSART_SetOverrunErrorHandler
  2068 ;;		_EUSART_SetRxInterruptHandler
  2069 ;;		_EUSART_SetTxInterruptHandler
  2070 ;; This function is called by:
  2071 ;;		_SYSTEM_Initialize
  2072 ;; This function uses a non-reentrant model
  2073 ;;
  2074                           
  2075                           
  2076                           ;psect for function _EUSART_Initialize
  2077  003A                     _EUSART_Initialize:	
  2078                           
  2079                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  2080                           
  2081                           ;incstack = 0
  2082                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  2083  003A  0021               	movlb	1	; select bank1
  2084  003B  1291               	bcf	17,5	;volatile
  2085                           
  2086                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(EUSART_Receive_ISR);
  2087  003C  30E6               	movlw	low _EUSART_Receive_ISR
  2088  003D  00F4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  2089  003E  3000               	movlw	high _EUSART_Receive_ISR
  2090  003F  00F5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  2091  0040  3182  2288  3180   	fcall	_EUSART_SetRxInterruptHandler
  2092                           
  2093                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  2094  0043  0021               	movlb	1	; select bank1
  2095  0044  1211               	bcf	17,4	;volatile
  2096                           
  2097                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(EUSART_Transmit_ISR)
      +                          ;
  2098  0045  30A2               	movlw	low _EUSART_Transmit_ISR
  2099  0046  00F4               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  2100  0047  3001               	movlw	high _EUSART_Transmit_ISR
  2101  0048  00F5               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  2102  0049  3182  2270  3180   	fcall	_EUSART_SetTxInterruptHandler
  2103                           
  2104                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  2105  004C  3008               	movlw	8
  2106  004D  0023               	movlb	3	; select bank3
  2107  004E  009F               	movwf	31	;volatile
  2108                           
  2109                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  2110  004F  3090               	movlw	144
  2111  0050  009D               	movwf	29	;volatile
  2112                           
  2113                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  2114  0051  3024               	movlw	36
  2115  0052  009E               	movwf	30	;volatile
  2116                           
  2117                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0x44;
  2118  0053  3044               	movlw	68
  2119  0054  009B               	movwf	27	;volatile
  2120                           
  2121                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;
  2122  0055  019C               	clrf	28	;volatile
  2123                           
  2124                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  2125  0056  309B               	movlw	low _EUSART_DefaultFramingErrorHandler
  2126  0057  00F4               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  2127  0058  3002               	movlw	high _EUSART_DefaultFramingErrorHandler
  2128  0059  00F5               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  2129  005A  3182  227C  3180   	fcall	_EUSART_SetFramingErrorHandler
  2130                           
  2131                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  2132  005D  3092               	movlw	low _EUSART_DefaultOverrunErrorHandler
  2133  005E  00F4               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  2134  005F  3002               	movlw	high _EUSART_DefaultOverrunErrorHandler
  2135  0060  00F5               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  2136  0061  3182  2276  3180   	fcall	_EUSART_SetOverrunErrorHandler
  2137                           
  2138                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  2139  0064  3096               	movlw	low _EUSART_DefaultErrorHandler
  2140  0065  00F4               	movwf	EUSART_SetErrorHandler@interruptHandler
  2141  0066  3002               	movlw	high _EUSART_DefaultErrorHandler
  2142  0067  00F5               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  2143  0068  3182  2282         	fcall	_EUSART_SetErrorHandler
  2144                           
  2145                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  2146  006A  0020               	movlb	0	; select bank0
  2147  006B  01BA               	clrf	_eusartRxLastError	;volatile
  2148                           
  2149                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  2150  006C  01F9               	clrf	_eusartTxHead	;volatile
  2151                           
  2152                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  2153  006D  01BC               	clrf	_eusartTxTail	;volatile
  2154                           
  2155                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  2156  006E  3008               	movlw	8
  2157  006F  00E8               	movwf	??_EUSART_Initialize
  2158  0070  0868               	movf	??_EUSART_Initialize,w
  2159  0071  00E7               	movwf	_eusartTxBufferRemaining	;volatile
  2160                           
  2161                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  2162  0072  01F8               	clrf	_eusartRxHead	;volatile
  2163                           
  2164                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  2165  0073  01F7               	clrf	_eusartRxTail	;volatile
  2166                           
  2167                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  2168  0074  01BB               	clrf	_eusartRxCount	;volatile
  2169                           
  2170                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  2171  0075  0021               	movlb	1	; select bank1
  2172  0076  1691               	bsf	17,5	;volatile
  2173  0077  0008               	return
  2174  0078                     __end_of_EUSART_Initialize:	
  2175                           
  2176                           	psect	text7
  2177  0270                     __ptext7:	
  2178 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  2179 ;; Defined at:
  2180 ;;		line 276 in file "mcc_generated_files/eusart.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  2183 ;;		 -> EUSART_Transmit_ISR(1), 
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;		None
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  1    wreg      void 
  2188 ;; Registers used:
  2189 ;;		wreg
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2195 ;;      Params:         2       0       0       0       0       0       0       0
  2196 ;;      Locals:         0       0       0       0       0       0       0       0
  2197 ;;      Temps:          0       0       0       0       0       0       0       0
  2198 ;;      Totals:         2       0       0       0       0       0       0       0
  2199 ;;Total ram usage:        2 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; Hardware stack levels required when called:    5
  2202 ;; This function calls:
  2203 ;;		Nothing
  2204 ;; This function is called by:
  2205 ;;		_EUSART_Initialize
  2206 ;; This function uses a non-reentrant model
  2207 ;;
  2208                           
  2209                           
  2210                           ;psect for function _EUSART_SetTxInterruptHandler
  2211  0270                     _EUSART_SetTxInterruptHandler:	
  2212                           
  2213                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  2214                           
  2215                           ;incstack = 0
  2216                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  2217  0270  0875               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  2218  0271  0020               	movlb	0	; select bank0
  2219  0272  00E6               	movwf	_EUSART_TxDefaultInterruptHandler+1
  2220  0273  0874               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  2221  0274  00E5               	movwf	_EUSART_TxDefaultInterruptHandler
  2222  0275  0008               	return
  2223  0276                     __end_of_EUSART_SetTxInterruptHandler:	
  2224                           
  2225                           	psect	text8
  2226  0276                     __ptext8:	
  2227 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  2228 ;; Defined at:
  2229 ;;		line 268 in file "mcc_generated_files/eusart.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  2232 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;		None
  2235 ;; Return value:  Size  Location     Type
  2236 ;;                  1    wreg      void 
  2237 ;; Registers used:
  2238 ;;		wreg
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2244 ;;      Params:         2       0       0       0       0       0       0       0
  2245 ;;      Locals:         0       0       0       0       0       0       0       0
  2246 ;;      Temps:          0       0       0       0       0       0       0       0
  2247 ;;      Totals:         2       0       0       0       0       0       0       0
  2248 ;;Total ram usage:        2 bytes
  2249 ;; Hardware stack levels used:    1
  2250 ;; Hardware stack levels required when called:    5
  2251 ;; This function calls:
  2252 ;;		Nothing
  2253 ;; This function is called by:
  2254 ;;		_EUSART_Initialize
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257                           
  2258                           
  2259                           ;psect for function _EUSART_SetOverrunErrorHandler
  2260  0276                     _EUSART_SetOverrunErrorHandler:	
  2261                           
  2262                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  2263                           
  2264                           ;incstack = 0
  2265                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  2266  0276  0875               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  2267  0277  0020               	movlb	0	; select bank0
  2268  0278  00E0               	movwf	_EUSART_OverrunErrorHandler+1
  2269  0279  0874               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  2270  027A  00DF               	movwf	_EUSART_OverrunErrorHandler
  2271  027B  0008               	return
  2272  027C                     __end_of_EUSART_SetOverrunErrorHandler:	
  2273                           
  2274                           	psect	text9
  2275  027C                     __ptext9:	
  2276 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  2277 ;; Defined at:
  2278 ;;		line 264 in file "mcc_generated_files/eusart.c"
  2279 ;; Parameters:    Size  Location     Type
  2280 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  2281 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  2282 ;; Auto vars:     Size  Location     Type
  2283 ;;		None
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  1    wreg      void 
  2286 ;; Registers used:
  2287 ;;		wreg
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2293 ;;      Params:         2       0       0       0       0       0       0       0
  2294 ;;      Locals:         0       0       0       0       0       0       0       0
  2295 ;;      Temps:          0       0       0       0       0       0       0       0
  2296 ;;      Totals:         2       0       0       0       0       0       0       0
  2297 ;;Total ram usage:        2 bytes
  2298 ;; Hardware stack levels used:    1
  2299 ;; Hardware stack levels required when called:    5
  2300 ;; This function calls:
  2301 ;;		Nothing
  2302 ;; This function is called by:
  2303 ;;		_EUSART_Initialize
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           
  2308                           ;psect for function _EUSART_SetFramingErrorHandler
  2309  027C                     _EUSART_SetFramingErrorHandler:	
  2310                           
  2311                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  2312                           
  2313                           ;incstack = 0
  2314                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  2315  027C  0875               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  2316  027D  0020               	movlb	0	; select bank0
  2317  027E  00E2               	movwf	_EUSART_FramingErrorHandler+1
  2318  027F  0874               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  2319  0280  00E1               	movwf	_EUSART_FramingErrorHandler
  2320  0281  0008               	return
  2321  0282                     __end_of_EUSART_SetFramingErrorHandler:	
  2322                           
  2323                           	psect	text10
  2324  0282                     __ptext10:	
  2325 ;; *************** function _EUSART_SetErrorHandler *****************
  2326 ;; Defined at:
  2327 ;;		line 272 in file "mcc_generated_files/eusart.c"
  2328 ;; Parameters:    Size  Location     Type
  2329 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  2330 ;;		 -> EUSART_DefaultErrorHandler(1), 
  2331 ;; Auto vars:     Size  Location     Type
  2332 ;;		None
  2333 ;; Return value:  Size  Location     Type
  2334 ;;                  1    wreg      void 
  2335 ;; Registers used:
  2336 ;;		wreg
  2337 ;; Tracked objects:
  2338 ;;		On entry : 0/0
  2339 ;;		On exit  : 0/0
  2340 ;;		Unchanged: 0/0
  2341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2342 ;;      Params:         2       0       0       0       0       0       0       0
  2343 ;;      Locals:         0       0       0       0       0       0       0       0
  2344 ;;      Temps:          0       0       0       0       0       0       0       0
  2345 ;;      Totals:         2       0       0       0       0       0       0       0
  2346 ;;Total ram usage:        2 bytes
  2347 ;; Hardware stack levels used:    1
  2348 ;; Hardware stack levels required when called:    5
  2349 ;; This function calls:
  2350 ;;		Nothing
  2351 ;; This function is called by:
  2352 ;;		_EUSART_Initialize
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           
  2357                           ;psect for function _EUSART_SetErrorHandler
  2358  0282                     _EUSART_SetErrorHandler:	
  2359                           
  2360                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  2361                           
  2362                           ;incstack = 0
  2363                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  2364  0282  0875               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  2365  0283  0020               	movlb	0	; select bank0
  2366  0284  00DE               	movwf	_EUSART_ErrorHandler+1
  2367  0285  0874               	movf	EUSART_SetErrorHandler@interruptHandler,w
  2368  0286  00DD               	movwf	_EUSART_ErrorHandler
  2369  0287  0008               	return
  2370  0288                     __end_of_EUSART_SetErrorHandler:	
  2371                           
  2372                           	psect	text11
  2373  0240                     __ptext11:	
  2374 ;; *************** function _ReadyReceiveBuffer *****************
  2375 ;; Defined at:
  2376 ;;		line 37 in file "uart.c"
  2377 ;; Parameters:    Size  Location     Type
  2378 ;;		None
  2379 ;; Auto vars:     Size  Location     Type
  2380 ;;  position        1    5[COMMON] unsigned char 
  2381 ;; Return value:  Size  Location     Type
  2382 ;;                  1    wreg      void 
  2383 ;; Registers used:
  2384 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2385 ;; Tracked objects:
  2386 ;;		On entry : 0/0
  2387 ;;		On exit  : 0/0
  2388 ;;		Unchanged: 0/0
  2389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2390 ;;      Params:         0       0       0       0       0       0       0       0
  2391 ;;      Locals:         1       0       0       0       0       0       0       0
  2392 ;;      Temps:          1       0       0       0       0       0       0       0
  2393 ;;      Totals:         2       0       0       0       0       0       0       0
  2394 ;;Total ram usage:        2 bytes
  2395 ;; Hardware stack levels used:    1
  2396 ;; Hardware stack levels required when called:    5
  2397 ;; This function calls:
  2398 ;;		Nothing
  2399 ;; This function is called by:
  2400 ;;		_main
  2401 ;; This function uses a non-reentrant model
  2402 ;;
  2403                           
  2404                           
  2405                           ;psect for function _ReadyReceiveBuffer
  2406  0240                     _ReadyReceiveBuffer:	
  2407                           
  2408                           ;uart.c: 39:     ResponseIndex = 0;
  2409                           
  2410                           ;incstack = 0
  2411                           ; Regs used in _ReadyReceiveBuffer: [wreg+fsr1l+fsr1h+status,2+status,0]
  2412  0240  01F6               	clrf	_ResponseIndex
  2413                           
  2414                           ;uart.c: 40:     for (uint8_t position = 0; position < 32; position++)
  2415  0241  01F5               	clrf	ReadyReceiveBuffer@position
  2416  0242                     l1271:	
  2417                           
  2418                           ;uart.c: 41:         ResponseBuffer[position] = 0;
  2419  0242  0875               	movf	ReadyReceiveBuffer@position,w
  2420  0243  3E3D               	addlw	(low (_ResponseBuffer| 0))& (0+255)
  2421  0244  0086               	movwf	6
  2422  0245  0187               	clrf	7
  2423  0246  0181               	clrf	1
  2424  0247  3001               	movlw	1
  2425  0248  00F4               	movwf	??_ReadyReceiveBuffer
  2426  0249  0874               	movf	??_ReadyReceiveBuffer,w
  2427  024A  07F5               	addwf	ReadyReceiveBuffer@position,f
  2428  024B  3020               	movlw	32
  2429  024C  0275               	subwf	ReadyReceiveBuffer@position,w
  2430  024D  1803               	btfsc	3,0
  2431  024E  0008               	return
  2432  024F  2A42               	goto	l1271
  2433  0250                     __end_of_ReadyReceiveBuffer:	
  2434                           
  2435                           	psect	text12
  2436  0185                     __ptext12:	
  2437 ;; *************** function _INIT_SMART_LIGHT *****************
  2438 ;; Defined at:
  2439 ;;		line 18 in file "uart.c"
  2440 ;; Parameters:    Size  Location     Type
  2441 ;;		None
  2442 ;; Auto vars:     Size  Location     Type
  2443 ;;		None
  2444 ;; Return value:  Size  Location     Type
  2445 ;;                  1    wreg      void 
  2446 ;; Registers used:
  2447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2448 ;; Tracked objects:
  2449 ;;		On entry : 0/0
  2450 ;;		On exit  : 0/0
  2451 ;;		Unchanged: 0/0
  2452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2453 ;;      Params:         0       0       0       0       0       0       0       0
  2454 ;;      Locals:         0       0       0       0       0       0       0       0
  2455 ;;      Temps:          0       0       0       0       0       0       0       0
  2456 ;;      Totals:         0       0       0       0       0       0       0       0
  2457 ;;Total ram usage:        0 bytes
  2458 ;; Hardware stack levels used:    1
  2459 ;; Hardware stack levels required when called:    7
  2460 ;; This function calls:
  2461 ;;		_EUSART_SetRxInterruptHandler
  2462 ;;		_SendString
  2463 ;; This function is called by:
  2464 ;;		_main
  2465 ;; This function uses a non-reentrant model
  2466 ;;
  2467                           
  2468                           
  2469                           ;psect for function _INIT_SMART_LIGHT
  2470  0185                     _INIT_SMART_LIGHT:	
  2471                           
  2472                           ;uart.c: 20:     uart[SML].SetRxISR(ReceivedMessage);
  2473                           
  2474                           ;incstack = 0
  2475                           ; Regs used in _INIT_SMART_LIGHT: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2476  0185  30B2               	movlw	low _ReceivedMessage
  2477  0186  00F4               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  2478  0187  3000               	movlw	high _ReceivedMessage
  2479  0188  00F5               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  2480  0189  3015               	movlw	low ((_uart+12)| (0+32768))
  2481  018A  0084               	movwf	4
  2482  018B  3082               	movlw	high ((_uart+12)| (0+32768))
  2483  018C  0085               	movwf	5
  2484  018D  3F01               	moviw [1]fsr0
  2485  018E  008A               	movwf	10
  2486  018F  3F00               	moviw [0]fsr0
  2487  0190  000A               	callw
  2488  0191  3181               	pagesel	$
  2489                           
  2490                           ;uart.c: 21:     SendString("SYS FACTORY RESET");
  2491  0192  301D               	movlw	low (STR_1| (0+32768))
  2492  0193  0020               	movlb	0	; select bank0
  2493  0194  00E8               	movwf	SendString@command
  2494  0195  3082               	movlw	high (STR_1| (0+32768))
  2495  0196  00E9               	movwf	SendString@command+1
  2496  0197  3180  2078  3181   	fcall	_SendString
  2497                           
  2498                           ;uart.c: 22:     SendString("SMART LIGHT INIT");
  2499  019A  302F               	movlw	low (STR_2| (0+32768))
  2500  019B  0020               	movlb	0	; select bank0
  2501  019C  00E8               	movwf	SendString@command
  2502  019D  3082               	movlw	high (STR_2| (0+32768))
  2503  019E  00E9               	movwf	SendString@command+1
  2504  019F  3180  2078         	fcall	_SendString
  2505  01A1  0008               	return
  2506  01A2                     __end_of_INIT_SMART_LIGHT:	
  2507                           
  2508                           	psect	text13
  2509  0078                     __ptext13:	
  2510 ;; *************** function _SendString *****************
  2511 ;; Defined at:
  2512 ;;		line 7 in file "uart.c"
  2513 ;; Parameters:    Size  Location     Type
  2514 ;;  command         2    0[BANK0 ] PTR const unsigned char 
  2515 ;;		 -> NULL(0), ResponseBuffer(32), STR_2(17), STR_1(18), 
  2516 ;; Auto vars:     Size  Location     Type
  2517 ;;  i               2    0        int 
  2518 ;; Return value:  Size  Location     Type
  2519 ;;                  1    wreg      void 
  2520 ;; Registers used:
  2521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2522 ;; Tracked objects:
  2523 ;;		On entry : 0/0
  2524 ;;		On exit  : 0/0
  2525 ;;		Unchanged: 0/0
  2526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2527 ;;      Params:         0       2       0       0       0       0       0       0
  2528 ;;      Locals:         0       2       0       0       0       0       0       0
  2529 ;;      Temps:          0       1       0       0       0       0       0       0
  2530 ;;      Totals:         0       5       0       0       0       0       0       0
  2531 ;;Total ram usage:        5 bytes
  2532 ;; Hardware stack levels used:    1
  2533 ;; Hardware stack levels required when called:    6
  2534 ;; This function calls:
  2535 ;;		_EUSART_Write
  2536 ;; This function is called by:
  2537 ;;		_main
  2538 ;;		_INIT_SMART_LIGHT
  2539 ;; This function uses a non-reentrant model
  2540 ;;
  2541                           
  2542                           
  2543                           ;psect for function _SendString
  2544  0078                     _SendString:	
  2545  0078                     l1357:	
  2546                           ;uart.c: 10:     while (ResponseIndex-- != 0)
  2547                           
  2548                           ;incstack = 0
  2549                           ; Regs used in _SendString: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2550                           
  2551                           
  2552                           ;uart.c: 10:     while (ResponseIndex-- != 0)
  2553  0078  3001               	movlw	1
  2554  0079  02F6               	subwf	_ResponseIndex,f
  2555  007A  0A76               	incf	_ResponseIndex,w
  2556  007B  1903               	btfsc	3,2
  2557  007C  2895               	goto	l1359
  2558                           
  2559                           ;uart.c: 11:         uart[SML].Write(*command++);
  2560  007D  0020               	movlb	0	; select bank0
  2561  007E  0868               	movf	SendString@command,w
  2562  007F  0084               	movwf	4
  2563  0080  0869               	movf	SendString@command+1,w
  2564  0081  0085               	movwf	5
  2565  0082  0800               	movf	0,w	;code access
  2566  0083  00EA               	movwf	??_SendString
  2567  0084  086A               	movf	??_SendString,w
  2568  0085  00F4               	movwf	EUSART_Write@txData
  2569  0086  300B               	movlw	low ((_uart+2)| (0+32768))
  2570  0087  0084               	movwf	4
  2571  0088  3082               	movlw	high ((_uart+2)| (0+32768))
  2572  0089  0085               	movwf	5
  2573  008A  3F01               	moviw [1]fsr0
  2574  008B  008A               	movwf	10
  2575  008C  3F00               	moviw [0]fsr0
  2576  008D  000A               	callw
  2577  008E  3180               	pagesel	$
  2578  008F  3001               	movlw	1
  2579  0090  0020               	movlb	0	; select bank0
  2580  0091  07E8               	addwf	SendString@command,f
  2581  0092  3000               	movlw	0
  2582  0093  3DE9               	addwfc	SendString@command+1,f
  2583  0094  2878               	goto	l1357
  2584  0095                     l1359:	
  2585                           
  2586                           ;uart.c: 12:     uart[SML].Write('\r');
  2587  0095  300D               	movlw	13
  2588  0096  0020               	movlb	0	; select bank0
  2589  0097  00EA               	movwf	??_SendString
  2590  0098  086A               	movf	??_SendString,w
  2591  0099  00F4               	movwf	EUSART_Write@txData
  2592  009A  300B               	movlw	low ((_uart+2)| (0+32768))
  2593  009B  0084               	movwf	4
  2594  009C  3082               	movlw	high ((_uart+2)| (0+32768))
  2595  009D  0085               	movwf	5
  2596  009E  3F01               	moviw [1]fsr0
  2597  009F  008A               	movwf	10
  2598  00A0  3F00               	moviw [0]fsr0
  2599  00A1  000A               	callw
  2600  00A2  3180               	pagesel	$
  2601                           
  2602                           ;uart.c: 13:     uart[SML].Write('\n');
  2603  00A3  300A               	movlw	10
  2604  00A4  0020               	movlb	0	; select bank0
  2605  00A5  00EA               	movwf	??_SendString
  2606  00A6  086A               	movf	??_SendString,w
  2607  00A7  00F4               	movwf	EUSART_Write@txData
  2608  00A8  300B               	movlw	low ((_uart+2)| (0+32768))
  2609  00A9  0084               	movwf	4
  2610  00AA  3082               	movlw	high ((_uart+2)| (0+32768))
  2611  00AB  0085               	movwf	5
  2612  00AC  3F01               	moviw [1]fsr0
  2613  00AD  008A               	movwf	10
  2614  00AE  3F00               	moviw [0]fsr0
  2615  00AF  000A               	callw
  2616  00B0  3180               	pagesel	$
  2617  00B1  0008               	return
  2618  00B2                     __end_of_SendString:	
  2619                           
  2620                           	psect	text14
  2621  0163                     __ptext14:	
  2622 ;; *************** function _EUSART_Write *****************
  2623 ;; Defined at:
  2624 ;;		line 173 in file "mcc_generated_files/eusart.c"
  2625 ;; Parameters:    Size  Location     Type
  2626 ;;  txData          1    4[COMMON] unsigned char 
  2627 ;; Auto vars:     Size  Location     Type
  2628 ;;		None
  2629 ;; Return value:  Size  Location     Type
  2630 ;;                  1    wreg      void 
  2631 ;; Registers used:
  2632 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  2633 ;; Tracked objects:
  2634 ;;		On entry : 0/0
  2635 ;;		On exit  : 0/0
  2636 ;;		Unchanged: 0/0
  2637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2638 ;;      Params:         1       0       0       0       0       0       0       0
  2639 ;;      Locals:         0       0       0       0       0       0       0       0
  2640 ;;      Temps:          1       0       0       0       0       0       0       0
  2641 ;;      Totals:         2       0       0       0       0       0       0       0
  2642 ;;Total ram usage:        2 bytes
  2643 ;; Hardware stack levels used:    1
  2644 ;; Hardware stack levels required when called:    5
  2645 ;; This function calls:
  2646 ;;		Nothing
  2647 ;; This function is called by:
  2648 ;;		_SendString
  2649 ;; This function uses a non-reentrant model
  2650 ;;
  2651                           
  2652                           
  2653                           ;psect for function _EUSART_Write
  2654  0163                     _EUSART_Write:	
  2655  0163                     l1107:	
  2656                           ;mcc_generated_files/eusart.c: 173: void EUSART_Write(uint8_t txData);mcc_generated_file
      +                          s/eusart.c: 174: {;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemai
      +                          ning)
  2657                           
  2658                           ;incstack = 0
  2659                           ; Regs used in _EUSART_Write: [wreg+fsr1l+fsr1h+status,2+status,0]
  2660                           
  2661                           
  2662                           ;mcc_generated_files/eusart.c: 175:     while(0 == eusartTxBufferRemaining)
  2663  0163  0020               	movlb	0	; select bank0
  2664  0164  0867               	movf	_eusartTxBufferRemaining,w	;volatile
  2665  0165  1903               	btfsc	3,2
  2666  0166  2963               	goto	l1107
  2667                           
  2668                           ;mcc_generated_files/eusart.c: 179:     if(0 == PIE1bits.TXIE)
  2669  0167  0021               	movlb	1	; select bank1
  2670  0168  1A11               	btfsc	17,4	;volatile
  2671  0169  296E               	goto	l100
  2672                           
  2673                           ;mcc_generated_files/eusart.c: 180:     {;mcc_generated_files/eusart.c: 181:         TXR
      +                          EG = txData;
  2674  016A  0874               	movf	EUSART_Write@txData,w
  2675  016B  0023               	movlb	3	; select bank3
  2676  016C  009A               	movwf	26	;volatile
  2677                           
  2678                           ;mcc_generated_files/eusart.c: 182:     }
  2679  016D  2982               	goto	l1121
  2680  016E                     l100:	
  2681                           ;mcc_generated_files/eusart.c: 183:     else
  2682                           
  2683                           
  2684                           ;mcc_generated_files/eusart.c: 184:     {;mcc_generated_files/eusart.c: 185:         PIE
      +                          1bits.TXIE = 0;
  2685  016E  1211               	bcf	17,4	;volatile
  2686                           
  2687                           ;mcc_generated_files/eusart.c: 186:         eusartTxBuffer[eusartTxHead++] = txData;
  2688  016F  0874               	movf	EUSART_Write@txData,w
  2689  0170  00F5               	movwf	??_EUSART_Write
  2690  0171  0879               	movf	_eusartTxHead,w
  2691  0172  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  2692  0173  0086               	movwf	6
  2693  0174  0187               	clrf	7
  2694  0175  0875               	movf	??_EUSART_Write,w
  2695  0176  0081               	movwf	1
  2696  0177  3001               	movlw	1
  2697  0178  00F5               	movwf	??_EUSART_Write
  2698  0179  0875               	movf	??_EUSART_Write,w
  2699  017A  07F9               	addwf	_eusartTxHead,f	;volatile
  2700                           
  2701                           ;mcc_generated_files/eusart.c: 187:         if(sizeof(eusartTxBuffer) <= eusartTxHead)
  2702  017B  3008               	movlw	8
  2703  017C  0279               	subwf	_eusartTxHead,w	;volatile
  2704  017D  1803               	btfsc	3,0
  2705                           
  2706                           ;mcc_generated_files/eusart.c: 188:         {;mcc_generated_files/eusart.c: 189:        
      +                               eusartTxHead = 0;
  2707  017E  01F9               	clrf	_eusartTxHead	;volatile
  2708                           
  2709                           ;mcc_generated_files/eusart.c: 191:         eusartTxBufferRemaining--;
  2710  017F  3001               	movlw	1
  2711  0180  0020               	movlb	0	; select bank0
  2712  0181  02E7               	subwf	_eusartTxBufferRemaining,f	;volatile
  2713  0182                     l1121:	
  2714                           
  2715                           ;mcc_generated_files/eusart.c: 193:     PIE1bits.TXIE = 1;
  2716  0182  0021               	movlb	1	; select bank1
  2717  0183  1611               	bsf	17,4	;volatile
  2718  0184  0008               	return
  2719  0185                     __end_of_EUSART_Write:	
  2720                           
  2721                           	psect	text15
  2722  0288                     __ptext15:	
  2723 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  2724 ;; Defined at:
  2725 ;;		line 280 in file "mcc_generated_files/eusart.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;  interruptHan    2    4[COMMON] PTR FTN()void 
  2728 ;;		 -> ReceivedMessage(1), EUSART_Receive_ISR(1), 
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;		None
  2731 ;; Return value:  Size  Location     Type
  2732 ;;                  1    wreg      void 
  2733 ;; Registers used:
  2734 ;;		wreg
  2735 ;; Tracked objects:
  2736 ;;		On entry : 0/0
  2737 ;;		On exit  : 0/0
  2738 ;;		Unchanged: 0/0
  2739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2740 ;;      Params:         2       0       0       0       0       0       0       0
  2741 ;;      Locals:         0       0       0       0       0       0       0       0
  2742 ;;      Temps:          0       0       0       0       0       0       0       0
  2743 ;;      Totals:         2       0       0       0       0       0       0       0
  2744 ;;Total ram usage:        2 bytes
  2745 ;; Hardware stack levels used:    1
  2746 ;; Hardware stack levels required when called:    5
  2747 ;; This function calls:
  2748 ;;		Nothing
  2749 ;; This function is called by:
  2750 ;;		_EUSART_Initialize
  2751 ;;		_INIT_SMART_LIGHT
  2752 ;; This function uses a non-reentrant model
  2753 ;;
  2754                           
  2755                           
  2756                           ;psect for function _EUSART_SetRxInterruptHandler
  2757  0288                     _EUSART_SetRxInterruptHandler:	
  2758                           
  2759                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  2760                           
  2761                           ;incstack = 0
  2762                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  2763  0288  0875               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  2764  0289  0020               	movlb	0	; select bank0
  2765  028A  00E4               	movwf	_EUSART_RxDefaultInterruptHandler+1
  2766  028B  0874               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  2767  028C  00E3               	movwf	_EUSART_RxDefaultInterruptHandler
  2768  028D  0008               	return
  2769  028E                     __end_of_EUSART_SetRxInterruptHandler:	
  2770                           
  2771                           	psect	text16
  2772  0299                     __ptext16:	
  2773 ;; *************** function _GetResponse *****************
  2774 ;; Defined at:
  2775 ;;		line 43 in file "uart.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;		None
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;		None
  2780 ;; Return value:  Size  Location     Type
  2781 ;;                  1    wreg      PTR unsigned char 
  2782 ;; Registers used:
  2783 ;;		wreg
  2784 ;; Tracked objects:
  2785 ;;		On entry : 0/0
  2786 ;;		On exit  : 0/0
  2787 ;;		Unchanged: 0/0
  2788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2789 ;;      Params:         0       0       0       0       0       0       0       0
  2790 ;;      Locals:         0       0       0       0       0       0       0       0
  2791 ;;      Temps:          0       0       0       0       0       0       0       0
  2792 ;;      Totals:         0       0       0       0       0       0       0       0
  2793 ;;Total ram usage:        0 bytes
  2794 ;; Hardware stack levels used:    1
  2795 ;; Hardware stack levels required when called:    5
  2796 ;; This function calls:
  2797 ;;		Nothing
  2798 ;; This function is called by:
  2799 ;;		_main
  2800 ;; This function uses a non-reentrant model
  2801 ;;
  2802                           
  2803                           
  2804                           ;psect for function _GetResponse
  2805  0299                     _GetResponse:	
  2806                           
  2807                           ;uart.c: 45:     return ResponseBuffer;
  2808                           
  2809                           ;incstack = 0
  2810                           ; Regs used in _GetResponse: [wreg]
  2811  0299  303D               	movlw	(low (_ResponseBuffer| 0))& (0+255)
  2812  029A  0008               	return
  2813  029B                     __end_of_GetResponse:	
  2814                           
  2815                           	psect	intentry
  2816  0004                     __pintentry:	
  2817 ;; *************** function _INTERRUPT_InterruptManager *****************
  2818 ;; Defined at:
  2819 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;		None
  2822 ;; Auto vars:     Size  Location     Type
  2823 ;;		None
  2824 ;; Return value:  Size  Location     Type
  2825 ;;                  1    wreg      void 
  2826 ;; Registers used:
  2827 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2828 ;; Tracked objects:
  2829 ;;		On entry : 0/0
  2830 ;;		On exit  : 0/0
  2831 ;;		Unchanged: 0/0
  2832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2833 ;;      Params:         0       0       0       0       0       0       0       0
  2834 ;;      Locals:         0       0       0       0       0       0       0       0
  2835 ;;      Temps:          0       0       0       0       0       0       0       0
  2836 ;;      Totals:         0       0       0       0       0       0       0       0
  2837 ;;Total ram usage:        0 bytes
  2838 ;; Hardware stack levels used:    1
  2839 ;; Hardware stack levels required when called:    4
  2840 ;; This function calls:
  2841 ;;		Absolute function
  2842 ;;		_EUSART_Receive_ISR
  2843 ;;		_EUSART_Transmit_ISR
  2844 ;;		_ReceivedMessage
  2845 ;; This function is called by:
  2846 ;;		Interrupt level 1
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850  0004                     _INTERRUPT_InterruptManager:	
  2851                           
  2852                           ;incstack = 0
  2853  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
  2854                           
  2855                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2856  0005  3180               	pagesel	$
  2857                           
  2858                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.PEIE == 1)
  2859  0006  1F0B               	btfss	11,6	;volatile
  2860  0007  281F               	goto	i1l198
  2861                           
  2862                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
  2863  0008  0021               	movlb	1	; select bank1
  2864  0009  1E11               	btfss	17,4	;volatile
  2865  000A  2814               	goto	i1l193
  2866  000B  0020               	movlb	0	; select bank0
  2867  000C  1E11               	btfss	17,4	;volatile
  2868  000D  2814               	goto	i1l193
  2869                           
  2870                           ;mcc_generated_files/interrupt_manager.c: 58:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 59:             EUSART_TxDefaultInterruptHandler();
  2871  000E  0866               	movf	_EUSART_TxDefaultInterruptHandler+1,w
  2872  000F  008A               	movwf	10
  2873  0010  0865               	movf	_EUSART_TxDefaultInterruptHandler,w
  2874  0011  000A               	callw
  2875  0012  3180               	pagesel	$
  2876                           
  2877                           ;mcc_generated_files/interrupt_manager.c: 60:         }
  2878  0013  281F               	goto	i1l198
  2879  0014                     i1l193:	
  2880                           ;mcc_generated_files/interrupt_manager.c: 61:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
  2881                           
  2882  0014  0021               	movlb	1	; select bank1
  2883  0015  1E91               	btfss	17,5	;volatile
  2884  0016  281F               	goto	i1l198
  2885  0017  0020               	movlb	0	; select bank0
  2886  0018  1E91               	btfss	17,5	;volatile
  2887  0019  281F               	goto	i1l198
  2888                           
  2889                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_RxDefaultInterruptHandler();
  2890  001A  0864               	movf	_EUSART_RxDefaultInterruptHandler+1,w
  2891  001B  008A               	movwf	10
  2892  001C  0863               	movf	_EUSART_RxDefaultInterruptHandler,w
  2893  001D  000A               	callw
  2894  001E  3180               	pagesel	$
  2895  001F                     i1l198:	
  2896                           ;mcc_generated_files/interrupt_manager.c: 69:     }
  2897                           
  2898                           ;mcc_generated_files/interrupt_manager.c: 64:         }
  2899                           
  2900  001F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2901  0020  0009               	retfie
  2902  0021                     __end_of_INTERRUPT_InterruptManager:	
  2903                           
  2904                           	psect	text18
  2905  00E6                     __ptext18:	
  2906 ;; *************** function _EUSART_Receive_ISR *****************
  2907 ;; Defined at:
  2908 ;;		line 216 in file "mcc_generated_files/eusart.c"
  2909 ;; Parameters:    Size  Location     Type
  2910 ;;		None
  2911 ;; Auto vars:     Size  Location     Type
  2912 ;;		None
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2922 ;;      Params:         0       0       0       0       0       0       0       0
  2923 ;;      Locals:         0       0       0       0       0       0       0       0
  2924 ;;      Temps:          0       0       0       0       0       0       0       0
  2925 ;;      Totals:         0       0       0       0       0       0       0       0
  2926 ;;Total ram usage:        0 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:    2
  2929 ;; This function calls:
  2930 ;;		Absolute function
  2931 ;;		_EUSART_DefaultErrorHandler
  2932 ;;		_EUSART_DefaultFramingErrorHandler
  2933 ;;		_EUSART_DefaultOverrunErrorHandler
  2934 ;;		_EUSART_RxDataHandler
  2935 ;; This function is called by:
  2936 ;;		_EUSART_Initialize
  2937 ;;		_ReceivedMessage
  2938 ;;		_INTERRUPT_InterruptManager
  2939 ;; This function uses a non-reentrant model
  2940 ;;
  2941                           
  2942                           
  2943                           ;psect for function _EUSART_Receive_ISR
  2944  00E6                     _EUSART_Receive_ISR:	
  2945                           
  2946                           ;mcc_generated_files/eusart.c: 219:     eusartRxStatusBuffer[eusartRxHead].status = 0;
  2947                           
  2948                           ;incstack = 0
  2949                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2950  00E6  0878               	movf	_eusartRxHead,w	;volatile
  2951  00E7  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  2952  00E8  0086               	movwf	6
  2953  00E9  0187               	clrf	7
  2954  00EA  0181               	clrf	1
  2955                           
  2956                           ;mcc_generated_files/eusart.c: 221:     if(RCSTAbits.FERR){
  2957  00EB  0023               	movlb	3	; select bank3
  2958  00EC  1D1D               	btfss	29,2	;volatile
  2959  00ED  28F9               	goto	i1l1193
  2960                           
  2961                           ;mcc_generated_files/eusart.c: 222:         eusartRxStatusBuffer[eusartRxHead].ferr = 1;
  2962  00EE  0878               	movf	_eusartRxHead,w	;volatile
  2963  00EF  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  2964  00F0  0086               	movwf	6
  2965  00F1  0187               	clrf	7
  2966  00F2  1481               	bsf	1,1
  2967                           
  2968                           ;mcc_generated_files/eusart.c: 223:         EUSART_FramingErrorHandler();
  2969  00F3  0020               	movlb	0	; select bank0
  2970  00F4  0862               	movf	_EUSART_FramingErrorHandler+1,w
  2971  00F5  008A               	movwf	10
  2972  00F6  0861               	movf	_EUSART_FramingErrorHandler,w
  2973  00F7  000A               	callw
  2974  00F8  3180               	pagesel	$
  2975  00F9                     i1l1193:	
  2976                           
  2977                           ;mcc_generated_files/eusart.c: 226:     if(RCSTAbits.OERR){
  2978  00F9  0023               	movlb	3	; select bank3
  2979  00FA  1C9D               	btfss	29,1	;volatile
  2980  00FB  2907               	goto	i1l1199
  2981                           
  2982                           ;mcc_generated_files/eusart.c: 227:         eusartRxStatusBuffer[eusartRxHead].oerr = 1;
  2983  00FC  0878               	movf	_eusartRxHead,w	;volatile
  2984  00FD  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  2985  00FE  0086               	movwf	6
  2986  00FF  0187               	clrf	7
  2987  0100  1501               	bsf	1,2
  2988                           
  2989                           ;mcc_generated_files/eusart.c: 228:         EUSART_OverrunErrorHandler();
  2990  0101  0020               	movlb	0	; select bank0
  2991  0102  0860               	movf	_EUSART_OverrunErrorHandler+1,w
  2992  0103  008A               	movwf	10
  2993  0104  085F               	movf	_EUSART_OverrunErrorHandler,w
  2994  0105  000A               	callw
  2995  0106  3180               	pagesel	$
  2996  0107                     i1l1199:	
  2997                           
  2998                           ;mcc_generated_files/eusart.c: 231:     if(eusartRxStatusBuffer[eusartRxHead].status){
  2999  0107  0878               	movf	_eusartRxHead,w	;volatile
  3000  0108  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3001  0109  0086               	movwf	6
  3002  010A  0187               	clrf	7
  3003  010B  0801               	movf	1,w
  3004  010C  1903               	btfsc	3,2
  3005  010D  2915               	goto	i1l1203
  3006                           
  3007                           ;mcc_generated_files/eusart.c: 232:         EUSART_ErrorHandler();
  3008  010E  0020               	movlb	0	; select bank0
  3009  010F  085E               	movf	_EUSART_ErrorHandler+1,w
  3010  0110  008A               	movwf	10
  3011  0111  085D               	movf	_EUSART_ErrorHandler,w
  3012  0112  000A               	callw
  3013  0113  3180               	pagesel	$
  3014                           
  3015                           ;mcc_generated_files/eusart.c: 233:     } else {
  3016  0114  0008               	return
  3017  0115                     i1l1203:	
  3018                           
  3019                           ;mcc_generated_files/eusart.c: 234:         EUSART_RxDataHandler();
  3020  0115  3181  21F2         	fcall	_EUSART_RxDataHandler
  3021  0117  0008               	return
  3022  0118                     __end_of_EUSART_Receive_ISR:	
  3023                           
  3024                           	psect	text19
  3025  00B2                     __ptext19:	
  3026 ;; *************** function _ReceivedMessage *****************
  3027 ;; Defined at:
  3028 ;;		line 24 in file "uart.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  readByte        1    3[COMMON] unsigned char 
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3042 ;;      Params:         0       0       0       0       0       0       0       0
  3043 ;;      Locals:         1       0       0       0       0       0       0       0
  3044 ;;      Temps:          1       0       0       0       0       0       0       0
  3045 ;;      Totals:         2       0       0       0       0       0       0       0
  3046 ;;Total ram usage:        2 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    3
  3049 ;; This function calls:
  3050 ;;		_EUSART_Read
  3051 ;;		_EUSART_Receive_ISR
  3052 ;;		_EUSART_is_rx_ready
  3053 ;; This function is called by:
  3054 ;;		_INIT_SMART_LIGHT
  3055 ;;		_INTERRUPT_InterruptManager
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           
  3060                           ;psect for function _ReceivedMessage
  3061  00B2                     _ReceivedMessage:	
  3062                           
  3063                           ;uart.c: 26:     uart[SML].RxDefaultISR();
  3064                           
  3065                           ;incstack = 0
  3066                           ; Regs used in _ReceivedMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3067  00B2  3013               	movlw	low ((_uart+10)| (0+32768))
  3068  00B3  0084               	movwf	4
  3069  00B4  3082               	movlw	high ((_uart+10)| (0+32768))
  3070  00B5  0085               	movwf	5
  3071  00B6  3F01               	moviw [1]fsr0
  3072  00B7  008A               	movwf	10
  3073  00B8  3F00               	moviw [0]fsr0
  3074  00B9  000A               	callw
  3075  00BA  3180               	pagesel	$
  3076  00BB                     i1l1279:	
  3077                           ;uart.c: 27:     while (!uart[SML].DataReady()) {
  3078                           
  3079                           
  3080                           ;uart.c: 27:     while (!uart[SML].DataReady()) {
  3081  00BB  300F               	movlw	low ((_uart+6)| (0+32768))
  3082  00BC  0084               	movwf	4
  3083  00BD  3082               	movlw	high ((_uart+6)| (0+32768))
  3084  00BE  0085               	movwf	5
  3085  00BF  3F01               	moviw [1]fsr0
  3086  00C0  008A               	movwf	10
  3087  00C1  3F00               	moviw [0]fsr0
  3088  00C2  000A               	callw
  3089  00C3  3180               	pagesel	$
  3090  00C4  3A00               	xorlw	0
  3091  00C5  1D03               	btfss	3,2
  3092  00C6  28C9               	goto	i1l1281
  3093                           
  3094                           ;uart.c: 28:         __nop();
  3095  00C7  0000               	nop
  3096  00C8  28BB               	goto	i1l1279
  3097  00C9                     i1l1281:	
  3098                           
  3099                           ;uart.c: 30:     uint8_t readByte = uart[SML].Read();
  3100  00C9  3009               	movlw	low (_uart| (0+32768))
  3101  00CA  0084               	movwf	4
  3102  00CB  3082               	movlw	high (_uart| (0+32768))
  3103  00CC  0085               	movwf	5
  3104  00CD  3F01               	moviw [1]fsr0
  3105  00CE  008A               	movwf	10
  3106  00CF  3F00               	moviw [0]fsr0
  3107  00D0  000A               	callw
  3108  00D1  3180               	pagesel	$
  3109  00D2  00F2               	movwf	??_ReceivedMessage
  3110  00D3  0872               	movf	??_ReceivedMessage,w
  3111  00D4  00F3               	movwf	ReceivedMessage@readByte
  3112                           
  3113                           ;uart.c: 31:     if ((ResponseIndex < 32) )
  3114  00D5  3020               	movlw	32
  3115  00D6  0276               	subwf	_ResponseIndex,w
  3116  00D7  1803               	skipnc
  3117  00D8  0008               	return
  3118                           
  3119                           ;uart.c: 32:         ResponseBuffer[ResponseIndex++] = readByte;
  3120  00D9  0873               	movf	ReceivedMessage@readByte,w
  3121  00DA  00F2               	movwf	??_ReceivedMessage
  3122  00DB  0876               	movf	_ResponseIndex,w
  3123  00DC  3E3D               	addlw	(low (_ResponseBuffer| 0))& (0+255)
  3124  00DD  0086               	movwf	6
  3125  00DE  0187               	clrf	7
  3126  00DF  0872               	movf	??_ReceivedMessage,w
  3127  00E0  0081               	movwf	1
  3128  00E1  3001               	movlw	1
  3129  00E2  00F2               	movwf	??_ReceivedMessage
  3130  00E3  0872               	movf	??_ReceivedMessage,w
  3131  00E4  07F6               	addwf	_ResponseIndex,f
  3132  00E5  0008               	return
  3133  00E6                     __end_of_ReceivedMessage:	
  3134                           
  3135                           	psect	text20
  3136  025C                     __ptext20:	
  3137 ;; *************** function _EUSART_is_rx_ready *****************
  3138 ;; Defined at:
  3139 ;;		line 137 in file "mcc_generated_files/eusart.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;		None
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;		None
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  1    wreg      _Bool 
  3146 ;; Registers used:
  3147 ;;		wreg, status,2, status,0
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3153 ;;      Params:         0       0       0       0       0       0       0       0
  3154 ;;      Locals:         0       0       0       0       0       0       0       0
  3155 ;;      Temps:          0       0       0       0       0       0       0       0
  3156 ;;      Totals:         0       0       0       0       0       0       0       0
  3157 ;;Total ram usage:        0 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; This function calls:
  3160 ;;		Nothing
  3161 ;; This function is called by:
  3162 ;;		_ReceivedMessage
  3163 ;; This function uses a non-reentrant model
  3164 ;;
  3165                           
  3166                           
  3167                           ;psect for function _EUSART_is_rx_ready
  3168  025C                     _EUSART_is_rx_ready:	
  3169                           
  3170                           ;mcc_generated_files/eusart.c: 139:     return (eusartRxCount ? 1 : 0);
  3171                           
  3172                           ;incstack = 0
  3173                           ; Regs used in _EUSART_is_rx_ready: [wreg+status,2+status,0]
  3174  025C  0020               	movlb	0	; select bank0
  3175  025D  083B               	movf	_eusartRxCount,w	;volatile
  3176  025E  1903               	btfsc	3,2
  3177  025F  2A62               	goto	u29_20
  3178  0260  3001               	movlw	1
  3179  0261  0008               	return
  3180  0262                     u29_20:	
  3181  0262  3000               	movlw	0
  3182  0263  0008               	return
  3183  0264                     __end_of_EUSART_is_rx_ready:	
  3184                           
  3185                           	psect	text21
  3186  0292                     __ptext21:	
  3187 ;; *************** function _EUSART_DefaultOverrunErrorHandler *****************
  3188 ;; Defined at:
  3189 ;;		line 252 in file "mcc_generated_files/eusart.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;		None
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;		None
  3194 ;; Return value:  Size  Location     Type
  3195 ;;                  1    wreg      void 
  3196 ;; Registers used:
  3197 ;;		None
  3198 ;; Tracked objects:
  3199 ;;		On entry : 0/0
  3200 ;;		On exit  : 0/0
  3201 ;;		Unchanged: 0/0
  3202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3203 ;;      Params:         0       0       0       0       0       0       0       0
  3204 ;;      Locals:         0       0       0       0       0       0       0       0
  3205 ;;      Temps:          0       0       0       0       0       0       0       0
  3206 ;;      Totals:         0       0       0       0       0       0       0       0
  3207 ;;Total ram usage:        0 bytes
  3208 ;; Hardware stack levels used:    1
  3209 ;; This function calls:
  3210 ;;		Nothing
  3211 ;; This function is called by:
  3212 ;;		_EUSART_Initialize
  3213 ;;		_EUSART_Receive_ISR
  3214 ;; This function uses a non-reentrant model
  3215 ;;
  3216                           
  3217                           
  3218                           ;psect for function _EUSART_DefaultOverrunErrorHandler
  3219  0292                     _EUSART_DefaultOverrunErrorHandler:	
  3220                           
  3221                           ;mcc_generated_files/eusart.c: 255:     RCSTAbits.CREN = 0;
  3222                           
  3223                           ;incstack = 0
  3224                           ; Regs used in _EUSART_DefaultOverrunErrorHandler: []
  3225  0292  0023               	movlb	3	; select bank3
  3226  0293  121D               	bcf	29,4	;volatile
  3227                           
  3228                           ;mcc_generated_files/eusart.c: 256:     RCSTAbits.CREN = 1;
  3229  0294  161D               	bsf	29,4	;volatile
  3230  0295  0008               	return
  3231  0296                     __end_of_EUSART_DefaultOverrunErrorHandler:	
  3232                           
  3233                           	psect	text22
  3234  029B                     __ptext22:	
  3235 ;; *************** function _EUSART_DefaultFramingErrorHandler *****************
  3236 ;; Defined at:
  3237 ;;		line 250 in file "mcc_generated_files/eusart.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;		None
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;		None
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  1    wreg      void 
  3244 ;; Registers used:
  3245 ;;		None
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3251 ;;      Params:         0       0       0       0       0       0       0       0
  3252 ;;      Locals:         0       0       0       0       0       0       0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0       0
  3254 ;;      Totals:         0       0       0       0       0       0       0       0
  3255 ;;Total ram usage:        0 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; This function calls:
  3258 ;;		Nothing
  3259 ;; This function is called by:
  3260 ;;		_EUSART_Initialize
  3261 ;;		_EUSART_Receive_ISR
  3262 ;; This function uses a non-reentrant model
  3263 ;;
  3264                           
  3265                           
  3266                           ;psect for function _EUSART_DefaultFramingErrorHandler
  3267  029B                     _EUSART_DefaultFramingErrorHandler:	
  3268                           
  3269                           ;incstack = 0
  3270                           ; Regs used in _EUSART_DefaultFramingErrorHandler: []
  3271  029B  0008               	return
  3272  029C                     __end_of_EUSART_DefaultFramingErrorHandler:	
  3273                           
  3274                           	psect	text23
  3275  0296                     __ptext23:	
  3276 ;; *************** function _EUSART_DefaultErrorHandler *****************
  3277 ;; Defined at:
  3278 ;;		line 260 in file "mcc_generated_files/eusart.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;		None
  3281 ;; Auto vars:     Size  Location     Type
  3282 ;;		None
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  1    wreg      void 
  3285 ;; Registers used:
  3286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3292 ;;      Params:         0       0       0       0       0       0       0       0
  3293 ;;      Locals:         0       0       0       0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0
  3295 ;;      Totals:         0       0       0       0       0       0       0       0
  3296 ;;Total ram usage:        0 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    1
  3299 ;; This function calls:
  3300 ;;		_EUSART_RxDataHandler
  3301 ;; This function is called by:
  3302 ;;		_EUSART_Initialize
  3303 ;;		_EUSART_Receive_ISR
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           
  3308                           ;psect for function _EUSART_DefaultErrorHandler
  3309  0296                     _EUSART_DefaultErrorHandler:	
  3310                           
  3311                           ;mcc_generated_files/eusart.c: 261:     EUSART_RxDataHandler();
  3312                           
  3313                           ;incstack = 0
  3314                           ; Regs used in _EUSART_DefaultErrorHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  3315  0296  3181  21F2         	fcall	_EUSART_RxDataHandler
  3316  0298  0008               	return
  3317  0299                     __end_of_EUSART_DefaultErrorHandler:	
  3318                           
  3319                           	psect	text24
  3320  01F2                     __ptext24:	
  3321 ;; *************** function _EUSART_RxDataHandler *****************
  3322 ;; Defined at:
  3323 ;;		line 240 in file "mcc_generated_files/eusart.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;		None
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;		None
  3328 ;; Return value:  Size  Location     Type
  3329 ;;                  1    wreg      void 
  3330 ;; Registers used:
  3331 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3337 ;;      Params:         0       0       0       0       0       0       0       0
  3338 ;;      Locals:         0       0       0       0       0       0       0       0
  3339 ;;      Temps:          1       0       0       0       0       0       0       0
  3340 ;;      Totals:         1       0       0       0       0       0       0       0
  3341 ;;Total ram usage:        1 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; This function calls:
  3344 ;;		Nothing
  3345 ;; This function is called by:
  3346 ;;		_EUSART_Receive_ISR
  3347 ;;		_EUSART_DefaultErrorHandler
  3348 ;; This function uses a non-reentrant model
  3349 ;;
  3350                           
  3351                           
  3352                           ;psect for function _EUSART_RxDataHandler
  3353  01F2                     _EUSART_RxDataHandler:	
  3354                           
  3355                           ;mcc_generated_files/eusart.c: 242:     eusartRxBuffer[eusartRxHead++] = RCREG;
  3356                           
  3357                           ;incstack = 0
  3358                           ; Regs used in _EUSART_RxDataHandler: [wreg+fsr1l+fsr1h+status,2+status,0]
  3359  01F2  0023               	movlb	3	; select bank3
  3360  01F3  0819               	movf	25,w	;volatile
  3361  01F4  00F0               	movwf	??_EUSART_RxDataHandler
  3362  01F5  0878               	movf	_eusartRxHead,w
  3363  01F6  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  3364  01F7  0086               	movwf	6
  3365  01F8  0187               	clrf	7
  3366  01F9  0870               	movf	??_EUSART_RxDataHandler,w
  3367  01FA  0081               	movwf	1
  3368  01FB  3001               	movlw	1
  3369  01FC  00F0               	movwf	??_EUSART_RxDataHandler
  3370  01FD  0870               	movf	??_EUSART_RxDataHandler,w
  3371  01FE  07F8               	addwf	_eusartRxHead,f	;volatile
  3372                           
  3373                           ;mcc_generated_files/eusart.c: 243:     if(sizeof(eusartRxBuffer) <= eusartRxHead)
  3374  01FF  3008               	movlw	8
  3375  0200  0278               	subwf	_eusartRxHead,w	;volatile
  3376  0201  1803               	btfsc	3,0
  3377                           
  3378                           ;mcc_generated_files/eusart.c: 244:     {;mcc_generated_files/eusart.c: 245:         eus
      +                          artRxHead = 0;
  3379  0202  01F8               	clrf	_eusartRxHead	;volatile
  3380                           
  3381                           ;mcc_generated_files/eusart.c: 247:     eusartRxCount++;
  3382  0203  3001               	movlw	1
  3383  0204  00F0               	movwf	??_EUSART_RxDataHandler
  3384  0205  0870               	movf	??_EUSART_RxDataHandler,w
  3385  0206  0020               	movlb	0	; select bank0
  3386  0207  07BB               	addwf	_eusartRxCount,f	;volatile
  3387  0208  0008               	return
  3388  0209                     __end_of_EUSART_RxDataHandler:	
  3389                           
  3390                           	psect	text25
  3391  013E                     __ptext25:	
  3392 ;; *************** function _EUSART_Read *****************
  3393 ;; Defined at:
  3394 ;;		line 151 in file "mcc_generated_files/eusart.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;		None
  3397 ;; Auto vars:     Size  Location     Type
  3398 ;;  readValue       1    1[COMMON] unsigned char 
  3399 ;; Return value:  Size  Location     Type
  3400 ;;                  1    wreg      unsigned char 
  3401 ;; Registers used:
  3402 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3403 ;; Tracked objects:
  3404 ;;		On entry : 0/0
  3405 ;;		On exit  : 0/0
  3406 ;;		Unchanged: 0/0
  3407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3408 ;;      Params:         0       0       0       0       0       0       0       0
  3409 ;;      Locals:         1       0       0       0       0       0       0       0
  3410 ;;      Temps:          1       0       0       0       0       0       0       0
  3411 ;;      Totals:         2       0       0       0       0       0       0       0
  3412 ;;Total ram usage:        2 bytes
  3413 ;; Hardware stack levels used:    1
  3414 ;; This function calls:
  3415 ;;		Nothing
  3416 ;; This function is called by:
  3417 ;;		_ReceivedMessage
  3418 ;; This function uses a non-reentrant model
  3419 ;;
  3420                           
  3421                           
  3422                           ;psect for function _EUSART_Read
  3423  013E                     _EUSART_Read:	
  3424  013E                     i1l1165:	
  3425                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  3426                           
  3427                           ;incstack = 0
  3428                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  3429                           
  3430                           
  3431                           ;mcc_generated_files/eusart.c: 155:     while(0 == eusartRxCount)
  3432  013E  0020               	movlb	0	; select bank0
  3433  013F  083B               	movf	_eusartRxCount,w	;volatile
  3434  0140  1903               	btfsc	3,2
  3435  0141  293E               	goto	i1l1165
  3436                           
  3437                           ;mcc_generated_files/eusart.c: 159:     eusartRxLastError = eusartRxStatusBuffer[eusartR
      +                          xTail];
  3438  0142  0877               	movf	_eusartRxTail,w	;volatile
  3439  0143  3E20               	addlw	(low (_eusartRxStatusBuffer| 0))& (0+255)
  3440  0144  0086               	movwf	6
  3441  0145  0187               	clrf	7
  3442  0146  0801               	movf	1,w
  3443  0147  00F0               	movwf	??_EUSART_Read
  3444  0148  0870               	movf	??_EUSART_Read,w
  3445  0149  00BA               	movwf	_eusartRxLastError	;volatile
  3446                           
  3447                           ;mcc_generated_files/eusart.c: 161:     readValue = eusartRxBuffer[eusartRxTail++];
  3448  014A  0877               	movf	_eusartRxTail,w
  3449  014B  3E28               	addlw	(low (_eusartRxBuffer| 0))& (0+255)
  3450  014C  0086               	movwf	6
  3451  014D  0187               	clrf	7
  3452  014E  0801               	movf	1,w
  3453  014F  00F0               	movwf	??_EUSART_Read
  3454  0150  0870               	movf	??_EUSART_Read,w
  3455  0151  00F1               	movwf	EUSART_Read@readValue
  3456  0152  3001               	movlw	1
  3457  0153  00F0               	movwf	??_EUSART_Read
  3458  0154  0870               	movf	??_EUSART_Read,w
  3459  0155  07F7               	addwf	_eusartRxTail,f	;volatile
  3460                           
  3461                           ;mcc_generated_files/eusart.c: 162:     if(sizeof(eusartRxBuffer) <= eusartRxTail)
  3462  0156  3008               	movlw	8
  3463  0157  0277               	subwf	_eusartRxTail,w	;volatile
  3464  0158  1803               	btfsc	3,0
  3465                           
  3466                           ;mcc_generated_files/eusart.c: 163:     {;mcc_generated_files/eusart.c: 164:         eus
      +                          artRxTail = 0;
  3467  0159  01F7               	clrf	_eusartRxTail	;volatile
  3468                           
  3469                           ;mcc_generated_files/eusart.c: 166:     PIE1bits.RCIE = 0;
  3470  015A  0021               	movlb	1	; select bank1
  3471  015B  1291               	bcf	17,5	;volatile
  3472                           
  3473                           ;mcc_generated_files/eusart.c: 167:     eusartRxCount--;
  3474  015C  3001               	movlw	1
  3475  015D  0020               	movlb	0	; select bank0
  3476  015E  02BB               	subwf	_eusartRxCount,f	;volatile
  3477                           
  3478                           ;mcc_generated_files/eusart.c: 168:     PIE1bits.RCIE = 1;
  3479  015F  0021               	movlb	1	; select bank1
  3480  0160  1691               	bsf	17,5	;volatile
  3481                           
  3482                           ;mcc_generated_files/eusart.c: 170:     return readValue;
  3483  0161  0871               	movf	EUSART_Read@readValue,w
  3484  0162  0008               	return
  3485  0163                     __end_of_EUSART_Read:	
  3486                           
  3487                           	psect	text26
  3488  01A2                     __ptext26:	
  3489 ;; *************** function _EUSART_Transmit_ISR *****************
  3490 ;; Defined at:
  3491 ;;		line 197 in file "mcc_generated_files/eusart.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;		None
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;		None
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  1    wreg      void 
  3498 ;; Registers used:
  3499 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3505 ;;      Params:         0       0       0       0       0       0       0       0
  3506 ;;      Locals:         0       0       0       0       0       0       0       0
  3507 ;;      Temps:          1       0       0       0       0       0       0       0
  3508 ;;      Totals:         1       0       0       0       0       0       0       0
  3509 ;;Total ram usage:        1 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; This function calls:
  3512 ;;		Nothing
  3513 ;; This function is called by:
  3514 ;;		_EUSART_Initialize
  3515 ;;		_INTERRUPT_InterruptManager
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           
  3520                           ;psect for function _EUSART_Transmit_ISR
  3521  01A2                     _EUSART_Transmit_ISR:	
  3522                           
  3523                           ;mcc_generated_files/eusart.c: 201:     if(sizeof(eusartTxBuffer) > eusartTxBufferRemain
      +                          ing)
  3524                           
  3525                           ;incstack = 0
  3526                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
  3527  01A2  3008               	movlw	8
  3528  01A3  0020               	movlb	0	; select bank0
  3529  01A4  0267               	subwf	_eusartTxBufferRemaining,w	;volatile
  3530  01A5  1803               	skipnc
  3531  01A6  29BC               	goto	i1l106
  3532                           
  3533                           ;mcc_generated_files/eusart.c: 202:     {;mcc_generated_files/eusart.c: 203:         TXR
      +                          EG = eusartTxBuffer[eusartTxTail++];
  3534  01A7  083C               	movf	_eusartTxTail,w
  3535  01A8  3E30               	addlw	(low (_eusartTxBuffer| 0))& (0+255)
  3536  01A9  0086               	movwf	6
  3537  01AA  0187               	clrf	7
  3538  01AB  0801               	movf	1,w
  3539  01AC  0023               	movlb	3	; select bank3
  3540  01AD  009A               	movwf	26	;volatile
  3541  01AE  3001               	movlw	1
  3542  01AF  00F0               	movwf	??_EUSART_Transmit_ISR
  3543  01B0  0870               	movf	??_EUSART_Transmit_ISR,w
  3544  01B1  0020               	movlb	0	; select bank0
  3545  01B2  07BC               	addwf	_eusartTxTail,f	;volatile
  3546                           
  3547                           ;mcc_generated_files/eusart.c: 204:         if(sizeof(eusartTxBuffer) <= eusartTxTail)
  3548  01B3  3008               	movlw	8
  3549  01B4  023C               	subwf	_eusartTxTail,w	;volatile
  3550  01B5  1803               	btfsc	3,0
  3551                           
  3552                           ;mcc_generated_files/eusart.c: 205:         {;mcc_generated_files/eusart.c: 206:        
      +                               eusartTxTail = 0;
  3553  01B6  01BC               	clrf	_eusartTxTail	;volatile
  3554                           
  3555                           ;mcc_generated_files/eusart.c: 208:         eusartTxBufferRemaining++;
  3556  01B7  3001               	movlw	1
  3557  01B8  00F0               	movwf	??_EUSART_Transmit_ISR
  3558  01B9  0870               	movf	??_EUSART_Transmit_ISR,w
  3559  01BA  07E7               	addwf	_eusartTxBufferRemaining,f	;volatile
  3560                           
  3561                           ;mcc_generated_files/eusart.c: 209:     }
  3562  01BB  0008               	return
  3563  01BC                     i1l106:	
  3564                           ;mcc_generated_files/eusart.c: 210:     else
  3565                           
  3566                           
  3567                           ;mcc_generated_files/eusart.c: 211:     {;mcc_generated_files/eusart.c: 212:         PIE
      +                          1bits.TXIE = 0;
  3568  01BC  0021               	movlb	1	; select bank1
  3569  01BD  1211               	bcf	17,4	;volatile
  3570  01BE  0008               	return
  3571  01BF                     __end_of_EUSART_Transmit_ISR:	
  3572  007E                     btemp	set	126	;btemp
  3573  007E                     int$flags	set	126
  3574  007E                     wtemp0	set	126


Data Sizes:
    Strings     35
    Constant    20
    Data        0
    BSS         97
    Persistent  43
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80      6      78
    BANK1            80      0      32
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            16      0       0

Pointer List with Targets:

    S494$4$0	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S494$6$0	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), EUSART_Receive_ISR(), 

    lastRxData	PTR unsigned char  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    SendString@command	PTR const unsigned char  size(2) Largest target is 32
		 -> NULL(NULL[0]), ResponseBuffer(BANK0[32]), STR_2(CODE[17]), STR_1(CODE[18]), 

    S494$Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    uart.Initialize	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Initialize(), 

    S494$TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    uart.TxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    S494$TransmitDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    uart.TransmitDone	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_done(), 

    S494$SetRxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    uart.SetRxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetRxInterruptHandler(), 

    S494$RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    uart.RxDefaultISR	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Receive_ISR(), 

    S494$SetTxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    uart.SetTxISR	PTR FTN(PTR FTN()void ,)void  size(2) Largest target is 1
		 -> EUSART_SetTxInterruptHandler(), 

    S494$DataReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    uart.DataReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_rx_ready(), 

    S494$TransmitReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    uart.TransmitReady	PTR FTN()_Bool  size(2) Largest target is 1
		 -> EUSART_is_tx_ready(), 

    S494$Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    uart.Write	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> EUSART_Write(), 

    S494$Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    uart.Read	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> EUSART_Read(), 

    sp__GetResponse	PTR unsigned char  size(1) Largest target is 32
		 -> ResponseBuffer(BANK0[32]), 

    rxData	PTR unsigned char  size(1) Largest target is 32
		 -> NULL(NULL[0]), ResponseBuffer(BANK0[32]), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> ReceivedMessage(), EUSART_Receive_ISR(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), ReceivedMessage(), EUSART_Receive_ISR(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_Transmit_ISR(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_Transmit_ISR(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMMON

    _main->_ReadyReceiveBuffer
    _main->_blockingWait
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _INIT_SMART_LIGHT->_EUSART_SetRxInterruptHandler
    _SendString->_EUSART_Write

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_ReceivedMessage
    _ReceivedMessage->_EUSART_Read
    _EUSART_Receive_ISR->_EUSART_RxDataHandler
    _EUSART_DefaultErrorHandler->_EUSART_RxDataHandler

Critical Paths under _main in BANK0

    _main->_SendString
    _SYSTEM_Initialize->_EUSART_Initialize
    _INIT_SMART_LIGHT->_SendString

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    1940
                                              5 BANK0      1     1      0
                        _GetResponse
                   _INIT_SMART_LIGHT
                 _ReadyReceiveBuffer
                  _SYSTEM_Initialize
                         _SendString
                       _blockingWait
 ---------------------------------------------------------------------------------
 (1) _blockingWait                                         5     3      2     158
                                              4 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     543
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     543
                                              0 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _ReadyReceiveBuffer                                   2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _INIT_SMART_LIGHT                                     0     0      0     661
       _EUSART_SetRxInterruptHandler *
                         _SendString
 ---------------------------------------------------------------------------------
 (1) _SendString                                           5     3      2     510
                                              0 BANK0      5     3      2
                       _EUSART_Write *
 ---------------------------------------------------------------------------------
 (2) _EUSART_Write                                         2     1      1     203
                                              4 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2     151
                                              4 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _GetResponse                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                           0     0      0      47
                   Absolute function *
                 _EUSART_Receive_ISR *
                _EUSART_Transmit_ISR *
                    _ReceivedMessage *
 ---------------------------------------------------------------------------------
 (5) _ReceivedMessage                                      2     2      0      47
                                              2 COMMON     2     2      0
                        _EUSART_Read *
                 _EUSART_Receive_ISR *
                 _EUSART_is_rx_ready *
 ---------------------------------------------------------------------------------
 (6) _EUSART_is_rx_ready                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Receive_ISR                                   0     0      0       0
                   Absolute function *
         _EUSART_DefaultErrorHandler *
  _EUSART_DefaultFramingErrorHandler *
  _EUSART_DefaultOverrunErrorHandler *
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultOverrunErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultFramingErrorHandler                    0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_DefaultErrorHandler                           0     0      0       0
               _EUSART_RxDataHandler
 ---------------------------------------------------------------------------------
 (7) _EUSART_RxDataHandler                                 1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART_Read                                          2     2      0      24
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _GetResponse
   _INIT_SMART_LIGHT
     _EUSART_SetRxInterruptHandler *
     _SendString *
       _EUSART_Write *
   _ReadyReceiveBuffer
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _WDT_Initialize
   _SendString
     _EUSART_Write *
   _blockingWait

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART_Receive_ISR *
     Absolute function(Fake) *
     _EUSART_DefaultErrorHandler *
       _EUSART_RxDataHandler
     _EUSART_DefaultFramingErrorHandler *
     _EUSART_DefaultOverrunErrorHandler *
     _EUSART_RxDataHandler *
   _EUSART_Transmit_ISR *
   _ReceivedMessage *
     _EUSART_Read *
     _EUSART_Receive_ISR *
       Absolute function(Fake) *
       _EUSART_DefaultErrorHandler *
         _EUSART_RxDataHandler
       _EUSART_DefaultFramingErrorHandler *
       _EUSART_DefaultOverrunErrorHandler *
       _EUSART_RxDataHandler *
     _EUSART_is_rx_ready *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       A       2       71.4%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      78       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50      6      4E       6       97.5%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      0      20       8       40.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      78      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Tue Nov 05 11:06:06 2019

                ?_EUSART_SetRxInterruptHandler 0074                                    __CFG_CP$OFF 0000  
                                  __CFG_LVP$ON 0000                                            l100 016E  
                                          l314 01DC                                            u505 01E2  
                                          u527 01E8                         ??_EUSART_RxDataHandler 0070  
               ?_EUSART_SetFramingErrorHandler 0074                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                   ?_EUSART_Read 0070  
                                         l1121 0182                                           l1107 0163  
                                         l1271 0242                                           l1357 0078  
                                         l1381 0120                                           l1359 0095  
                                         STR_1 021D                                           STR_2 022F  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                            __end_of_GetResponse 029B  
                                         _WPUA 020C                                           _WPUB 020D  
                                 __CFG_WRT$OFF 0000                                           _main 0118  
                                         _uart 0209                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           btemp 007E  
                                __CFG_BOREN$ON 0000                                           start 0021  
                             _INIT_SMART_LIGHT 0185                                  __CFG_MCLRE$ON 0000  
                              _ReceivedMessage 00B2                                  ?_EUSART_Write 0074  
               __size_of_OSCILLATOR_Initialize 0006                  __end_of_OSCILLATOR_Initialize 0270  
                                        ?_main 0070                                  __CFG_WDTE$OFF 0000  
                                        i1l106 01BC                                          i1l193 0014  
                                        i1l198 001F                                          _RCREG 0199  
                                        _RCSTA 019D                                          u29_20 0262  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _TXREG 019A  
                                        _TXSTA 019E                                 _WDT_Initialize 028E  
                                        pclath 000A                                          status 0003  
                                        wtemp0 007E                                __initialization 0023  
                                 __end_of_main 013E                                   __end_of_uart 021D  
                               ??_EUSART_Write 0075                                 __CFG_LPBOR$OFF 0000  
                  ?_INTERRUPT_InterruptManager 0070                           __end_of_blockingWait 01F2  
               ??_EUSART_SetRxInterruptHandler 0076                                         ??_main 006D  
                                  _GetResponse 0299                         __end_of_WDT_Initialize 0292  
    __end_of_EUSART_DefaultFramingErrorHandler 029C     __size_of_EUSART_DefaultFramingErrorHandler 0001  
          ??_EUSART_DefaultFramingErrorHandler 0070             ?_EUSART_DefaultFramingErrorHandler 0070  
            _EUSART_DefaultFramingErrorHandler 029B                     _EUSART_OverrunErrorHandler 005F  
                                       _APFCON 011D                                         _ANSELA 018C  
                                       _ANSELB 018D                                         _ANSELC 018E  
                   __end_of_EUSART_is_rx_ready 0264                                         _BORCON 0116  
                                       i1l1203 0115                                         i1l1165 013E  
                                       i1l1281 00C9                                         i1l1193 00F9  
                                       i1l1279 00BB                                         i1l1199 0107  
                           _ReadyReceiveBuffer 0240                                     _SendString 0078  
                                       _OSCCON 0099                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                               __CFG_PWRTE$OFF 0000                        __end_of_ReceivedMessage 00E6  
                          ?_ReadyReceiveBuffer 0070                                 __CFG_STVREN$ON 0000  
                          _EUSART_Transmit_ISR 01A2                                         _rxData 0039  
                         ??_ReadyReceiveBuffer 0074                                ?_WDT_Initialize 0070  
                         ?_EUSART_Transmit_ISR 0070                           __size_of_EUSART_Read 0025  
                            _SYSTEM_Initialize 0250                        __end_of__initialization 0036  
                           ?_SYSTEM_Initialize 0070           __end_of_EUSART_SetTxInterruptHandler 0276  
        __size_of_EUSART_SetTxInterruptHandler 0006                   _EUSART_SetTxInterruptHandler 0270  
                      ReceivedMessage@readByte 0073                                 __pcstackCOMMON 0070  
                          ??_SYSTEM_Initialize 0076                                    _ReadStorage 00A0  
                               _OPTION_REGbits 0095                           _eusartRxStatusBuffer 0020  
                     __end_of_INIT_SMART_LIGHT 01A2                ??_EUSART_SetOverrunErrorHandler 0076  
                    __end_of_SYSTEM_Initialize 025C                          ??_EUSART_Transmit_ISR 0070  
                               _ResponseBuffer 003D                                     __pbssBANK0 0020  
                                   __pbssBANK1 00A0                                    ?_SendString 0068  
                         __end_of_EUSART_Write 0185                    __size_of_EUSART_Receive_ISR 0032  
                             ?_ReceivedMessage 0070                                     __pmaintext 0118  
                        __size_of_blockingWait 0019                  ?_EUSART_SetTxInterruptHandler 0074  
             _EUSART_TxDefaultInterruptHandler 0065                                     __pintentry 0004  
                                      _BAUDCON 019F                   ??_EUSART_DefaultErrorHandler 0071  
                                _eusartRxCount 003B                  __size_of_EUSART_RxDataHandler 0017  
                     ??_EUSART_SetErrorHandler 0076                              SendString@command 0068  
                                 _blockingWait 01D9                                     _lastRxData 0038  
          __size_of_EUSART_DefaultErrorHandler 0003                            __size_of_SendString 003A  
                                      __ptext1 01D9                                        __ptext2 0250  
                                      __ptext3 028E                                        __ptext4 01BF  
                                      __ptext5 026A                                        __ptext6 003A  
                                      __ptext7 0270                                        __ptext8 0276  
                                      __ptext9 027C                          _OSCILLATOR_Initialize 026A  
                                 ?_GetResponse 0070                       ??_PIN_MANAGER_Initialize 0074  
                   __size_of_SYSTEM_Initialize 000C                                        clrloop0 0265  
                         end_of_initialization 0036          __end_of_EUSART_SetOverrunErrorHandler 027C  
       __size_of_EUSART_SetOverrunErrorHandler 0006                  _EUSART_SetOverrunErrorHandler 0276  
                            _EUSART_Initialize 003A                             ?_EUSART_Initialize 0070  
                                    _RCSTAbits 019D                             _EUSART_is_rx_ready 025C  
                           _EUSART_is_tx_ready 0000                            ??_EUSART_Initialize 0068  
                             ??_WDT_Initialize 0074                 ??_EUSART_SetTxInterruptHandler 0076  
                          ?_EUSART_is_rx_ready 0070                               __CFG_FOSC$INTOSC 0000  
                        __size_of_EUSART_Write 0022                __size_of_EUSART_SetErrorHandler 0006  
                    __end_of_EUSART_Initialize 0078                           ??_EUSART_is_rx_ready 0070  
                                    _TXSTAbits 019E             __end_of_EUSART_DefaultErrorHandler 0299  
                   _EUSART_DefaultErrorHandler 0296                                   _EUSART_Write 0163  
                       ?_OSCILLATOR_Initialize 0070                            start_initialization 0023  
                  __size_of_ReadyReceiveBuffer 0010                              ?_INIT_SMART_LIGHT 0070  
              __size_of_PIN_MANAGER_Initialize 001A                                  ??_EUSART_Read 0070  
 EUSART_SetRxInterruptHandler@interruptHandler 0074   EUSART_SetTxInterruptHandler@interruptHandler 0074  
                           ??_INIT_SMART_LIGHT 0076                                   ??_SendString 006A  
               ?_EUSART_SetOverrunErrorHandler 0074                     _EUSART_FramingErrorHandler 0061  
                       _EUSART_SetErrorHandler 0282                             __end_of_SendString 00B2  
                  __end_of_EUSART_Transmit_ISR 01BF                                    __pbssCOMMON 0076  
                                    ___latbits 0002                                  __pcstackBANK0 0068  
                         __size_of_GetResponse 0002                     ReadyReceiveBuffer@position 0075  
                   __end_of_EUSART_Receive_ISR 0118                     __size_of_EUSART_Initialize 003E  
             _EUSART_RxDefaultInterruptHandler 0063                            __end_of_EUSART_Read 0163  
                                _ResponseIndex 0076                                      __pnvBANK0 005D  
                 __end_of_EUSART_RxDataHandler 0209                         _PIN_MANAGER_Initialize 01BF  
                         EUSART_Read@readValue 0071                                   _eusartRxHead 0078  
                                 _eusartTxHead 0079                                   _eusartRxTail 0077  
                                 _eusartTxTail 003C                       __size_of_ReceivedMessage 0034  
                 ??_INTERRUPT_InterruptManager 0074                        _eusartTxBufferRemaining 0067  
                               _eusartRxBuffer 0028                                 _eusartTxBuffer 0030  
       EUSART_SetErrorHandler@interruptHandler 0074                                      clear_ram0 0264  
                                     _PIE1bits 0091                              _eusartRxLastError 003A  
                          blockingWait@counter 0069            __size_of_INTERRUPT_InterruptManager 001D  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 0076  
                            _EUSART_is_tx_done 0000      __end_of_EUSART_DefaultOverrunErrorHandler 0296  
   __size_of_EUSART_DefaultOverrunErrorHandler 0004            ??_EUSART_DefaultOverrunErrorHandler 0070  
           ?_EUSART_DefaultOverrunErrorHandler 0070              _EUSART_DefaultOverrunErrorHandler 0292  
                                  _EUSART_Read 013E                        ??_OSCILLATOR_Initialize 0074  
                          _EUSART_ErrorHandler 005D                    ?_EUSART_DefaultErrorHandler 0070  
                            ??_ReceivedMessage 0072                           _EUSART_RxDataHandler 01F2  
                                     __ptext10 0282                                       __ptext11 0240  
                                     __ptext20 025C                                       __ptext12 0185  
                                     __ptext21 0292                                       __ptext13 0078  
                                     __ptext22 029B                                       __ptext14 0163  
                                     __ptext23 0296                                       __ptext15 0288  
                                     __ptext24 01F2                                       __ptext16 0299  
                                     __ptext25 013E                                       __ptext26 01A2  
                                     __ptext18 00E6                                       __ptext19 00B2  
                  __size_of_EUSART_is_rx_ready 0008                                  __size_of_main 0026  
                      ?_EUSART_SetErrorHandler 0074                      __size_of_INIT_SMART_LIGHT 001D  
EUSART_SetOverrunErrorHandler@interruptHandler 0074                                       int$flags 007E  
           __end_of_INTERRUPT_InterruptManager 0021                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 0282         __size_of_EUSART_SetFramingErrorHandler 0006  
                _EUSART_SetFramingErrorHandler 027C                     __end_of_ReadyReceiveBuffer 0250  
                                   _INTCONbits 000B                          ?_EUSART_RxDataHandler 0070  
                      __size_of_WDT_Initialize 0004                                       intlevel1 0000  
                                ?_blockingWait 0074                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 0288                              __CFG_CLKOUTEN$OFF 0000  
         __end_of_EUSART_SetRxInterruptHandler 028E          __size_of_EUSART_SetRxInterruptHandler 0006  
                 _EUSART_SetRxInterruptHandler 0288                              blockingWait@limit 0074  
                           _EUSART_Receive_ISR 00E6  EUSART_SetFramingErrorHandler@interruptHandler 0074  
                                __pstringtext1 0209                                  __pstringtext2 021D  
                                __pstringtext3 022F                                  __pstringtext4 0000  
                          ?_EUSART_Receive_ISR 0070                                  ??_GetResponse 0074  
                           EUSART_Write@txData 0074                   __size_of_EUSART_Transmit_ISR 001D  
                               ??_blockingWait 0068                 __end_of_PIN_MANAGER_Initialize 01D9  
                         ??_EUSART_Receive_ISR 0071  
